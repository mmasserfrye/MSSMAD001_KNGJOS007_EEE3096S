
EEE3096S_2022_Prac_2_Delays_and_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08003c98  08003c98  00013c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d78  08003d78  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003d78  08003d78  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d78  08003d78  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d78  08003d78  00013d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  08003df0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08003df0  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6e1  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e3d  00000000  00000000  0002c779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002e5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002efa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012184  00000000  00000000  0002f8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db0d  00000000  00000000  00041a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a333  00000000  00000000  0004f561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9894  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002874  00000000  00000000  000b98e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c80 	.word	0x08003c80

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003c80 	.word	0x08003c80

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cfrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	0008      	movs	r0, r1
 8000238:	4661      	mov	r1, ip
 800023a:	e7ff      	b.n	800023c <__aeabi_cfcmpeq>

0800023c <__aeabi_cfcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f000 f89f 	bl	8000380 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cfcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_fcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 f82b 	bl	80002a8 <__eqsf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_fcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f891 	bl	8000380 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_fcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f887 	bl	8000380 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_fcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f837 	bl	80002f4 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_fcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 f82d 	bl	80002f4 <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_fcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__eqsf2>:
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	0042      	lsls	r2, r0, #1
 80002ac:	0245      	lsls	r5, r0, #9
 80002ae:	024e      	lsls	r6, r1, #9
 80002b0:	004c      	lsls	r4, r1, #1
 80002b2:	0fc3      	lsrs	r3, r0, #31
 80002b4:	0a6d      	lsrs	r5, r5, #9
 80002b6:	2001      	movs	r0, #1
 80002b8:	0e12      	lsrs	r2, r2, #24
 80002ba:	0a76      	lsrs	r6, r6, #9
 80002bc:	0e24      	lsrs	r4, r4, #24
 80002be:	0fc9      	lsrs	r1, r1, #31
 80002c0:	2aff      	cmp	r2, #255	; 0xff
 80002c2:	d006      	beq.n	80002d2 <__eqsf2+0x2a>
 80002c4:	2cff      	cmp	r4, #255	; 0xff
 80002c6:	d003      	beq.n	80002d0 <__eqsf2+0x28>
 80002c8:	42a2      	cmp	r2, r4
 80002ca:	d101      	bne.n	80002d0 <__eqsf2+0x28>
 80002cc:	42b5      	cmp	r5, r6
 80002ce:	d006      	beq.n	80002de <__eqsf2+0x36>
 80002d0:	bd70      	pop	{r4, r5, r6, pc}
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d1fc      	bne.n	80002d0 <__eqsf2+0x28>
 80002d6:	2cff      	cmp	r4, #255	; 0xff
 80002d8:	d1fa      	bne.n	80002d0 <__eqsf2+0x28>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d1f8      	bne.n	80002d0 <__eqsf2+0x28>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d006      	beq.n	80002f0 <__eqsf2+0x48>
 80002e2:	2001      	movs	r0, #1
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	d1f3      	bne.n	80002d0 <__eqsf2+0x28>
 80002e8:	0028      	movs	r0, r5
 80002ea:	1e43      	subs	r3, r0, #1
 80002ec:	4198      	sbcs	r0, r3
 80002ee:	e7ef      	b.n	80002d0 <__eqsf2+0x28>
 80002f0:	2000      	movs	r0, #0
 80002f2:	e7ed      	b.n	80002d0 <__eqsf2+0x28>

080002f4 <__gesf2>:
 80002f4:	b570      	push	{r4, r5, r6, lr}
 80002f6:	0042      	lsls	r2, r0, #1
 80002f8:	0245      	lsls	r5, r0, #9
 80002fa:	024e      	lsls	r6, r1, #9
 80002fc:	004c      	lsls	r4, r1, #1
 80002fe:	0fc3      	lsrs	r3, r0, #31
 8000300:	0a6d      	lsrs	r5, r5, #9
 8000302:	0e12      	lsrs	r2, r2, #24
 8000304:	0a76      	lsrs	r6, r6, #9
 8000306:	0e24      	lsrs	r4, r4, #24
 8000308:	0fc8      	lsrs	r0, r1, #31
 800030a:	2aff      	cmp	r2, #255	; 0xff
 800030c:	d01b      	beq.n	8000346 <__gesf2+0x52>
 800030e:	2cff      	cmp	r4, #255	; 0xff
 8000310:	d00e      	beq.n	8000330 <__gesf2+0x3c>
 8000312:	2a00      	cmp	r2, #0
 8000314:	d11b      	bne.n	800034e <__gesf2+0x5a>
 8000316:	2c00      	cmp	r4, #0
 8000318:	d101      	bne.n	800031e <__gesf2+0x2a>
 800031a:	2e00      	cmp	r6, #0
 800031c:	d01c      	beq.n	8000358 <__gesf2+0x64>
 800031e:	2d00      	cmp	r5, #0
 8000320:	d00c      	beq.n	800033c <__gesf2+0x48>
 8000322:	4283      	cmp	r3, r0
 8000324:	d01c      	beq.n	8000360 <__gesf2+0x6c>
 8000326:	2102      	movs	r1, #2
 8000328:	1e58      	subs	r0, r3, #1
 800032a:	4008      	ands	r0, r1
 800032c:	3801      	subs	r0, #1
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	2e00      	cmp	r6, #0
 8000332:	d122      	bne.n	800037a <__gesf2+0x86>
 8000334:	2a00      	cmp	r2, #0
 8000336:	d1f4      	bne.n	8000322 <__gesf2+0x2e>
 8000338:	2d00      	cmp	r5, #0
 800033a:	d1f2      	bne.n	8000322 <__gesf2+0x2e>
 800033c:	2800      	cmp	r0, #0
 800033e:	d1f6      	bne.n	800032e <__gesf2+0x3a>
 8000340:	2001      	movs	r0, #1
 8000342:	4240      	negs	r0, r0
 8000344:	e7f3      	b.n	800032e <__gesf2+0x3a>
 8000346:	2d00      	cmp	r5, #0
 8000348:	d117      	bne.n	800037a <__gesf2+0x86>
 800034a:	2cff      	cmp	r4, #255	; 0xff
 800034c:	d0f0      	beq.n	8000330 <__gesf2+0x3c>
 800034e:	2c00      	cmp	r4, #0
 8000350:	d1e7      	bne.n	8000322 <__gesf2+0x2e>
 8000352:	2e00      	cmp	r6, #0
 8000354:	d1e5      	bne.n	8000322 <__gesf2+0x2e>
 8000356:	e7e6      	b.n	8000326 <__gesf2+0x32>
 8000358:	2000      	movs	r0, #0
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0e7      	beq.n	800032e <__gesf2+0x3a>
 800035e:	e7e2      	b.n	8000326 <__gesf2+0x32>
 8000360:	42a2      	cmp	r2, r4
 8000362:	dc05      	bgt.n	8000370 <__gesf2+0x7c>
 8000364:	dbea      	blt.n	800033c <__gesf2+0x48>
 8000366:	42b5      	cmp	r5, r6
 8000368:	d802      	bhi.n	8000370 <__gesf2+0x7c>
 800036a:	d3e7      	bcc.n	800033c <__gesf2+0x48>
 800036c:	2000      	movs	r0, #0
 800036e:	e7de      	b.n	800032e <__gesf2+0x3a>
 8000370:	4243      	negs	r3, r0
 8000372:	4158      	adcs	r0, r3
 8000374:	0040      	lsls	r0, r0, #1
 8000376:	3801      	subs	r0, #1
 8000378:	e7d9      	b.n	800032e <__gesf2+0x3a>
 800037a:	2002      	movs	r0, #2
 800037c:	4240      	negs	r0, r0
 800037e:	e7d6      	b.n	800032e <__gesf2+0x3a>

08000380 <__lesf2>:
 8000380:	b570      	push	{r4, r5, r6, lr}
 8000382:	0042      	lsls	r2, r0, #1
 8000384:	0245      	lsls	r5, r0, #9
 8000386:	024e      	lsls	r6, r1, #9
 8000388:	004c      	lsls	r4, r1, #1
 800038a:	0fc3      	lsrs	r3, r0, #31
 800038c:	0a6d      	lsrs	r5, r5, #9
 800038e:	0e12      	lsrs	r2, r2, #24
 8000390:	0a76      	lsrs	r6, r6, #9
 8000392:	0e24      	lsrs	r4, r4, #24
 8000394:	0fc8      	lsrs	r0, r1, #31
 8000396:	2aff      	cmp	r2, #255	; 0xff
 8000398:	d00b      	beq.n	80003b2 <__lesf2+0x32>
 800039a:	2cff      	cmp	r4, #255	; 0xff
 800039c:	d00d      	beq.n	80003ba <__lesf2+0x3a>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d11f      	bne.n	80003e2 <__lesf2+0x62>
 80003a2:	2c00      	cmp	r4, #0
 80003a4:	d116      	bne.n	80003d4 <__lesf2+0x54>
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d114      	bne.n	80003d4 <__lesf2+0x54>
 80003aa:	2000      	movs	r0, #0
 80003ac:	2d00      	cmp	r5, #0
 80003ae:	d010      	beq.n	80003d2 <__lesf2+0x52>
 80003b0:	e009      	b.n	80003c6 <__lesf2+0x46>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d10c      	bne.n	80003d0 <__lesf2+0x50>
 80003b6:	2cff      	cmp	r4, #255	; 0xff
 80003b8:	d113      	bne.n	80003e2 <__lesf2+0x62>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d108      	bne.n	80003d0 <__lesf2+0x50>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d008      	beq.n	80003d4 <__lesf2+0x54>
 80003c2:	4283      	cmp	r3, r0
 80003c4:	d012      	beq.n	80003ec <__lesf2+0x6c>
 80003c6:	2102      	movs	r1, #2
 80003c8:	1e58      	subs	r0, r3, #1
 80003ca:	4008      	ands	r0, r1
 80003cc:	3801      	subs	r0, #1
 80003ce:	e000      	b.n	80003d2 <__lesf2+0x52>
 80003d0:	2002      	movs	r0, #2
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d1f4      	bne.n	80003c2 <__lesf2+0x42>
 80003d8:	2800      	cmp	r0, #0
 80003da:	d1fa      	bne.n	80003d2 <__lesf2+0x52>
 80003dc:	2001      	movs	r0, #1
 80003de:	4240      	negs	r0, r0
 80003e0:	e7f7      	b.n	80003d2 <__lesf2+0x52>
 80003e2:	2c00      	cmp	r4, #0
 80003e4:	d1ed      	bne.n	80003c2 <__lesf2+0x42>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1eb      	bne.n	80003c2 <__lesf2+0x42>
 80003ea:	e7ec      	b.n	80003c6 <__lesf2+0x46>
 80003ec:	42a2      	cmp	r2, r4
 80003ee:	dc05      	bgt.n	80003fc <__lesf2+0x7c>
 80003f0:	dbf2      	blt.n	80003d8 <__lesf2+0x58>
 80003f2:	42b5      	cmp	r5, r6
 80003f4:	d802      	bhi.n	80003fc <__lesf2+0x7c>
 80003f6:	d3ef      	bcc.n	80003d8 <__lesf2+0x58>
 80003f8:	2000      	movs	r0, #0
 80003fa:	e7ea      	b.n	80003d2 <__lesf2+0x52>
 80003fc:	4243      	negs	r3, r0
 80003fe:	4158      	adcs	r0, r3
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	3801      	subs	r0, #1
 8000404:	e7e5      	b.n	80003d2 <__lesf2+0x52>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_fsub>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4647      	mov	r7, r8
 800040e:	0243      	lsls	r3, r0, #9
 8000410:	0a5b      	lsrs	r3, r3, #9
 8000412:	024e      	lsls	r6, r1, #9
 8000414:	00da      	lsls	r2, r3, #3
 8000416:	4694      	mov	ip, r2
 8000418:	0a72      	lsrs	r2, r6, #9
 800041a:	4691      	mov	r9, r2
 800041c:	0045      	lsls	r5, r0, #1
 800041e:	004a      	lsls	r2, r1, #1
 8000420:	b580      	push	{r7, lr}
 8000422:	0e2d      	lsrs	r5, r5, #24
 8000424:	001f      	movs	r7, r3
 8000426:	0fc4      	lsrs	r4, r0, #31
 8000428:	0e12      	lsrs	r2, r2, #24
 800042a:	0fc9      	lsrs	r1, r1, #31
 800042c:	09b6      	lsrs	r6, r6, #6
 800042e:	2aff      	cmp	r2, #255	; 0xff
 8000430:	d05b      	beq.n	80004ea <__aeabi_fsub+0xe2>
 8000432:	2001      	movs	r0, #1
 8000434:	4041      	eors	r1, r0
 8000436:	428c      	cmp	r4, r1
 8000438:	d039      	beq.n	80004ae <__aeabi_fsub+0xa6>
 800043a:	1aa8      	subs	r0, r5, r2
 800043c:	2800      	cmp	r0, #0
 800043e:	dd5a      	ble.n	80004f6 <__aeabi_fsub+0xee>
 8000440:	2a00      	cmp	r2, #0
 8000442:	d06a      	beq.n	800051a <__aeabi_fsub+0x112>
 8000444:	2dff      	cmp	r5, #255	; 0xff
 8000446:	d100      	bne.n	800044a <__aeabi_fsub+0x42>
 8000448:	e0d9      	b.n	80005fe <__aeabi_fsub+0x1f6>
 800044a:	2280      	movs	r2, #128	; 0x80
 800044c:	04d2      	lsls	r2, r2, #19
 800044e:	4316      	orrs	r6, r2
 8000450:	281b      	cmp	r0, #27
 8000452:	dc00      	bgt.n	8000456 <__aeabi_fsub+0x4e>
 8000454:	e0e9      	b.n	800062a <__aeabi_fsub+0x222>
 8000456:	2001      	movs	r0, #1
 8000458:	4663      	mov	r3, ip
 800045a:	1a18      	subs	r0, r3, r0
 800045c:	0143      	lsls	r3, r0, #5
 800045e:	d400      	bmi.n	8000462 <__aeabi_fsub+0x5a>
 8000460:	e0b4      	b.n	80005cc <__aeabi_fsub+0x1c4>
 8000462:	0180      	lsls	r0, r0, #6
 8000464:	0987      	lsrs	r7, r0, #6
 8000466:	0038      	movs	r0, r7
 8000468:	f000 f97c 	bl	8000764 <__clzsi2>
 800046c:	3805      	subs	r0, #5
 800046e:	4087      	lsls	r7, r0
 8000470:	4285      	cmp	r5, r0
 8000472:	dc00      	bgt.n	8000476 <__aeabi_fsub+0x6e>
 8000474:	e0cc      	b.n	8000610 <__aeabi_fsub+0x208>
 8000476:	1a2d      	subs	r5, r5, r0
 8000478:	48b5      	ldr	r0, [pc, #724]	; (8000750 <__aeabi_fsub+0x348>)
 800047a:	4038      	ands	r0, r7
 800047c:	0743      	lsls	r3, r0, #29
 800047e:	d004      	beq.n	800048a <__aeabi_fsub+0x82>
 8000480:	230f      	movs	r3, #15
 8000482:	4003      	ands	r3, r0
 8000484:	2b04      	cmp	r3, #4
 8000486:	d000      	beq.n	800048a <__aeabi_fsub+0x82>
 8000488:	3004      	adds	r0, #4
 800048a:	0143      	lsls	r3, r0, #5
 800048c:	d400      	bmi.n	8000490 <__aeabi_fsub+0x88>
 800048e:	e0a0      	b.n	80005d2 <__aeabi_fsub+0x1ca>
 8000490:	1c6a      	adds	r2, r5, #1
 8000492:	2dfe      	cmp	r5, #254	; 0xfe
 8000494:	d100      	bne.n	8000498 <__aeabi_fsub+0x90>
 8000496:	e08d      	b.n	80005b4 <__aeabi_fsub+0x1ac>
 8000498:	0180      	lsls	r0, r0, #6
 800049a:	0a47      	lsrs	r7, r0, #9
 800049c:	b2d2      	uxtb	r2, r2
 800049e:	05d0      	lsls	r0, r2, #23
 80004a0:	4338      	orrs	r0, r7
 80004a2:	07e4      	lsls	r4, r4, #31
 80004a4:	4320      	orrs	r0, r4
 80004a6:	bcc0      	pop	{r6, r7}
 80004a8:	46b9      	mov	r9, r7
 80004aa:	46b0      	mov	r8, r6
 80004ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004ae:	1aa8      	subs	r0, r5, r2
 80004b0:	4680      	mov	r8, r0
 80004b2:	2800      	cmp	r0, #0
 80004b4:	dd45      	ble.n	8000542 <__aeabi_fsub+0x13a>
 80004b6:	2a00      	cmp	r2, #0
 80004b8:	d070      	beq.n	800059c <__aeabi_fsub+0x194>
 80004ba:	2dff      	cmp	r5, #255	; 0xff
 80004bc:	d100      	bne.n	80004c0 <__aeabi_fsub+0xb8>
 80004be:	e09e      	b.n	80005fe <__aeabi_fsub+0x1f6>
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	04db      	lsls	r3, r3, #19
 80004c4:	431e      	orrs	r6, r3
 80004c6:	4643      	mov	r3, r8
 80004c8:	2b1b      	cmp	r3, #27
 80004ca:	dc00      	bgt.n	80004ce <__aeabi_fsub+0xc6>
 80004cc:	e0d2      	b.n	8000674 <__aeabi_fsub+0x26c>
 80004ce:	2001      	movs	r0, #1
 80004d0:	4460      	add	r0, ip
 80004d2:	0143      	lsls	r3, r0, #5
 80004d4:	d57a      	bpl.n	80005cc <__aeabi_fsub+0x1c4>
 80004d6:	3501      	adds	r5, #1
 80004d8:	2dff      	cmp	r5, #255	; 0xff
 80004da:	d06b      	beq.n	80005b4 <__aeabi_fsub+0x1ac>
 80004dc:	2301      	movs	r3, #1
 80004de:	4a9d      	ldr	r2, [pc, #628]	; (8000754 <__aeabi_fsub+0x34c>)
 80004e0:	4003      	ands	r3, r0
 80004e2:	0840      	lsrs	r0, r0, #1
 80004e4:	4010      	ands	r0, r2
 80004e6:	4318      	orrs	r0, r3
 80004e8:	e7c8      	b.n	800047c <__aeabi_fsub+0x74>
 80004ea:	2e00      	cmp	r6, #0
 80004ec:	d020      	beq.n	8000530 <__aeabi_fsub+0x128>
 80004ee:	428c      	cmp	r4, r1
 80004f0:	d023      	beq.n	800053a <__aeabi_fsub+0x132>
 80004f2:	0028      	movs	r0, r5
 80004f4:	38ff      	subs	r0, #255	; 0xff
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d039      	beq.n	800056e <__aeabi_fsub+0x166>
 80004fa:	1b57      	subs	r7, r2, r5
 80004fc:	2d00      	cmp	r5, #0
 80004fe:	d000      	beq.n	8000502 <__aeabi_fsub+0xfa>
 8000500:	e09d      	b.n	800063e <__aeabi_fsub+0x236>
 8000502:	4663      	mov	r3, ip
 8000504:	2b00      	cmp	r3, #0
 8000506:	d100      	bne.n	800050a <__aeabi_fsub+0x102>
 8000508:	e0db      	b.n	80006c2 <__aeabi_fsub+0x2ba>
 800050a:	1e7b      	subs	r3, r7, #1
 800050c:	2f01      	cmp	r7, #1
 800050e:	d100      	bne.n	8000512 <__aeabi_fsub+0x10a>
 8000510:	e10d      	b.n	800072e <__aeabi_fsub+0x326>
 8000512:	2fff      	cmp	r7, #255	; 0xff
 8000514:	d071      	beq.n	80005fa <__aeabi_fsub+0x1f2>
 8000516:	001f      	movs	r7, r3
 8000518:	e098      	b.n	800064c <__aeabi_fsub+0x244>
 800051a:	2e00      	cmp	r6, #0
 800051c:	d100      	bne.n	8000520 <__aeabi_fsub+0x118>
 800051e:	e0a7      	b.n	8000670 <__aeabi_fsub+0x268>
 8000520:	1e42      	subs	r2, r0, #1
 8000522:	2801      	cmp	r0, #1
 8000524:	d100      	bne.n	8000528 <__aeabi_fsub+0x120>
 8000526:	e0e6      	b.n	80006f6 <__aeabi_fsub+0x2ee>
 8000528:	28ff      	cmp	r0, #255	; 0xff
 800052a:	d068      	beq.n	80005fe <__aeabi_fsub+0x1f6>
 800052c:	0010      	movs	r0, r2
 800052e:	e78f      	b.n	8000450 <__aeabi_fsub+0x48>
 8000530:	2001      	movs	r0, #1
 8000532:	4041      	eors	r1, r0
 8000534:	42a1      	cmp	r1, r4
 8000536:	d000      	beq.n	800053a <__aeabi_fsub+0x132>
 8000538:	e77f      	b.n	800043a <__aeabi_fsub+0x32>
 800053a:	20ff      	movs	r0, #255	; 0xff
 800053c:	4240      	negs	r0, r0
 800053e:	4680      	mov	r8, r0
 8000540:	44a8      	add	r8, r5
 8000542:	4640      	mov	r0, r8
 8000544:	2800      	cmp	r0, #0
 8000546:	d038      	beq.n	80005ba <__aeabi_fsub+0x1b2>
 8000548:	1b51      	subs	r1, r2, r5
 800054a:	2d00      	cmp	r5, #0
 800054c:	d100      	bne.n	8000550 <__aeabi_fsub+0x148>
 800054e:	e0ae      	b.n	80006ae <__aeabi_fsub+0x2a6>
 8000550:	2aff      	cmp	r2, #255	; 0xff
 8000552:	d100      	bne.n	8000556 <__aeabi_fsub+0x14e>
 8000554:	e0df      	b.n	8000716 <__aeabi_fsub+0x30e>
 8000556:	2380      	movs	r3, #128	; 0x80
 8000558:	4660      	mov	r0, ip
 800055a:	04db      	lsls	r3, r3, #19
 800055c:	4318      	orrs	r0, r3
 800055e:	4684      	mov	ip, r0
 8000560:	291b      	cmp	r1, #27
 8000562:	dc00      	bgt.n	8000566 <__aeabi_fsub+0x15e>
 8000564:	e0d9      	b.n	800071a <__aeabi_fsub+0x312>
 8000566:	2001      	movs	r0, #1
 8000568:	0015      	movs	r5, r2
 800056a:	1980      	adds	r0, r0, r6
 800056c:	e7b1      	b.n	80004d2 <__aeabi_fsub+0xca>
 800056e:	20fe      	movs	r0, #254	; 0xfe
 8000570:	1c6a      	adds	r2, r5, #1
 8000572:	4210      	tst	r0, r2
 8000574:	d171      	bne.n	800065a <__aeabi_fsub+0x252>
 8000576:	2d00      	cmp	r5, #0
 8000578:	d000      	beq.n	800057c <__aeabi_fsub+0x174>
 800057a:	e0a6      	b.n	80006ca <__aeabi_fsub+0x2c2>
 800057c:	4663      	mov	r3, ip
 800057e:	2b00      	cmp	r3, #0
 8000580:	d100      	bne.n	8000584 <__aeabi_fsub+0x17c>
 8000582:	e0d9      	b.n	8000738 <__aeabi_fsub+0x330>
 8000584:	2200      	movs	r2, #0
 8000586:	2e00      	cmp	r6, #0
 8000588:	d100      	bne.n	800058c <__aeabi_fsub+0x184>
 800058a:	e788      	b.n	800049e <__aeabi_fsub+0x96>
 800058c:	1b98      	subs	r0, r3, r6
 800058e:	0143      	lsls	r3, r0, #5
 8000590:	d400      	bmi.n	8000594 <__aeabi_fsub+0x18c>
 8000592:	e0e1      	b.n	8000758 <__aeabi_fsub+0x350>
 8000594:	4663      	mov	r3, ip
 8000596:	000c      	movs	r4, r1
 8000598:	1af0      	subs	r0, r6, r3
 800059a:	e76f      	b.n	800047c <__aeabi_fsub+0x74>
 800059c:	2e00      	cmp	r6, #0
 800059e:	d100      	bne.n	80005a2 <__aeabi_fsub+0x19a>
 80005a0:	e0b7      	b.n	8000712 <__aeabi_fsub+0x30a>
 80005a2:	0002      	movs	r2, r0
 80005a4:	3a01      	subs	r2, #1
 80005a6:	2801      	cmp	r0, #1
 80005a8:	d100      	bne.n	80005ac <__aeabi_fsub+0x1a4>
 80005aa:	e09c      	b.n	80006e6 <__aeabi_fsub+0x2de>
 80005ac:	28ff      	cmp	r0, #255	; 0xff
 80005ae:	d026      	beq.n	80005fe <__aeabi_fsub+0x1f6>
 80005b0:	4690      	mov	r8, r2
 80005b2:	e788      	b.n	80004c6 <__aeabi_fsub+0xbe>
 80005b4:	22ff      	movs	r2, #255	; 0xff
 80005b6:	2700      	movs	r7, #0
 80005b8:	e771      	b.n	800049e <__aeabi_fsub+0x96>
 80005ba:	20fe      	movs	r0, #254	; 0xfe
 80005bc:	1c6a      	adds	r2, r5, #1
 80005be:	4210      	tst	r0, r2
 80005c0:	d064      	beq.n	800068c <__aeabi_fsub+0x284>
 80005c2:	2aff      	cmp	r2, #255	; 0xff
 80005c4:	d0f6      	beq.n	80005b4 <__aeabi_fsub+0x1ac>
 80005c6:	0015      	movs	r5, r2
 80005c8:	4466      	add	r6, ip
 80005ca:	0870      	lsrs	r0, r6, #1
 80005cc:	0743      	lsls	r3, r0, #29
 80005ce:	d000      	beq.n	80005d2 <__aeabi_fsub+0x1ca>
 80005d0:	e756      	b.n	8000480 <__aeabi_fsub+0x78>
 80005d2:	08c3      	lsrs	r3, r0, #3
 80005d4:	2dff      	cmp	r5, #255	; 0xff
 80005d6:	d012      	beq.n	80005fe <__aeabi_fsub+0x1f6>
 80005d8:	025b      	lsls	r3, r3, #9
 80005da:	0a5f      	lsrs	r7, r3, #9
 80005dc:	b2ea      	uxtb	r2, r5
 80005de:	e75e      	b.n	800049e <__aeabi_fsub+0x96>
 80005e0:	4662      	mov	r2, ip
 80005e2:	2a00      	cmp	r2, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fsub+0x1e0>
 80005e6:	e096      	b.n	8000716 <__aeabi_fsub+0x30e>
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d008      	beq.n	80005fe <__aeabi_fsub+0x1f6>
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	03d2      	lsls	r2, r2, #15
 80005f0:	4213      	tst	r3, r2
 80005f2:	d004      	beq.n	80005fe <__aeabi_fsub+0x1f6>
 80005f4:	4648      	mov	r0, r9
 80005f6:	4210      	tst	r0, r2
 80005f8:	d101      	bne.n	80005fe <__aeabi_fsub+0x1f6>
 80005fa:	000c      	movs	r4, r1
 80005fc:	464b      	mov	r3, r9
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0d8      	beq.n	80005b4 <__aeabi_fsub+0x1ac>
 8000602:	2780      	movs	r7, #128	; 0x80
 8000604:	03ff      	lsls	r7, r7, #15
 8000606:	431f      	orrs	r7, r3
 8000608:	027f      	lsls	r7, r7, #9
 800060a:	22ff      	movs	r2, #255	; 0xff
 800060c:	0a7f      	lsrs	r7, r7, #9
 800060e:	e746      	b.n	800049e <__aeabi_fsub+0x96>
 8000610:	2320      	movs	r3, #32
 8000612:	003a      	movs	r2, r7
 8000614:	1b45      	subs	r5, r0, r5
 8000616:	0038      	movs	r0, r7
 8000618:	3501      	adds	r5, #1
 800061a:	40ea      	lsrs	r2, r5
 800061c:	1b5d      	subs	r5, r3, r5
 800061e:	40a8      	lsls	r0, r5
 8000620:	1e43      	subs	r3, r0, #1
 8000622:	4198      	sbcs	r0, r3
 8000624:	2500      	movs	r5, #0
 8000626:	4310      	orrs	r0, r2
 8000628:	e728      	b.n	800047c <__aeabi_fsub+0x74>
 800062a:	2320      	movs	r3, #32
 800062c:	1a1b      	subs	r3, r3, r0
 800062e:	0032      	movs	r2, r6
 8000630:	409e      	lsls	r6, r3
 8000632:	40c2      	lsrs	r2, r0
 8000634:	0030      	movs	r0, r6
 8000636:	1e43      	subs	r3, r0, #1
 8000638:	4198      	sbcs	r0, r3
 800063a:	4310      	orrs	r0, r2
 800063c:	e70c      	b.n	8000458 <__aeabi_fsub+0x50>
 800063e:	2aff      	cmp	r2, #255	; 0xff
 8000640:	d0db      	beq.n	80005fa <__aeabi_fsub+0x1f2>
 8000642:	2380      	movs	r3, #128	; 0x80
 8000644:	4660      	mov	r0, ip
 8000646:	04db      	lsls	r3, r3, #19
 8000648:	4318      	orrs	r0, r3
 800064a:	4684      	mov	ip, r0
 800064c:	2f1b      	cmp	r7, #27
 800064e:	dd56      	ble.n	80006fe <__aeabi_fsub+0x2f6>
 8000650:	2001      	movs	r0, #1
 8000652:	000c      	movs	r4, r1
 8000654:	0015      	movs	r5, r2
 8000656:	1a30      	subs	r0, r6, r0
 8000658:	e700      	b.n	800045c <__aeabi_fsub+0x54>
 800065a:	4663      	mov	r3, ip
 800065c:	1b9f      	subs	r7, r3, r6
 800065e:	017b      	lsls	r3, r7, #5
 8000660:	d43d      	bmi.n	80006de <__aeabi_fsub+0x2d6>
 8000662:	2f00      	cmp	r7, #0
 8000664:	d000      	beq.n	8000668 <__aeabi_fsub+0x260>
 8000666:	e6fe      	b.n	8000466 <__aeabi_fsub+0x5e>
 8000668:	2400      	movs	r4, #0
 800066a:	2200      	movs	r2, #0
 800066c:	2700      	movs	r7, #0
 800066e:	e716      	b.n	800049e <__aeabi_fsub+0x96>
 8000670:	0005      	movs	r5, r0
 8000672:	e7af      	b.n	80005d4 <__aeabi_fsub+0x1cc>
 8000674:	0032      	movs	r2, r6
 8000676:	4643      	mov	r3, r8
 8000678:	4641      	mov	r1, r8
 800067a:	40da      	lsrs	r2, r3
 800067c:	2320      	movs	r3, #32
 800067e:	1a5b      	subs	r3, r3, r1
 8000680:	409e      	lsls	r6, r3
 8000682:	0030      	movs	r0, r6
 8000684:	1e43      	subs	r3, r0, #1
 8000686:	4198      	sbcs	r0, r3
 8000688:	4310      	orrs	r0, r2
 800068a:	e721      	b.n	80004d0 <__aeabi_fsub+0xc8>
 800068c:	2d00      	cmp	r5, #0
 800068e:	d1a7      	bne.n	80005e0 <__aeabi_fsub+0x1d8>
 8000690:	4663      	mov	r3, ip
 8000692:	2b00      	cmp	r3, #0
 8000694:	d059      	beq.n	800074a <__aeabi_fsub+0x342>
 8000696:	2200      	movs	r2, #0
 8000698:	2e00      	cmp	r6, #0
 800069a:	d100      	bne.n	800069e <__aeabi_fsub+0x296>
 800069c:	e6ff      	b.n	800049e <__aeabi_fsub+0x96>
 800069e:	0030      	movs	r0, r6
 80006a0:	4460      	add	r0, ip
 80006a2:	0143      	lsls	r3, r0, #5
 80006a4:	d592      	bpl.n	80005cc <__aeabi_fsub+0x1c4>
 80006a6:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <__aeabi_fsub+0x348>)
 80006a8:	3501      	adds	r5, #1
 80006aa:	4018      	ands	r0, r3
 80006ac:	e78e      	b.n	80005cc <__aeabi_fsub+0x1c4>
 80006ae:	4663      	mov	r3, ip
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d047      	beq.n	8000744 <__aeabi_fsub+0x33c>
 80006b4:	1e4b      	subs	r3, r1, #1
 80006b6:	2901      	cmp	r1, #1
 80006b8:	d015      	beq.n	80006e6 <__aeabi_fsub+0x2de>
 80006ba:	29ff      	cmp	r1, #255	; 0xff
 80006bc:	d02b      	beq.n	8000716 <__aeabi_fsub+0x30e>
 80006be:	0019      	movs	r1, r3
 80006c0:	e74e      	b.n	8000560 <__aeabi_fsub+0x158>
 80006c2:	000c      	movs	r4, r1
 80006c4:	464b      	mov	r3, r9
 80006c6:	003d      	movs	r5, r7
 80006c8:	e784      	b.n	80005d4 <__aeabi_fsub+0x1cc>
 80006ca:	4662      	mov	r2, ip
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	d18b      	bne.n	80005e8 <__aeabi_fsub+0x1e0>
 80006d0:	2e00      	cmp	r6, #0
 80006d2:	d192      	bne.n	80005fa <__aeabi_fsub+0x1f2>
 80006d4:	2780      	movs	r7, #128	; 0x80
 80006d6:	2400      	movs	r4, #0
 80006d8:	22ff      	movs	r2, #255	; 0xff
 80006da:	03ff      	lsls	r7, r7, #15
 80006dc:	e6df      	b.n	800049e <__aeabi_fsub+0x96>
 80006de:	4663      	mov	r3, ip
 80006e0:	000c      	movs	r4, r1
 80006e2:	1af7      	subs	r7, r6, r3
 80006e4:	e6bf      	b.n	8000466 <__aeabi_fsub+0x5e>
 80006e6:	0030      	movs	r0, r6
 80006e8:	4460      	add	r0, ip
 80006ea:	2501      	movs	r5, #1
 80006ec:	0143      	lsls	r3, r0, #5
 80006ee:	d400      	bmi.n	80006f2 <__aeabi_fsub+0x2ea>
 80006f0:	e76c      	b.n	80005cc <__aeabi_fsub+0x1c4>
 80006f2:	2502      	movs	r5, #2
 80006f4:	e6f2      	b.n	80004dc <__aeabi_fsub+0xd4>
 80006f6:	4663      	mov	r3, ip
 80006f8:	2501      	movs	r5, #1
 80006fa:	1b98      	subs	r0, r3, r6
 80006fc:	e6ae      	b.n	800045c <__aeabi_fsub+0x54>
 80006fe:	2320      	movs	r3, #32
 8000700:	4664      	mov	r4, ip
 8000702:	4660      	mov	r0, ip
 8000704:	40fc      	lsrs	r4, r7
 8000706:	1bdf      	subs	r7, r3, r7
 8000708:	40b8      	lsls	r0, r7
 800070a:	1e43      	subs	r3, r0, #1
 800070c:	4198      	sbcs	r0, r3
 800070e:	4320      	orrs	r0, r4
 8000710:	e79f      	b.n	8000652 <__aeabi_fsub+0x24a>
 8000712:	0005      	movs	r5, r0
 8000714:	e75e      	b.n	80005d4 <__aeabi_fsub+0x1cc>
 8000716:	464b      	mov	r3, r9
 8000718:	e771      	b.n	80005fe <__aeabi_fsub+0x1f6>
 800071a:	2320      	movs	r3, #32
 800071c:	4665      	mov	r5, ip
 800071e:	4660      	mov	r0, ip
 8000720:	40cd      	lsrs	r5, r1
 8000722:	1a59      	subs	r1, r3, r1
 8000724:	4088      	lsls	r0, r1
 8000726:	1e43      	subs	r3, r0, #1
 8000728:	4198      	sbcs	r0, r3
 800072a:	4328      	orrs	r0, r5
 800072c:	e71c      	b.n	8000568 <__aeabi_fsub+0x160>
 800072e:	4663      	mov	r3, ip
 8000730:	000c      	movs	r4, r1
 8000732:	2501      	movs	r5, #1
 8000734:	1af0      	subs	r0, r6, r3
 8000736:	e691      	b.n	800045c <__aeabi_fsub+0x54>
 8000738:	2e00      	cmp	r6, #0
 800073a:	d095      	beq.n	8000668 <__aeabi_fsub+0x260>
 800073c:	000c      	movs	r4, r1
 800073e:	464f      	mov	r7, r9
 8000740:	2200      	movs	r2, #0
 8000742:	e6ac      	b.n	800049e <__aeabi_fsub+0x96>
 8000744:	464b      	mov	r3, r9
 8000746:	000d      	movs	r5, r1
 8000748:	e744      	b.n	80005d4 <__aeabi_fsub+0x1cc>
 800074a:	464f      	mov	r7, r9
 800074c:	2200      	movs	r2, #0
 800074e:	e6a6      	b.n	800049e <__aeabi_fsub+0x96>
 8000750:	fbffffff 	.word	0xfbffffff
 8000754:	7dffffff 	.word	0x7dffffff
 8000758:	2800      	cmp	r0, #0
 800075a:	d000      	beq.n	800075e <__aeabi_fsub+0x356>
 800075c:	e736      	b.n	80005cc <__aeabi_fsub+0x1c4>
 800075e:	2400      	movs	r4, #0
 8000760:	2700      	movs	r7, #0
 8000762:	e69c      	b.n	800049e <__aeabi_fsub+0x96>

08000764 <__clzsi2>:
 8000764:	211c      	movs	r1, #28
 8000766:	2301      	movs	r3, #1
 8000768:	041b      	lsls	r3, r3, #16
 800076a:	4298      	cmp	r0, r3
 800076c:	d301      	bcc.n	8000772 <__clzsi2+0xe>
 800076e:	0c00      	lsrs	r0, r0, #16
 8000770:	3910      	subs	r1, #16
 8000772:	0a1b      	lsrs	r3, r3, #8
 8000774:	4298      	cmp	r0, r3
 8000776:	d301      	bcc.n	800077c <__clzsi2+0x18>
 8000778:	0a00      	lsrs	r0, r0, #8
 800077a:	3908      	subs	r1, #8
 800077c:	091b      	lsrs	r3, r3, #4
 800077e:	4298      	cmp	r0, r3
 8000780:	d301      	bcc.n	8000786 <__clzsi2+0x22>
 8000782:	0900      	lsrs	r0, r0, #4
 8000784:	3904      	subs	r1, #4
 8000786:	a202      	add	r2, pc, #8	; (adr r2, 8000790 <__clzsi2+0x2c>)
 8000788:	5c10      	ldrb	r0, [r2, r0]
 800078a:	1840      	adds	r0, r0, r1
 800078c:	4770      	bx	lr
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	02020304 	.word	0x02020304
 8000794:	01010101 	.word	0x01010101
	...

080007a0 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a4:	f000 fb4c 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a8:	f000 f82a 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ac:	f000 f918 	bl	80009e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007b0:	f000 f888 	bl	80008c4 <MX_I2C1_Init>
  MX_DMA_Init();
 80007b4:	f000 f8f6 	bl	80009a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007b8:	f000 f8c4 	bl	8000944 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */
	//TO DO:
	//TASK 1
	//First run this with nothing else in the loop and scope pin PC8 on an oscilloscope
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <main+0x50>)
 80007c2:	0019      	movs	r1, r3
 80007c4:	0010      	movs	r0, r2
 80007c6:	f000 ff8e 	bl	80016e6 <HAL_GPIO_TogglePin>
	pause_sec(1);
 80007ca:	23fe      	movs	r3, #254	; 0xfe
 80007cc:	059b      	lsls	r3, r3, #22
 80007ce:	1c18      	adds	r0, r3, #0
 80007d0:	f000 f97e 	bl	8000ad0 <pause_sec>
//	bcdToDec(0b0001);

	//TO DO:
	//TASK 6

	sprintf(buffer, "helloooo %d \n \r", 42);
 80007d4:	4907      	ldr	r1, [pc, #28]	; (80007f4 <main+0x54>)
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <main+0x58>)
 80007d8:	222a      	movs	r2, #42	; 0x2a
 80007da:	0018      	movs	r0, r3
 80007dc:	f002 fde6 	bl	80033ac <siprintf>
	//This creates a string "55555555555555" with a pointer called buffer

	//Transmit data via UART
	//Blocking! fine for small buffers
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 80007e0:	23fa      	movs	r3, #250	; 0xfa
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4904      	ldr	r1, [pc, #16]	; (80007f8 <main+0x58>)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <main+0x5c>)
 80007e8:	220e      	movs	r2, #14
 80007ea:	f001 fe63 	bl	80024b4 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 80007ee:	e7e5      	b.n	80007bc <main+0x1c>
 80007f0:	48000800 	.word	0x48000800
 80007f4:	08003c98 	.word	0x08003c98
 80007f8:	200001a0 	.word	0x200001a0
 80007fc:	200000d8 	.word	0x200000d8

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b097      	sub	sp, #92	; 0x5c
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	2428      	movs	r4, #40	; 0x28
 8000808:	193b      	adds	r3, r7, r4
 800080a:	0018      	movs	r0, r3
 800080c:	2330      	movs	r3, #48	; 0x30
 800080e:	001a      	movs	r2, r3
 8000810:	2100      	movs	r1, #0
 8000812:	f002 fdc3 	bl	800339c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000816:	2318      	movs	r3, #24
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	0018      	movs	r0, r3
 800081c:	2310      	movs	r3, #16
 800081e:	001a      	movs	r2, r3
 8000820:	2100      	movs	r1, #0
 8000822:	f002 fdbb 	bl	800339c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	0018      	movs	r0, r3
 800082a:	2314      	movs	r3, #20
 800082c:	001a      	movs	r2, r3
 800082e:	2100      	movs	r1, #0
 8000830:	f002 fdb4 	bl	800339c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000834:	0021      	movs	r1, r4
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2202      	movs	r2, #2
 800083a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2201      	movs	r2, #1
 8000840:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2210      	movs	r2, #16
 8000846:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2202      	movs	r2, #2
 800084c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	22a0      	movs	r2, #160	; 0xa0
 8000858:	0392      	lsls	r2, r2, #14
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2200      	movs	r2, #0
 8000860:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	187b      	adds	r3, r7, r1
 8000864:	0018      	movs	r0, r3
 8000866:	f001 f887 	bl	8001978 <HAL_RCC_OscConfig>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800086e:	f000 f95c 	bl	8000b2a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	2118      	movs	r1, #24
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2207      	movs	r2, #7
 8000878:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2202      	movs	r2, #2
 800087e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2101      	movs	r1, #1
 8000890:	0018      	movs	r0, r3
 8000892:	f001 fb8b 	bl	8001fac <HAL_RCC_ClockConfig>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800089a:	f000 f946 	bl	8000b2a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2220      	movs	r2, #32
 80008a2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 fccf 	bl	8002250 <HAL_RCCEx_PeriphCLKConfig>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008b6:	f000 f938 	bl	8000b2a <Error_Handler>
  }
}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b017      	add	sp, #92	; 0x5c
 80008c0:	bd90      	pop	{r4, r7, pc}
	...

080008c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_I2C1_Init+0x74>)
 80008ca:	4a1c      	ldr	r2, [pc, #112]	; (800093c <MX_I2C1_Init+0x78>)
 80008cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <MX_I2C1_Init+0x74>)
 80008d0:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <MX_I2C1_Init+0x7c>)
 80008d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_I2C1_Init+0x74>)
 80008dc:	2201      	movs	r2, #1
 80008de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_I2C1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_I2C1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_I2C1_Init+0x74>)
 8000900:	0018      	movs	r0, r3
 8000902:	f000 ff0b 	bl	800171c <HAL_I2C_Init>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800090a:	f000 f90e 	bl	8000b2a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MX_I2C1_Init+0x74>)
 8000910:	2100      	movs	r1, #0
 8000912:	0018      	movs	r0, r3
 8000914:	f000 ff98 	bl	8001848 <HAL_I2CEx_ConfigAnalogFilter>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800091c:	f000 f905 	bl	8000b2a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <MX_I2C1_Init+0x74>)
 8000922:	2100      	movs	r1, #0
 8000924:	0018      	movs	r0, r3
 8000926:	f000 ffdb 	bl	80018e0 <HAL_I2CEx_ConfigDigitalFilter>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800092e:	f000 f8fc 	bl	8000b2a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000008c 	.word	0x2000008c
 800093c:	40005400 	.word	0x40005400
 8000940:	2000090e 	.word	0x2000090e

08000944 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_USART2_UART_Init+0x58>)
 800094a:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <MX_USART2_UART_Init+0x5c>)
 800094c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_USART2_UART_Init+0x58>)
 8000950:	2296      	movs	r2, #150	; 0x96
 8000952:	0192      	lsls	r2, r2, #6
 8000954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_USART2_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_USART2_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_USART2_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_USART2_UART_Init+0x58>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_USART2_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_USART2_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_USART2_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_USART2_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <MX_USART2_UART_Init+0x58>)
 8000988:	0018      	movs	r0, r3
 800098a:	f001 fd3f 	bl	800240c <HAL_UART_Init>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d001      	beq.n	8000996 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000992:	f000 f8ca 	bl	8000b2a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200000d8 	.word	0x200000d8
 80009a0:	40004400 	.word	0x40004400

080009a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_DMA_Init+0x38>)
 80009ac:	695a      	ldr	r2, [r3, #20]
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_DMA_Init+0x38>)
 80009b0:	2101      	movs	r1, #1
 80009b2:	430a      	orrs	r2, r1
 80009b4:	615a      	str	r2, [r3, #20]
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_DMA_Init+0x38>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	2201      	movs	r2, #1
 80009bc:	4013      	ands	r3, r2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	200b      	movs	r0, #11
 80009c8:	f000 fb4a 	bl	8001060 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80009cc:	200b      	movs	r0, #11
 80009ce:	f000 fb5c 	bl	800108a <HAL_NVIC_EnableIRQ>

}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40021000 	.word	0x40021000

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b08b      	sub	sp, #44	; 0x2c
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	2414      	movs	r4, #20
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	0018      	movs	r0, r3
 80009ec:	2314      	movs	r3, #20
 80009ee:	001a      	movs	r2, r3
 80009f0:	2100      	movs	r1, #0
 80009f2:	f002 fcd3 	bl	800339c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009f6:	4b34      	ldr	r3, [pc, #208]	; (8000ac8 <MX_GPIO_Init+0xe8>)
 80009f8:	695a      	ldr	r2, [r3, #20]
 80009fa:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <MX_GPIO_Init+0xe8>)
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	03c9      	lsls	r1, r1, #15
 8000a00:	430a      	orrs	r2, r1
 8000a02:	615a      	str	r2, [r3, #20]
 8000a04:	4b30      	ldr	r3, [pc, #192]	; (8000ac8 <MX_GPIO_Init+0xe8>)
 8000a06:	695a      	ldr	r2, [r3, #20]
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	03db      	lsls	r3, r3, #15
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <MX_GPIO_Init+0xe8>)
 8000a14:	695a      	ldr	r2, [r3, #20]
 8000a16:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <MX_GPIO_Init+0xe8>)
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	0289      	lsls	r1, r1, #10
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <MX_GPIO_Init+0xe8>)
 8000a22:	695a      	ldr	r2, [r3, #20]
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	029b      	lsls	r3, r3, #10
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <MX_GPIO_Init+0xe8>)
 8000a30:	695a      	ldr	r2, [r3, #20]
 8000a32:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <MX_GPIO_Init+0xe8>)
 8000a34:	2180      	movs	r1, #128	; 0x80
 8000a36:	0309      	lsls	r1, r1, #12
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	615a      	str	r2, [r3, #20]
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <MX_GPIO_Init+0xe8>)
 8000a3e:	695a      	ldr	r2, [r3, #20]
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	031b      	lsls	r3, r3, #12
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_GPIO_Init+0xe8>)
 8000a4c:	695a      	ldr	r2, [r3, #20]
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_GPIO_Init+0xe8>)
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	02c9      	lsls	r1, r1, #11
 8000a54:	430a      	orrs	r2, r1
 8000a56:	615a      	str	r2, [r3, #20]
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_GPIO_Init+0xe8>)
 8000a5a:	695a      	ldr	r2, [r3, #20]
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	02db      	lsls	r3, r3, #11
 8000a60:	4013      	ands	r3, r2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a66:	23c0      	movs	r3, #192	; 0xc0
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4818      	ldr	r0, [pc, #96]	; (8000acc <MX_GPIO_Init+0xec>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0019      	movs	r1, r3
 8000a70:	f000 fe1c 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2201      	movs	r2, #1
 8000a78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	2290      	movs	r2, #144	; 0x90
 8000a7e:	0352      	lsls	r2, r2, #13
 8000a80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a88:	193a      	adds	r2, r7, r4
 8000a8a:	2390      	movs	r3, #144	; 0x90
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 fc9b 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000a96:	0021      	movs	r1, r4
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	22c0      	movs	r2, #192	; 0xc0
 8000a9c:	0092      	lsls	r2, r2, #2
 8000a9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	4a05      	ldr	r2, [pc, #20]	; (8000acc <MX_GPIO_Init+0xec>)
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	0010      	movs	r0, r2
 8000aba:	f000 fc87 	bl	80013cc <HAL_GPIO_Init>

}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b00b      	add	sp, #44	; 0x2c
 8000ac4:	bd90      	pop	{r4, r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48000800 	.word	0x48000800

08000ad0 <pause_sec>:

///* USER CODE BEGIN 4 */
void pause_sec(float x)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	/* Delay program execution for x seconds */
	//TO DO:
	//TASK 2
	//Make sure you've defined DELAY1 and DELAY2 in the private define section
	while (x > 0) {
 8000ad8:	e01c      	b.n	8000b14 <pause_sec+0x44>
		for (int i = 1; i < DELAY1; ++i) {
 8000ada:	2301      	movs	r3, #1
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	e00d      	b.n	8000afc <pause_sec+0x2c>
				for (int j = 1; j < DELAY2; ++j) {
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	e002      	b.n	8000aec <pause_sec+0x1c>
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68ba      	ldr	r2, [r7, #8]
 8000aee:	23fa      	movs	r3, #250	; 0xfa
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	429a      	cmp	r2, r3
 8000af4:	dbf7      	blt.n	8000ae6 <pause_sec+0x16>
		for (int i = 1; i < DELAY1; ++i) {
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	3301      	adds	r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	23c8      	movs	r3, #200	; 0xc8
 8000b00:	011b      	lsls	r3, r3, #4
 8000b02:	429a      	cmp	r2, r3
 8000b04:	dbec      	blt.n	8000ae0 <pause_sec+0x10>
				}
			}
		x--;
 8000b06:	21fe      	movs	r1, #254	; 0xfe
 8000b08:	0589      	lsls	r1, r1, #22
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff fc7c 	bl	8000408 <__aeabi_fsub>
 8000b10:	1c03      	adds	r3, r0, #0
 8000b12:	607b      	str	r3, [r7, #4]
	while (x > 0) {
 8000b14:	2100      	movs	r1, #0
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fbb2 	bl	8000280 <__aeabi_fcmpgt>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d1dc      	bne.n	8000ada <pause_sec+0xa>
	}

}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b004      	add	sp, #16
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2e:	b672      	cpsid	i
}
 8000b30:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <Error_Handler+0x8>

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_MspInit+0x44>)
 8000b3c:	699a      	ldr	r2, [r3, #24]
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_MspInit+0x44>)
 8000b40:	2101      	movs	r1, #1
 8000b42:	430a      	orrs	r2, r1
 8000b44:	619a      	str	r2, [r3, #24]
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_MspInit+0x44>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_MspInit+0x44>)
 8000b54:	69da      	ldr	r2, [r3, #28]
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_MspInit+0x44>)
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	0549      	lsls	r1, r1, #21
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	61da      	str	r2, [r3, #28]
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_MspInit+0x44>)
 8000b62:	69da      	ldr	r2, [r3, #28]
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	055b      	lsls	r3, r3, #21
 8000b68:	4013      	ands	r3, r2
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b08b      	sub	sp, #44	; 0x2c
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	2414      	movs	r4, #20
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	0018      	movs	r0, r3
 8000b8a:	2314      	movs	r3, #20
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f002 fc04 	bl	800339c <memset>
  if(hi2c->Instance==I2C1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <HAL_I2C_MspInit+0x90>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d131      	bne.n	8000c02 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <HAL_I2C_MspInit+0x94>)
 8000ba0:	695a      	ldr	r2, [r3, #20]
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <HAL_I2C_MspInit+0x94>)
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	02c9      	lsls	r1, r1, #11
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	615a      	str	r2, [r3, #20]
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_I2C_MspInit+0x94>)
 8000bae:	695a      	ldr	r2, [r3, #20]
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	02db      	lsls	r3, r3, #11
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bba:	0021      	movs	r1, r4
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	22c0      	movs	r2, #192	; 0xc0
 8000bc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2212      	movs	r2, #18
 8000bc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <HAL_I2C_MspInit+0x98>)
 8000bde:	0019      	movs	r1, r3
 8000be0:	0010      	movs	r0, r2
 8000be2:	f000 fbf3 	bl	80013cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_I2C_MspInit+0x94>)
 8000be8:	69da      	ldr	r2, [r3, #28]
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_I2C_MspInit+0x94>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	0389      	lsls	r1, r1, #14
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	61da      	str	r2, [r3, #28]
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_I2C_MspInit+0x94>)
 8000bf6:	69da      	ldr	r2, [r3, #28]
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	039b      	lsls	r3, r3, #14
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b00b      	add	sp, #44	; 0x2c
 8000c08:	bd90      	pop	{r4, r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	40021000 	.word	0x40021000
 8000c14:	48000400 	.word	0x48000400

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b08b      	sub	sp, #44	; 0x2c
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	2414      	movs	r4, #20
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	0018      	movs	r0, r3
 8000c26:	2314      	movs	r3, #20
 8000c28:	001a      	movs	r2, r3
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	f002 fbb6 	bl	800339c <memset>
  if(huart->Instance==USART2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a33      	ldr	r2, [pc, #204]	; (8000d04 <HAL_UART_MspInit+0xec>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d160      	bne.n	8000cfc <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c3a:	4b33      	ldr	r3, [pc, #204]	; (8000d08 <HAL_UART_MspInit+0xf0>)
 8000c3c:	69da      	ldr	r2, [r3, #28]
 8000c3e:	4b32      	ldr	r3, [pc, #200]	; (8000d08 <HAL_UART_MspInit+0xf0>)
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	0289      	lsls	r1, r1, #10
 8000c44:	430a      	orrs	r2, r1
 8000c46:	61da      	str	r2, [r3, #28]
 8000c48:	4b2f      	ldr	r3, [pc, #188]	; (8000d08 <HAL_UART_MspInit+0xf0>)
 8000c4a:	69da      	ldr	r2, [r3, #28]
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	029b      	lsls	r3, r3, #10
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b2c      	ldr	r3, [pc, #176]	; (8000d08 <HAL_UART_MspInit+0xf0>)
 8000c58:	695a      	ldr	r2, [r3, #20]
 8000c5a:	4b2b      	ldr	r3, [pc, #172]	; (8000d08 <HAL_UART_MspInit+0xf0>)
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	0289      	lsls	r1, r1, #10
 8000c60:	430a      	orrs	r2, r1
 8000c62:	615a      	str	r2, [r3, #20]
 8000c64:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <HAL_UART_MspInit+0xf0>)
 8000c66:	695a      	ldr	r2, [r3, #20]
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	029b      	lsls	r3, r3, #10
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c72:	0021      	movs	r1, r4
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2203      	movs	r2, #3
 8000c8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	2201      	movs	r2, #1
 8000c90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	187a      	adds	r2, r7, r1
 8000c94:	2390      	movs	r3, #144	; 0x90
 8000c96:	05db      	lsls	r3, r3, #23
 8000c98:	0011      	movs	r1, r2
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 fb96 	bl	80013cc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <HAL_UART_MspInit+0xf4>)
 8000ca2:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <HAL_UART_MspInit+0xf8>)
 8000ca4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_UART_MspInit+0xf4>)
 8000ca8:	2210      	movs	r2, #16
 8000caa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <HAL_UART_MspInit+0xf4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <HAL_UART_MspInit+0xf4>)
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_UART_MspInit+0xf4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <HAL_UART_MspInit+0xf4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_UART_MspInit+0xf4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_UART_MspInit+0xf4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_UART_MspInit+0xf4>)
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f000 f9f6 	bl	80010c4 <HAL_DMA_Init>
 8000cd8:	1e03      	subs	r3, r0, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000cdc:	f7ff ff25 	bl	8000b2a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_UART_MspInit+0xf4>)
 8000ce4:	66da      	str	r2, [r3, #108]	; 0x6c
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_UART_MspInit+0xf4>)
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	201c      	movs	r0, #28
 8000cf2:	f000 f9b5 	bl	8001060 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cf6:	201c      	movs	r0, #28
 8000cf8:	f000 f9c7 	bl	800108a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b00b      	add	sp, #44	; 0x2c
 8000d02:	bd90      	pop	{r4, r7, pc}
 8000d04:	40004400 	.word	0x40004400
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	2000015c 	.word	0x2000015c
 8000d10:	40020044 	.word	0x40020044

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d38:	f000 f8ca 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 fa7f 	bl	800124e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	2000015c 	.word	0x2000015c

08000d5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <USART2_IRQHandler+0x14>)
 8000d62:	0018      	movs	r0, r3
 8000d64:	f001 fc50 	bl	8002608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	200000d8 	.word	0x200000d8

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	18d3      	adds	r3, r2, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f002 fad0 	bl	8003348 <__errno>
 8000da8:	0003      	movs	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	425b      	negs	r3, r3
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	18d2      	adds	r2, r2, r3
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <_sbrk+0x64>)
 8000dc4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b006      	add	sp, #24
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20002000 	.word	0x20002000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	200001b0 	.word	0x200001b0
 8000ddc:	200001c8 	.word	0x200001c8

08000de0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000df2:	490e      	ldr	r1, [pc, #56]	; (8000e2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df4:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <LoopForever+0xe>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e08:	4c0b      	ldr	r4, [pc, #44]	; (8000e38 <LoopForever+0x16>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e16:	f7ff ffe3 	bl	8000de0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e1a:	f002 fa9b 	bl	8003354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e1e:	f7ff fcbf 	bl	80007a0 <main>

08000e22 <LoopForever>:

LoopForever:
    b LoopForever
 8000e22:	e7fe      	b.n	8000e22 <LoopForever>
  ldr   r0, =_estack
 8000e24:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e30:	08003d80 	.word	0x08003d80
  ldr r2, =_sbss
 8000e34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e38:	200001c8 	.word	0x200001c8

08000e3c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC1_COMP_IRQHandler>
	...

08000e40 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <HAL_Init+0x24>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_Init+0x24>)
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 f809 	bl	8000e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e56:	f7ff fe6d 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	40022000 	.word	0x40022000

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_InitTick+0x5c>)
 8000e72:	681c      	ldr	r4, [r3, #0]
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_InitTick+0x60>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	0019      	movs	r1, r3
 8000e7a:	23fa      	movs	r3, #250	; 0xfa
 8000e7c:	0098      	lsls	r0, r3, #2
 8000e7e:	f7ff f94d 	bl	800011c <__udivsi3>
 8000e82:	0003      	movs	r3, r0
 8000e84:	0019      	movs	r1, r3
 8000e86:	0020      	movs	r0, r4
 8000e88:	f7ff f948 	bl	800011c <__udivsi3>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f000 f90b 	bl	80010aa <HAL_SYSTICK_Config>
 8000e94:	1e03      	subs	r3, r0, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e00f      	b.n	8000ebc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d80b      	bhi.n	8000eba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	425b      	negs	r3, r3
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f000 f8d8 	bl	8001060 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_InitTick+0x64>)
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b003      	add	sp, #12
 8000ec2:	bd90      	pop	{r4, r7, pc}
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_IncTick+0x1c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	001a      	movs	r2, r3
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_IncTick+0x20>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	18d2      	adds	r2, r2, r3
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ee2:	601a      	str	r2, [r3, #0]
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	200001b4 	.word	0x200001b4

08000ef4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b02      	ldr	r3, [pc, #8]	; (8000f04 <HAL_GetTick+0x10>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	200001b4 	.word	0x200001b4

08000f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	0002      	movs	r2, r0
 8000f10:	1dfb      	adds	r3, r7, #7
 8000f12:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	1dfb      	adds	r3, r7, #7
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b7f      	cmp	r3, #127	; 0x7f
 8000f1a:	d809      	bhi.n	8000f30 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	001a      	movs	r2, r3
 8000f22:	231f      	movs	r3, #31
 8000f24:	401a      	ands	r2, r3
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <__NVIC_EnableIRQ+0x30>)
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4091      	lsls	r1, r2
 8000f2c:	000a      	movs	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]
  }
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b002      	add	sp, #8
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	0002      	movs	r2, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f50:	d828      	bhi.n	8000fa4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f52:	4a2f      	ldr	r2, [pc, #188]	; (8001010 <__NVIC_SetPriority+0xd4>)
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	33c0      	adds	r3, #192	; 0xc0
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	589b      	ldr	r3, [r3, r2]
 8000f62:	1dfa      	adds	r2, r7, #7
 8000f64:	7812      	ldrb	r2, [r2, #0]
 8000f66:	0011      	movs	r1, r2
 8000f68:	2203      	movs	r2, #3
 8000f6a:	400a      	ands	r2, r1
 8000f6c:	00d2      	lsls	r2, r2, #3
 8000f6e:	21ff      	movs	r1, #255	; 0xff
 8000f70:	4091      	lsls	r1, r2
 8000f72:	000a      	movs	r2, r1
 8000f74:	43d2      	mvns	r2, r2
 8000f76:	401a      	ands	r2, r3
 8000f78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	019b      	lsls	r3, r3, #6
 8000f7e:	22ff      	movs	r2, #255	; 0xff
 8000f80:	401a      	ands	r2, r3
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	0018      	movs	r0, r3
 8000f88:	2303      	movs	r3, #3
 8000f8a:	4003      	ands	r3, r0
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f90:	481f      	ldr	r0, [pc, #124]	; (8001010 <__NVIC_SetPriority+0xd4>)
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	33c0      	adds	r3, #192	; 0xc0
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fa2:	e031      	b.n	8001008 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <__NVIC_SetPriority+0xd8>)
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	0019      	movs	r1, r3
 8000fac:	230f      	movs	r3, #15
 8000fae:	400b      	ands	r3, r1
 8000fb0:	3b08      	subs	r3, #8
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3306      	adds	r3, #6
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	18d3      	adds	r3, r2, r3
 8000fba:	3304      	adds	r3, #4
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	1dfa      	adds	r2, r7, #7
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	400a      	ands	r2, r1
 8000fc8:	00d2      	lsls	r2, r2, #3
 8000fca:	21ff      	movs	r1, #255	; 0xff
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	000a      	movs	r2, r1
 8000fd0:	43d2      	mvns	r2, r2
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	019b      	lsls	r3, r3, #6
 8000fda:	22ff      	movs	r2, #255	; 0xff
 8000fdc:	401a      	ands	r2, r3
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	4003      	ands	r3, r0
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fec:	4809      	ldr	r0, [pc, #36]	; (8001014 <__NVIC_SetPriority+0xd8>)
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	001c      	movs	r4, r3
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	4023      	ands	r3, r4
 8000ff8:	3b08      	subs	r3, #8
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	3306      	adds	r3, #6
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	18c3      	adds	r3, r0, r3
 8001004:	3304      	adds	r3, #4
 8001006:	601a      	str	r2, [r3, #0]
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b003      	add	sp, #12
 800100e:	bd90      	pop	{r4, r7, pc}
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	045b      	lsls	r3, r3, #17
 8001028:	429a      	cmp	r2, r3
 800102a:	d301      	bcc.n	8001030 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102c:	2301      	movs	r3, #1
 800102e:	e010      	b.n	8001052 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <SysTick_Config+0x44>)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	3a01      	subs	r2, #1
 8001036:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001038:	2301      	movs	r3, #1
 800103a:	425b      	negs	r3, r3
 800103c:	2103      	movs	r1, #3
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff ff7c 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <SysTick_Config+0x44>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <SysTick_Config+0x44>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	0018      	movs	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	b002      	add	sp, #8
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	210f      	movs	r1, #15
 800106c:	187b      	adds	r3, r7, r1
 800106e:	1c02      	adds	r2, r0, #0
 8001070:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	187b      	adds	r3, r7, r1
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b25b      	sxtb	r3, r3
 800107a:	0011      	movs	r1, r2
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <__NVIC_SetPriority>
}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b004      	add	sp, #16
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	0002      	movs	r2, r0
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b25b      	sxtb	r3, r3
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff ff33 	bl	8000f08 <__NVIC_EnableIRQ>
}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff ffaf 	bl	8001018 <SysTick_Config>
 80010ba:	0003      	movs	r3, r0
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	b002      	add	sp, #8
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e036      	b.n	8001148 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2221      	movs	r2, #33	; 0x21
 80010de:	2102      	movs	r1, #2
 80010e0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4a18      	ldr	r2, [pc, #96]	; (8001150 <HAL_DMA_Init+0x8c>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80010fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69db      	ldr	r3, [r3, #28]
 8001118:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4313      	orrs	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	0018      	movs	r0, r3
 800112c:	f000 f932 	bl	8001394 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2221      	movs	r2, #33	; 0x21
 800113a:	2101      	movs	r1, #1
 800113c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2220      	movs	r2, #32
 8001142:	2100      	movs	r1, #0
 8001144:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}  
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b004      	add	sp, #16
 800114e:	bd80      	pop	{r7, pc}
 8001150:	ffffc00f 	.word	0xffffc00f

08001154 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2221      	movs	r2, #33	; 0x21
 8001160:	5c9b      	ldrb	r3, [r3, r2]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d008      	beq.n	800117a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2204      	movs	r2, #4
 800116c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2220      	movs	r2, #32
 8001172:	2100      	movs	r1, #0
 8001174:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e020      	b.n	80011bc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	210e      	movs	r1, #14
 8001186:	438a      	bics	r2, r1
 8001188:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2101      	movs	r1, #1
 8001196:	438a      	bics	r2, r1
 8001198:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a2:	2101      	movs	r1, #1
 80011a4:	4091      	lsls	r1, r2
 80011a6:	000a      	movs	r2, r1
 80011a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2221      	movs	r2, #33	; 0x21
 80011ae:	2101      	movs	r1, #1
 80011b0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2220      	movs	r2, #32
 80011b6:	2100      	movs	r1, #0
 80011b8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	b002      	add	sp, #8
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011cc:	210f      	movs	r1, #15
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2221      	movs	r2, #33	; 0x21
 80011d8:	5c9b      	ldrb	r3, [r3, r2]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d006      	beq.n	80011ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2204      	movs	r2, #4
 80011e4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]
 80011ec:	e028      	b.n	8001240 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	210e      	movs	r1, #14
 80011fa:	438a      	bics	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2101      	movs	r1, #1
 800120a:	438a      	bics	r2, r1
 800120c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001216:	2101      	movs	r1, #1
 8001218:	4091      	lsls	r1, r2
 800121a:	000a      	movs	r2, r1
 800121c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2221      	movs	r2, #33	; 0x21
 8001222:	2101      	movs	r1, #1
 8001224:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2220      	movs	r2, #32
 800122a:	2100      	movs	r1, #0
 800122c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001232:	2b00      	cmp	r3, #0
 8001234:	d004      	beq.n	8001240 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	0010      	movs	r0, r2
 800123e:	4798      	blx	r3
    } 
  }
  return status;
 8001240:	230f      	movs	r3, #15
 8001242:	18fb      	adds	r3, r7, r3
 8001244:	781b      	ldrb	r3, [r3, #0]
}
 8001246:	0018      	movs	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	b004      	add	sp, #16
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b084      	sub	sp, #16
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	2204      	movs	r2, #4
 800126c:	409a      	lsls	r2, r3
 800126e:	0013      	movs	r3, r2
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4013      	ands	r3, r2
 8001274:	d024      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x72>
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	2204      	movs	r2, #4
 800127a:	4013      	ands	r3, r2
 800127c:	d020      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2220      	movs	r2, #32
 8001286:	4013      	ands	r3, r2
 8001288:	d107      	bne.n	800129a <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2104      	movs	r1, #4
 8001296:	438a      	bics	r2, r1
 8001298:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a2:	2104      	movs	r1, #4
 80012a4:	4091      	lsls	r1, r2
 80012a6:	000a      	movs	r2, r1
 80012a8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <HAL_DMA_IRQHandler+0x66>
 80012b2:	e06a      	b.n	800138a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	0010      	movs	r0, r2
 80012bc:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80012be:	e064      	b.n	800138a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	2202      	movs	r2, #2
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	4013      	ands	r3, r2
 80012ce:	d02b      	beq.n	8001328 <HAL_DMA_IRQHandler+0xda>
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	2202      	movs	r2, #2
 80012d4:	4013      	ands	r3, r2
 80012d6:	d027      	beq.n	8001328 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2220      	movs	r2, #32
 80012e0:	4013      	ands	r3, r2
 80012e2:	d10b      	bne.n	80012fc <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	210a      	movs	r1, #10
 80012f0:	438a      	bics	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2221      	movs	r2, #33	; 0x21
 80012f8:	2101      	movs	r1, #1
 80012fa:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001304:	2102      	movs	r1, #2
 8001306:	4091      	lsls	r1, r2
 8001308:	000a      	movs	r2, r1
 800130a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2220      	movs	r2, #32
 8001310:	2100      	movs	r1, #0
 8001312:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	2b00      	cmp	r3, #0
 800131a:	d036      	beq.n	800138a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	0010      	movs	r0, r2
 8001324:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001326:	e030      	b.n	800138a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	2208      	movs	r2, #8
 800132e:	409a      	lsls	r2, r3
 8001330:	0013      	movs	r3, r2
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	4013      	ands	r3, r2
 8001336:	d028      	beq.n	800138a <HAL_DMA_IRQHandler+0x13c>
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	2208      	movs	r2, #8
 800133c:	4013      	ands	r3, r2
 800133e:	d024      	beq.n	800138a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	210e      	movs	r1, #14
 800134c:	438a      	bics	r2, r1
 800134e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001358:	2101      	movs	r1, #1
 800135a:	4091      	lsls	r1, r2
 800135c:	000a      	movs	r2, r1
 800135e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2221      	movs	r2, #33	; 0x21
 800136a:	2101      	movs	r1, #1
 800136c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2220      	movs	r2, #32
 8001372:	2100      	movs	r1, #0
 8001374:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	0010      	movs	r0, r2
 8001386:	4798      	blx	r3
    }
   }
}  
 8001388:	e7ff      	b.n	800138a <HAL_DMA_IRQHandler+0x13c>
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b004      	add	sp, #16
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <DMA_CalcBaseAndBitshift+0x30>)
 80013a2:	4694      	mov	ip, r2
 80013a4:	4463      	add	r3, ip
 80013a6:	2114      	movs	r1, #20
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7fe feb7 	bl	800011c <__udivsi3>
 80013ae:	0003      	movs	r3, r0
 80013b0:	009a      	lsls	r2, r3, #2
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a03      	ldr	r2, [pc, #12]	; (80013c8 <DMA_CalcBaseAndBitshift+0x34>)
 80013ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80013bc:	46c0      	nop			; (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	b002      	add	sp, #8
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	bffdfff8 	.word	0xbffdfff8
 80013c8:	40020000 	.word	0x40020000

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013da:	e14f      	b.n	800167c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2101      	movs	r1, #1
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	4091      	lsls	r1, r2
 80013e6:	000a      	movs	r2, r1
 80013e8:	4013      	ands	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d100      	bne.n	80013f4 <HAL_GPIO_Init+0x28>
 80013f2:	e140      	b.n	8001676 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2203      	movs	r2, #3
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d005      	beq.n	800140c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2203      	movs	r2, #3
 8001406:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001408:	2b02      	cmp	r3, #2
 800140a:	d130      	bne.n	800146e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	409a      	lsls	r2, r3
 800141a:	0013      	movs	r3, r2
 800141c:	43da      	mvns	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	409a      	lsls	r2, r3
 800142e:	0013      	movs	r3, r2
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001442:	2201      	movs	r2, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	43da      	mvns	r2, r3
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	091b      	lsrs	r3, r3, #4
 8001458:	2201      	movs	r2, #1
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2203      	movs	r2, #3
 8001474:	4013      	ands	r3, r2
 8001476:	2b03      	cmp	r3, #3
 8001478:	d017      	beq.n	80014aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	2203      	movs	r2, #3
 8001486:	409a      	lsls	r2, r3
 8001488:	0013      	movs	r3, r2
 800148a:	43da      	mvns	r2, r3
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	409a      	lsls	r2, r3
 800149c:	0013      	movs	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2203      	movs	r2, #3
 80014b0:	4013      	ands	r3, r2
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d123      	bne.n	80014fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	08da      	lsrs	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3208      	adds	r2, #8
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	58d3      	ldr	r3, [r2, r3]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2207      	movs	r2, #7
 80014c8:	4013      	ands	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	220f      	movs	r2, #15
 80014ce:	409a      	lsls	r2, r3
 80014d0:	0013      	movs	r3, r2
 80014d2:	43da      	mvns	r2, r3
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	691a      	ldr	r2, [r3, #16]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	2107      	movs	r1, #7
 80014e2:	400b      	ands	r3, r1
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	409a      	lsls	r2, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	08da      	lsrs	r2, r3, #3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3208      	adds	r2, #8
 80014f8:	0092      	lsls	r2, r2, #2
 80014fa:	6939      	ldr	r1, [r7, #16]
 80014fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	2203      	movs	r2, #3
 800150a:	409a      	lsls	r2, r3
 800150c:	0013      	movs	r3, r2
 800150e:	43da      	mvns	r2, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2203      	movs	r2, #3
 800151c:	401a      	ands	r2, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	409a      	lsls	r2, r3
 8001524:	0013      	movs	r3, r2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	23c0      	movs	r3, #192	; 0xc0
 8001538:	029b      	lsls	r3, r3, #10
 800153a:	4013      	ands	r3, r2
 800153c:	d100      	bne.n	8001540 <HAL_GPIO_Init+0x174>
 800153e:	e09a      	b.n	8001676 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001540:	4b54      	ldr	r3, [pc, #336]	; (8001694 <HAL_GPIO_Init+0x2c8>)
 8001542:	699a      	ldr	r2, [r3, #24]
 8001544:	4b53      	ldr	r3, [pc, #332]	; (8001694 <HAL_GPIO_Init+0x2c8>)
 8001546:	2101      	movs	r1, #1
 8001548:	430a      	orrs	r2, r1
 800154a:	619a      	str	r2, [r3, #24]
 800154c:	4b51      	ldr	r3, [pc, #324]	; (8001694 <HAL_GPIO_Init+0x2c8>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2201      	movs	r2, #1
 8001552:	4013      	ands	r3, r2
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001558:	4a4f      	ldr	r2, [pc, #316]	; (8001698 <HAL_GPIO_Init+0x2cc>)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	589b      	ldr	r3, [r3, r2]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2203      	movs	r2, #3
 800156a:	4013      	ands	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	220f      	movs	r2, #15
 8001570:	409a      	lsls	r2, r3
 8001572:	0013      	movs	r3, r2
 8001574:	43da      	mvns	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	2390      	movs	r3, #144	; 0x90
 8001580:	05db      	lsls	r3, r3, #23
 8001582:	429a      	cmp	r2, r3
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x1e2>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a44      	ldr	r2, [pc, #272]	; (800169c <HAL_GPIO_Init+0x2d0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x1de>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a43      	ldr	r2, [pc, #268]	; (80016a0 <HAL_GPIO_Init+0x2d4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x1da>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a42      	ldr	r2, [pc, #264]	; (80016a4 <HAL_GPIO_Init+0x2d8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x1d6>
 800159e:	2303      	movs	r3, #3
 80015a0:	e006      	b.n	80015b0 <HAL_GPIO_Init+0x1e4>
 80015a2:	2305      	movs	r3, #5
 80015a4:	e004      	b.n	80015b0 <HAL_GPIO_Init+0x1e4>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e002      	b.n	80015b0 <HAL_GPIO_Init+0x1e4>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <HAL_GPIO_Init+0x1e4>
 80015ae:	2300      	movs	r3, #0
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	2103      	movs	r1, #3
 80015b4:	400a      	ands	r2, r1
 80015b6:	0092      	lsls	r2, r2, #2
 80015b8:	4093      	lsls	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015c0:	4935      	ldr	r1, [pc, #212]	; (8001698 <HAL_GPIO_Init+0x2cc>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ce:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <HAL_GPIO_Init+0x2dc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	43da      	mvns	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	025b      	lsls	r3, r3, #9
 80015e6:	4013      	ands	r3, r2
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015f2:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <HAL_GPIO_Init+0x2dc>)
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <HAL_GPIO_Init+0x2dc>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	43da      	mvns	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	029b      	lsls	r3, r3, #10
 8001610:	4013      	ands	r3, r2
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <HAL_GPIO_Init+0x2dc>)
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <HAL_GPIO_Init+0x2dc>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43da      	mvns	r2, r3
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	035b      	lsls	r3, r3, #13
 800163a:	4013      	ands	r3, r2
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_GPIO_Init+0x2dc>)
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_GPIO_Init+0x2dc>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43da      	mvns	r2, r3
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	039b      	lsls	r3, r3, #14
 8001664:	4013      	ands	r3, r2
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001670:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_GPIO_Init+0x2dc>)
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3301      	adds	r3, #1
 800167a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	40da      	lsrs	r2, r3
 8001684:	1e13      	subs	r3, r2, #0
 8001686:	d000      	beq.n	800168a <HAL_GPIO_Init+0x2be>
 8001688:	e6a8      	b.n	80013dc <HAL_GPIO_Init+0x10>
  } 
}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	46c0      	nop			; (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	b006      	add	sp, #24
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021000 	.word	0x40021000
 8001698:	40010000 	.word	0x40010000
 800169c:	48000400 	.word	0x48000400
 80016a0:	48000800 	.word	0x48000800
 80016a4:	48000c00 	.word	0x48000c00
 80016a8:	40010400 	.word	0x40010400

080016ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	0008      	movs	r0, r1
 80016b6:	0011      	movs	r1, r2
 80016b8:	1cbb      	adds	r3, r7, #2
 80016ba:	1c02      	adds	r2, r0, #0
 80016bc:	801a      	strh	r2, [r3, #0]
 80016be:	1c7b      	adds	r3, r7, #1
 80016c0:	1c0a      	adds	r2, r1, #0
 80016c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c4:	1c7b      	adds	r3, r7, #1
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d004      	beq.n	80016d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016cc:	1cbb      	adds	r3, r7, #2
 80016ce:	881a      	ldrh	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d4:	e003      	b.n	80016de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d6:	1cbb      	adds	r3, r7, #2
 80016d8:	881a      	ldrh	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b002      	add	sp, #8
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b084      	sub	sp, #16
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	000a      	movs	r2, r1
 80016f0:	1cbb      	adds	r3, r7, #2
 80016f2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016fa:	1cbb      	adds	r3, r7, #2
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4013      	ands	r3, r2
 8001702:	041a      	lsls	r2, r3, #16
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	43db      	mvns	r3, r3
 8001708:	1cb9      	adds	r1, r7, #2
 800170a:	8809      	ldrh	r1, [r1, #0]
 800170c:	400b      	ands	r3, r1
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	b004      	add	sp, #16
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e082      	b.n	8001834 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2241      	movs	r2, #65	; 0x41
 8001732:	5c9b      	ldrb	r3, [r3, r2]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d107      	bne.n	800174a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2240      	movs	r2, #64	; 0x40
 800173e:	2100      	movs	r1, #0
 8001740:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	0018      	movs	r0, r3
 8001746:	f7ff fa19 	bl	8000b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2241      	movs	r2, #65	; 0x41
 800174e:	2124      	movs	r1, #36	; 0x24
 8001750:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2101      	movs	r1, #1
 800175e:	438a      	bics	r2, r1
 8001760:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4934      	ldr	r1, [pc, #208]	; (800183c <HAL_I2C_Init+0x120>)
 800176c:	400a      	ands	r2, r1
 800176e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4931      	ldr	r1, [pc, #196]	; (8001840 <HAL_I2C_Init+0x124>)
 800177c:	400a      	ands	r2, r1
 800177e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d108      	bne.n	800179a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	0209      	lsls	r1, r1, #8
 8001794:	430a      	orrs	r2, r1
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	e007      	b.n	80017aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2184      	movs	r1, #132	; 0x84
 80017a4:	0209      	lsls	r1, r1, #8
 80017a6:	430a      	orrs	r2, r1
 80017a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d104      	bne.n	80017bc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	491f      	ldr	r1, [pc, #124]	; (8001844 <HAL_I2C_Init+0x128>)
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	491a      	ldr	r1, [pc, #104]	; (8001840 <HAL_I2C_Init+0x124>)
 80017d8:	400a      	ands	r2, r1
 80017da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691a      	ldr	r2, [r3, #16]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	431a      	orrs	r2, r3
 80017e6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69d9      	ldr	r1, [r3, #28]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1a      	ldr	r2, [r3, #32]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	430a      	orrs	r2, r1
 8001814:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2241      	movs	r2, #65	; 0x41
 8001820:	2120      	movs	r1, #32
 8001822:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2242      	movs	r2, #66	; 0x42
 800182e:	2100      	movs	r1, #0
 8001830:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	0018      	movs	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	b002      	add	sp, #8
 800183a:	bd80      	pop	{r7, pc}
 800183c:	f0ffffff 	.word	0xf0ffffff
 8001840:	ffff7fff 	.word	0xffff7fff
 8001844:	02008000 	.word	0x02008000

08001848 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2241      	movs	r2, #65	; 0x41
 8001856:	5c9b      	ldrb	r3, [r3, r2]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b20      	cmp	r3, #32
 800185c:	d138      	bne.n	80018d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2240      	movs	r2, #64	; 0x40
 8001862:	5c9b      	ldrb	r3, [r3, r2]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001868:	2302      	movs	r3, #2
 800186a:	e032      	b.n	80018d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2240      	movs	r2, #64	; 0x40
 8001870:	2101      	movs	r1, #1
 8001872:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2241      	movs	r2, #65	; 0x41
 8001878:	2124      	movs	r1, #36	; 0x24
 800187a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2101      	movs	r1, #1
 8001888:	438a      	bics	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4911      	ldr	r1, [pc, #68]	; (80018dc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001898:	400a      	ands	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6819      	ldr	r1, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2101      	movs	r1, #1
 80018b8:	430a      	orrs	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2241      	movs	r2, #65	; 0x41
 80018c0:	2120      	movs	r1, #32
 80018c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2240      	movs	r2, #64	; 0x40
 80018c8:	2100      	movs	r1, #0
 80018ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e000      	b.n	80018d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018d0:	2302      	movs	r3, #2
  }
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b002      	add	sp, #8
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	ffffefff 	.word	0xffffefff

080018e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2241      	movs	r2, #65	; 0x41
 80018ee:	5c9b      	ldrb	r3, [r3, r2]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b20      	cmp	r3, #32
 80018f4:	d139      	bne.n	800196a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2240      	movs	r2, #64	; 0x40
 80018fa:	5c9b      	ldrb	r3, [r3, r2]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001900:	2302      	movs	r3, #2
 8001902:	e033      	b.n	800196c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2240      	movs	r2, #64	; 0x40
 8001908:	2101      	movs	r1, #1
 800190a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2241      	movs	r2, #65	; 0x41
 8001910:	2124      	movs	r1, #36	; 0x24
 8001912:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2101      	movs	r1, #1
 8001920:	438a      	bics	r2, r1
 8001922:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4a11      	ldr	r2, [pc, #68]	; (8001974 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2101      	movs	r1, #1
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2241      	movs	r2, #65	; 0x41
 800195a:	2120      	movs	r1, #32
 800195c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2240      	movs	r2, #64	; 0x40
 8001962:	2100      	movs	r1, #0
 8001964:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800196a:	2302      	movs	r3, #2
  }
}
 800196c:	0018      	movs	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	b004      	add	sp, #16
 8001972:	bd80      	pop	{r7, pc}
 8001974:	fffff0ff 	.word	0xfffff0ff

08001978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e301      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2201      	movs	r2, #1
 8001990:	4013      	ands	r3, r2
 8001992:	d100      	bne.n	8001996 <HAL_RCC_OscConfig+0x1e>
 8001994:	e08d      	b.n	8001ab2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001996:	4bc3      	ldr	r3, [pc, #780]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	220c      	movs	r2, #12
 800199c:	4013      	ands	r3, r2
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d00e      	beq.n	80019c0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019a2:	4bc0      	ldr	r3, [pc, #768]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	220c      	movs	r2, #12
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d116      	bne.n	80019dc <HAL_RCC_OscConfig+0x64>
 80019ae:	4bbd      	ldr	r3, [pc, #756]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	025b      	lsls	r3, r3, #9
 80019b6:	401a      	ands	r2, r3
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	025b      	lsls	r3, r3, #9
 80019bc:	429a      	cmp	r2, r3
 80019be:	d10d      	bne.n	80019dc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	4bb8      	ldr	r3, [pc, #736]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	029b      	lsls	r3, r3, #10
 80019c8:	4013      	ands	r3, r2
 80019ca:	d100      	bne.n	80019ce <HAL_RCC_OscConfig+0x56>
 80019cc:	e070      	b.n	8001ab0 <HAL_RCC_OscConfig+0x138>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d000      	beq.n	80019d8 <HAL_RCC_OscConfig+0x60>
 80019d6:	e06b      	b.n	8001ab0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e2d8      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_OscConfig+0x7c>
 80019e4:	4baf      	ldr	r3, [pc, #700]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4bae      	ldr	r3, [pc, #696]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	0249      	lsls	r1, r1, #9
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e02f      	b.n	8001a54 <HAL_RCC_OscConfig+0xdc>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10c      	bne.n	8001a16 <HAL_RCC_OscConfig+0x9e>
 80019fc:	4ba9      	ldr	r3, [pc, #676]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4ba8      	ldr	r3, [pc, #672]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a02:	49a9      	ldr	r1, [pc, #676]	; (8001ca8 <HAL_RCC_OscConfig+0x330>)
 8001a04:	400a      	ands	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	4ba6      	ldr	r3, [pc, #664]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4ba5      	ldr	r3, [pc, #660]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	49a7      	ldr	r1, [pc, #668]	; (8001cac <HAL_RCC_OscConfig+0x334>)
 8001a10:	400a      	ands	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	e01e      	b.n	8001a54 <HAL_RCC_OscConfig+0xdc>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d10e      	bne.n	8001a3c <HAL_RCC_OscConfig+0xc4>
 8001a1e:	4ba1      	ldr	r3, [pc, #644]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4ba0      	ldr	r3, [pc, #640]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	02c9      	lsls	r1, r1, #11
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	4b9d      	ldr	r3, [pc, #628]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b9c      	ldr	r3, [pc, #624]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a32:	2180      	movs	r1, #128	; 0x80
 8001a34:	0249      	lsls	r1, r1, #9
 8001a36:	430a      	orrs	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	e00b      	b.n	8001a54 <HAL_RCC_OscConfig+0xdc>
 8001a3c:	4b99      	ldr	r3, [pc, #612]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b98      	ldr	r3, [pc, #608]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a42:	4999      	ldr	r1, [pc, #612]	; (8001ca8 <HAL_RCC_OscConfig+0x330>)
 8001a44:	400a      	ands	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	4b96      	ldr	r3, [pc, #600]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b95      	ldr	r3, [pc, #596]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	4997      	ldr	r1, [pc, #604]	; (8001cac <HAL_RCC_OscConfig+0x334>)
 8001a50:	400a      	ands	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d014      	beq.n	8001a86 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fa4a 	bl	8000ef4 <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a66:	f7ff fa45 	bl	8000ef4 <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b64      	cmp	r3, #100	; 0x64
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e28a      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a78:	4b8a      	ldr	r3, [pc, #552]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	029b      	lsls	r3, r3, #10
 8001a80:	4013      	ands	r3, r2
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0xee>
 8001a84:	e015      	b.n	8001ab2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff fa35 	bl	8000ef4 <HAL_GetTick>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff fa30 	bl	8000ef4 <HAL_GetTick>
 8001a94:	0002      	movs	r2, r0
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	; 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e275      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa2:	4b80      	ldr	r3, [pc, #512]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	029b      	lsls	r3, r3, #10
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x118>
 8001aae:	e000      	b.n	8001ab2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d100      	bne.n	8001abe <HAL_RCC_OscConfig+0x146>
 8001abc:	e069      	b.n	8001b92 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001abe:	4b79      	ldr	r3, [pc, #484]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d00b      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ac8:	4b76      	ldr	r3, [pc, #472]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	220c      	movs	r2, #12
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d11c      	bne.n	8001b0e <HAL_RCC_OscConfig+0x196>
 8001ad4:	4b73      	ldr	r3, [pc, #460]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	025b      	lsls	r3, r3, #9
 8001adc:	4013      	ands	r3, r2
 8001ade:	d116      	bne.n	8001b0e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae0:	4b70      	ldr	r3, [pc, #448]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d005      	beq.n	8001af6 <HAL_RCC_OscConfig+0x17e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e24b      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af6:	4b6b      	ldr	r3, [pc, #428]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	22f8      	movs	r2, #248	; 0xf8
 8001afc:	4393      	bics	r3, r2
 8001afe:	0019      	movs	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	00da      	lsls	r2, r3, #3
 8001b06:	4b67      	ldr	r3, [pc, #412]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0c:	e041      	b.n	8001b92 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d024      	beq.n	8001b60 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b16:	4b63      	ldr	r3, [pc, #396]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4b62      	ldr	r3, [pc, #392]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff f9e7 	bl	8000ef4 <HAL_GetTick>
 8001b26:	0003      	movs	r3, r0
 8001b28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff f9e2 	bl	8000ef4 <HAL_GetTick>
 8001b30:	0002      	movs	r2, r0
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e227      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3e:	4b59      	ldr	r3, [pc, #356]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2202      	movs	r2, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	d0f1      	beq.n	8001b2c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b48:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	22f8      	movs	r2, #248	; 0xf8
 8001b4e:	4393      	bics	r3, r2
 8001b50:	0019      	movs	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	00da      	lsls	r2, r3, #3
 8001b58:	4b52      	ldr	r3, [pc, #328]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e018      	b.n	8001b92 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b60:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b4f      	ldr	r3, [pc, #316]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b66:	2101      	movs	r1, #1
 8001b68:	438a      	bics	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff f9c2 	bl	8000ef4 <HAL_GetTick>
 8001b70:	0003      	movs	r3, r0
 8001b72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b76:	f7ff f9bd 	bl	8000ef4 <HAL_GetTick>
 8001b7a:	0002      	movs	r2, r0
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e202      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b88:	4b46      	ldr	r3, [pc, #280]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d1f1      	bne.n	8001b76 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2208      	movs	r2, #8
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d036      	beq.n	8001c0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d019      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba4:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001baa:	2101      	movs	r1, #1
 8001bac:	430a      	orrs	r2, r1
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb0:	f7ff f9a0 	bl	8000ef4 <HAL_GetTick>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bba:	f7ff f99b 	bl	8000ef4 <HAL_GetTick>
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e1e0      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bcc:	4b35      	ldr	r3, [pc, #212]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d0f1      	beq.n	8001bba <HAL_RCC_OscConfig+0x242>
 8001bd6:	e018      	b.n	8001c0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd8:	4b32      	ldr	r3, [pc, #200]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bdc:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001bde:	2101      	movs	r1, #1
 8001be0:	438a      	bics	r2, r1
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be4:	f7ff f986 	bl	8000ef4 <HAL_GetTick>
 8001be8:	0003      	movs	r3, r0
 8001bea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bee:	f7ff f981 	bl	8000ef4 <HAL_GetTick>
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e1c6      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	4b28      	ldr	r3, [pc, #160]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	2202      	movs	r2, #2
 8001c06:	4013      	ands	r3, r2
 8001c08:	d1f1      	bne.n	8001bee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2204      	movs	r2, #4
 8001c10:	4013      	ands	r3, r2
 8001c12:	d100      	bne.n	8001c16 <HAL_RCC_OscConfig+0x29e>
 8001c14:	e0b4      	b.n	8001d80 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c16:	201f      	movs	r0, #31
 8001c18:	183b      	adds	r3, r7, r0
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1e:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	055b      	lsls	r3, r3, #21
 8001c26:	4013      	ands	r3, r2
 8001c28:	d110      	bne.n	8001c4c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001c2c:	69da      	ldr	r2, [r3, #28]
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	0549      	lsls	r1, r1, #21
 8001c34:	430a      	orrs	r2, r1
 8001c36:	61da      	str	r2, [r3, #28]
 8001c38:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	69da      	ldr	r2, [r3, #28]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	055b      	lsls	r3, r3, #21
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c46:	183b      	adds	r3, r7, r0
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_RCC_OscConfig+0x338>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4013      	ands	r3, r2
 8001c56:	d11a      	bne.n	8001c8e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_RCC_OscConfig+0x338>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_RCC_OscConfig+0x338>)
 8001c5e:	2180      	movs	r1, #128	; 0x80
 8001c60:	0049      	lsls	r1, r1, #1
 8001c62:	430a      	orrs	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c66:	f7ff f945 	bl	8000ef4 <HAL_GetTick>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c70:	f7ff f940 	bl	8000ef4 <HAL_GetTick>
 8001c74:	0002      	movs	r2, r0
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	; 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e185      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_OscConfig+0x338>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d10e      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x33c>
 8001c96:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001c98:	6a1a      	ldr	r2, [r3, #32]
 8001c9a:	4b02      	ldr	r3, [pc, #8]	; (8001ca4 <HAL_RCC_OscConfig+0x32c>)
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	621a      	str	r2, [r3, #32]
 8001ca2:	e035      	b.n	8001d10 <HAL_RCC_OscConfig+0x398>
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	fffeffff 	.word	0xfffeffff
 8001cac:	fffbffff 	.word	0xfffbffff
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10c      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x35e>
 8001cbc:	4bb6      	ldr	r3, [pc, #728]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001cbe:	6a1a      	ldr	r2, [r3, #32]
 8001cc0:	4bb5      	ldr	r3, [pc, #724]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	438a      	bics	r2, r1
 8001cc6:	621a      	str	r2, [r3, #32]
 8001cc8:	4bb3      	ldr	r3, [pc, #716]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001cca:	6a1a      	ldr	r2, [r3, #32]
 8001ccc:	4bb2      	ldr	r3, [pc, #712]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001cce:	2104      	movs	r1, #4
 8001cd0:	438a      	bics	r2, r1
 8001cd2:	621a      	str	r2, [r3, #32]
 8001cd4:	e01c      	b.n	8001d10 <HAL_RCC_OscConfig+0x398>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b05      	cmp	r3, #5
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x380>
 8001cde:	4bae      	ldr	r3, [pc, #696]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001ce0:	6a1a      	ldr	r2, [r3, #32]
 8001ce2:	4bad      	ldr	r3, [pc, #692]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001ce4:	2104      	movs	r1, #4
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	621a      	str	r2, [r3, #32]
 8001cea:	4bab      	ldr	r3, [pc, #684]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001cec:	6a1a      	ldr	r2, [r3, #32]
 8001cee:	4baa      	ldr	r3, [pc, #680]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	621a      	str	r2, [r3, #32]
 8001cf6:	e00b      	b.n	8001d10 <HAL_RCC_OscConfig+0x398>
 8001cf8:	4ba7      	ldr	r3, [pc, #668]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001cfa:	6a1a      	ldr	r2, [r3, #32]
 8001cfc:	4ba6      	ldr	r3, [pc, #664]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001cfe:	2101      	movs	r1, #1
 8001d00:	438a      	bics	r2, r1
 8001d02:	621a      	str	r2, [r3, #32]
 8001d04:	4ba4      	ldr	r3, [pc, #656]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001d06:	6a1a      	ldr	r2, [r3, #32]
 8001d08:	4ba3      	ldr	r3, [pc, #652]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001d0a:	2104      	movs	r1, #4
 8001d0c:	438a      	bics	r2, r1
 8001d0e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d014      	beq.n	8001d42 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d18:	f7ff f8ec 	bl	8000ef4 <HAL_GetTick>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d20:	e009      	b.n	8001d36 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d22:	f7ff f8e7 	bl	8000ef4 <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	4a9b      	ldr	r2, [pc, #620]	; (8001f9c <HAL_RCC_OscConfig+0x624>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e12b      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d36:	4b98      	ldr	r3, [pc, #608]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x3aa>
 8001d40:	e013      	b.n	8001d6a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d42:	f7ff f8d7 	bl	8000ef4 <HAL_GetTick>
 8001d46:	0003      	movs	r3, r0
 8001d48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4a:	e009      	b.n	8001d60 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d4c:	f7ff f8d2 	bl	8000ef4 <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	4a91      	ldr	r2, [pc, #580]	; (8001f9c <HAL_RCC_OscConfig+0x624>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e116      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d60:	4b8d      	ldr	r3, [pc, #564]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	2202      	movs	r2, #2
 8001d66:	4013      	ands	r3, r2
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d6a:	231f      	movs	r3, #31
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d105      	bne.n	8001d80 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d74:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001d76:	69da      	ldr	r2, [r3, #28]
 8001d78:	4b87      	ldr	r3, [pc, #540]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001d7a:	4989      	ldr	r1, [pc, #548]	; (8001fa0 <HAL_RCC_OscConfig+0x628>)
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2210      	movs	r2, #16
 8001d86:	4013      	ands	r3, r2
 8001d88:	d063      	beq.n	8001e52 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d12a      	bne.n	8001de8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d92:	4b81      	ldr	r3, [pc, #516]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d96:	4b80      	ldr	r3, [pc, #512]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001d98:	2104      	movs	r1, #4
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d9e:	4b7e      	ldr	r3, [pc, #504]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da2:	4b7d      	ldr	r3, [pc, #500]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001da4:	2101      	movs	r1, #1
 8001da6:	430a      	orrs	r2, r1
 8001da8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001daa:	f7ff f8a3 	bl	8000ef4 <HAL_GetTick>
 8001dae:	0003      	movs	r3, r0
 8001db0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001db4:	f7ff f89e 	bl	8000ef4 <HAL_GetTick>
 8001db8:	0002      	movs	r2, r0
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e0e3      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dc6:	4b74      	ldr	r3, [pc, #464]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dca:	2202      	movs	r2, #2
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d0f1      	beq.n	8001db4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001dd0:	4b71      	ldr	r3, [pc, #452]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd4:	22f8      	movs	r2, #248	; 0xf8
 8001dd6:	4393      	bics	r3, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	00da      	lsls	r2, r3, #3
 8001de0:	4b6d      	ldr	r3, [pc, #436]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001de2:	430a      	orrs	r2, r1
 8001de4:	635a      	str	r2, [r3, #52]	; 0x34
 8001de6:	e034      	b.n	8001e52 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	3305      	adds	r3, #5
 8001dee:	d111      	bne.n	8001e14 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001df0:	4b69      	ldr	r3, [pc, #420]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df4:	4b68      	ldr	r3, [pc, #416]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001df6:	2104      	movs	r1, #4
 8001df8:	438a      	bics	r2, r1
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001dfc:	4b66      	ldr	r3, [pc, #408]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e00:	22f8      	movs	r2, #248	; 0xf8
 8001e02:	4393      	bics	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	00da      	lsls	r2, r3, #3
 8001e0c:	4b62      	ldr	r3, [pc, #392]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	635a      	str	r2, [r3, #52]	; 0x34
 8001e12:	e01e      	b.n	8001e52 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e14:	4b60      	ldr	r3, [pc, #384]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e18:	4b5f      	ldr	r3, [pc, #380]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e20:	4b5d      	ldr	r3, [pc, #372]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e24:	4b5c      	ldr	r3, [pc, #368]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001e26:	2101      	movs	r1, #1
 8001e28:	438a      	bics	r2, r1
 8001e2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2c:	f7ff f862 	bl	8000ef4 <HAL_GetTick>
 8001e30:	0003      	movs	r3, r0
 8001e32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e36:	f7ff f85d 	bl	8000ef4 <HAL_GetTick>
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e0a2      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e48:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d1f1      	bne.n	8001e36 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d100      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4e4>
 8001e5a:	e097      	b.n	8001f8c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e5c:	4b4e      	ldr	r3, [pc, #312]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	220c      	movs	r2, #12
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d100      	bne.n	8001e6a <HAL_RCC_OscConfig+0x4f2>
 8001e68:	e06b      	b.n	8001f42 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d14c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	4b49      	ldr	r3, [pc, #292]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4b48      	ldr	r3, [pc, #288]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001e78:	494a      	ldr	r1, [pc, #296]	; (8001fa4 <HAL_RCC_OscConfig+0x62c>)
 8001e7a:	400a      	ands	r2, r1
 8001e7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7ff f839 	bl	8000ef4 <HAL_GetTick>
 8001e82:	0003      	movs	r3, r0
 8001e84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e88:	f7ff f834 	bl	8000ef4 <HAL_GetTick>
 8001e8c:	0002      	movs	r2, r0
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e079      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9a:	4b3f      	ldr	r3, [pc, #252]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	049b      	lsls	r3, r3, #18
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea6:	4b3c      	ldr	r3, [pc, #240]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	220f      	movs	r2, #15
 8001eac:	4393      	bics	r3, r2
 8001eae:	0019      	movs	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb4:	4b38      	ldr	r3, [pc, #224]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001eba:	4b37      	ldr	r3, [pc, #220]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4a3a      	ldr	r2, [pc, #232]	; (8001fa8 <HAL_RCC_OscConfig+0x630>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	4b32      	ldr	r3, [pc, #200]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed4:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001eda:	2180      	movs	r1, #128	; 0x80
 8001edc:	0449      	lsls	r1, r1, #17
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7ff f807 	bl	8000ef4 <HAL_GetTick>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eec:	f7ff f802 	bl	8000ef4 <HAL_GetTick>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e047      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001efe:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	049b      	lsls	r3, r3, #18
 8001f06:	4013      	ands	r3, r2
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x574>
 8001f0a:	e03f      	b.n	8001f8c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0c:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001f12:	4924      	ldr	r1, [pc, #144]	; (8001fa4 <HAL_RCC_OscConfig+0x62c>)
 8001f14:	400a      	ands	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7fe ffec 	bl	8000ef4 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f22:	f7fe ffe7 	bl	8000ef4 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e02c      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f34:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	049b      	lsls	r3, r3, #18
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x5aa>
 8001f40:	e024      	b.n	8001f8c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e01f      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f54:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <HAL_RCC_OscConfig+0x620>)
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	025b      	lsls	r3, r3, #9
 8001f60:	401a      	ands	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d10e      	bne.n	8001f88 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	401a      	ands	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d107      	bne.n	8001f88 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	23f0      	movs	r3, #240	; 0xf0
 8001f7c:	039b      	lsls	r3, r3, #14
 8001f7e:	401a      	ands	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b008      	add	sp, #32
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	00001388 	.word	0x00001388
 8001fa0:	efffffff 	.word	0xefffffff
 8001fa4:	feffffff 	.word	0xfeffffff
 8001fa8:	ffc2ffff 	.word	0xffc2ffff

08001fac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0b3      	b.n	8002128 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b5b      	ldr	r3, [pc, #364]	; (8002130 <HAL_RCC_ClockConfig+0x184>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d911      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b58      	ldr	r3, [pc, #352]	; (8002130 <HAL_RCC_ClockConfig+0x184>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4393      	bics	r3, r2
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	4b55      	ldr	r3, [pc, #340]	; (8002130 <HAL_RCC_ClockConfig+0x184>)
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe0:	4b53      	ldr	r3, [pc, #332]	; (8002130 <HAL_RCC_ClockConfig+0x184>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e09a      	b.n	8002128 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d015      	beq.n	8002028 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2204      	movs	r2, #4
 8002002:	4013      	ands	r3, r2
 8002004:	d006      	beq.n	8002014 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002006:	4b4b      	ldr	r3, [pc, #300]	; (8002134 <HAL_RCC_ClockConfig+0x188>)
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_RCC_ClockConfig+0x188>)
 800200c:	21e0      	movs	r1, #224	; 0xe0
 800200e:	00c9      	lsls	r1, r1, #3
 8002010:	430a      	orrs	r2, r1
 8002012:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002014:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCC_ClockConfig+0x188>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	22f0      	movs	r2, #240	; 0xf0
 800201a:	4393      	bics	r3, r2
 800201c:	0019      	movs	r1, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	4b44      	ldr	r3, [pc, #272]	; (8002134 <HAL_RCC_ClockConfig+0x188>)
 8002024:	430a      	orrs	r2, r1
 8002026:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2201      	movs	r2, #1
 800202e:	4013      	ands	r3, r2
 8002030:	d040      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d107      	bne.n	800204a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203a:	4b3e      	ldr	r3, [pc, #248]	; (8002134 <HAL_RCC_ClockConfig+0x188>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	029b      	lsls	r3, r3, #10
 8002042:	4013      	ands	r3, r2
 8002044:	d114      	bne.n	8002070 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e06e      	b.n	8002128 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d107      	bne.n	8002062 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002052:	4b38      	ldr	r3, [pc, #224]	; (8002134 <HAL_RCC_ClockConfig+0x188>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	049b      	lsls	r3, r3, #18
 800205a:	4013      	ands	r3, r2
 800205c:	d108      	bne.n	8002070 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e062      	b.n	8002128 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002062:	4b34      	ldr	r3, [pc, #208]	; (8002134 <HAL_RCC_ClockConfig+0x188>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2202      	movs	r2, #2
 8002068:	4013      	ands	r3, r2
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e05b      	b.n	8002128 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002070:	4b30      	ldr	r3, [pc, #192]	; (8002134 <HAL_RCC_ClockConfig+0x188>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2203      	movs	r2, #3
 8002076:	4393      	bics	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_RCC_ClockConfig+0x188>)
 8002080:	430a      	orrs	r2, r1
 8002082:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002084:	f7fe ff36 	bl	8000ef4 <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208c:	e009      	b.n	80020a2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208e:	f7fe ff31 	bl	8000ef4 <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	4a27      	ldr	r2, [pc, #156]	; (8002138 <HAL_RCC_ClockConfig+0x18c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e042      	b.n	8002128 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a2:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_RCC_ClockConfig+0x188>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	220c      	movs	r2, #12
 80020a8:	401a      	ands	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d1ec      	bne.n	800208e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020b4:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <HAL_RCC_ClockConfig+0x184>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2201      	movs	r2, #1
 80020ba:	4013      	ands	r3, r2
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d211      	bcs.n	80020e6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <HAL_RCC_ClockConfig+0x184>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4393      	bics	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_RCC_ClockConfig+0x184>)
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d4:	4b16      	ldr	r3, [pc, #88]	; (8002130 <HAL_RCC_ClockConfig+0x184>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2201      	movs	r2, #1
 80020da:	4013      	ands	r3, r2
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e020      	b.n	8002128 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2204      	movs	r2, #4
 80020ec:	4013      	ands	r3, r2
 80020ee:	d009      	beq.n	8002104 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020f0:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_RCC_ClockConfig+0x188>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4a11      	ldr	r2, [pc, #68]	; (800213c <HAL_RCC_ClockConfig+0x190>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	0019      	movs	r1, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <HAL_RCC_ClockConfig+0x188>)
 8002100:	430a      	orrs	r2, r1
 8002102:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002104:	f000 f820 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002108:	0001      	movs	r1, r0
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_RCC_ClockConfig+0x188>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	220f      	movs	r2, #15
 8002112:	4013      	ands	r3, r2
 8002114:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <HAL_RCC_ClockConfig+0x194>)
 8002116:	5cd3      	ldrb	r3, [r2, r3]
 8002118:	000a      	movs	r2, r1
 800211a:	40da      	lsrs	r2, r3
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_RCC_ClockConfig+0x198>)
 800211e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002120:	2000      	movs	r0, #0
 8002122:	f7fe fea1 	bl	8000e68 <HAL_InitTick>
  
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	b004      	add	sp, #16
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40022000 	.word	0x40022000
 8002134:	40021000 	.word	0x40021000
 8002138:	00001388 	.word	0x00001388
 800213c:	fffff8ff 	.word	0xfffff8ff
 8002140:	08003ccc 	.word	0x08003ccc
 8002144:	20000000 	.word	0x20000000

08002148 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b08f      	sub	sp, #60	; 0x3c
 800214c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800214e:	2314      	movs	r3, #20
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	4a2b      	ldr	r2, [pc, #172]	; (8002200 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002154:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002156:	c313      	stmia	r3!, {r0, r1, r4}
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	4a29      	ldr	r2, [pc, #164]	; (8002204 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002160:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002162:	c313      	stmia	r3!, {r0, r1, r4}
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800216c:	2300      	movs	r3, #0
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002170:	2300      	movs	r3, #0
 8002172:	637b      	str	r3, [r7, #52]	; 0x34
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800217c:	4b22      	ldr	r3, [pc, #136]	; (8002208 <HAL_RCC_GetSysClockFreq+0xc0>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002184:	220c      	movs	r2, #12
 8002186:	4013      	ands	r3, r2
 8002188:	2b04      	cmp	r3, #4
 800218a:	d002      	beq.n	8002192 <HAL_RCC_GetSysClockFreq+0x4a>
 800218c:	2b08      	cmp	r3, #8
 800218e:	d003      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x50>
 8002190:	e02d      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002192:	4b1e      	ldr	r3, [pc, #120]	; (800220c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002194:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002196:	e02d      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219a:	0c9b      	lsrs	r3, r3, #18
 800219c:	220f      	movs	r2, #15
 800219e:	4013      	ands	r3, r2
 80021a0:	2214      	movs	r2, #20
 80021a2:	18ba      	adds	r2, r7, r2
 80021a4:	5cd3      	ldrb	r3, [r2, r3]
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	220f      	movs	r2, #15
 80021ae:	4013      	ands	r3, r2
 80021b0:	1d3a      	adds	r2, r7, #4
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	025b      	lsls	r3, r3, #9
 80021bc:	4013      	ands	r3, r2
 80021be:	d009      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021c2:	4812      	ldr	r0, [pc, #72]	; (800220c <HAL_RCC_GetSysClockFreq+0xc4>)
 80021c4:	f7fd ffaa 	bl	800011c <__udivsi3>
 80021c8:	0003      	movs	r3, r0
 80021ca:	001a      	movs	r2, r3
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	4353      	muls	r3, r2
 80021d0:	637b      	str	r3, [r7, #52]	; 0x34
 80021d2:	e009      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021d6:	000a      	movs	r2, r1
 80021d8:	0152      	lsls	r2, r2, #5
 80021da:	1a52      	subs	r2, r2, r1
 80021dc:	0193      	lsls	r3, r2, #6
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	185b      	adds	r3, r3, r1
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80021e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021ec:	e002      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_RCC_GetSysClockFreq+0xc4>)
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021f2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80021f6:	0018      	movs	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b00f      	add	sp, #60	; 0x3c
 80021fc:	bd90      	pop	{r4, r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	08003cac 	.word	0x08003cac
 8002204:	08003cbc 	.word	0x08003cbc
 8002208:	40021000 	.word	0x40021000
 800220c:	007a1200 	.word	0x007a1200

08002210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002214:	4b02      	ldr	r3, [pc, #8]	; (8002220 <HAL_RCC_GetHCLKFreq+0x10>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	20000000 	.word	0x20000000

08002224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002228:	f7ff fff2 	bl	8002210 <HAL_RCC_GetHCLKFreq>
 800222c:	0001      	movs	r1, r0
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	2207      	movs	r2, #7
 8002236:	4013      	ands	r3, r2
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_RCC_GetPCLK1Freq+0x28>)
 800223a:	5cd3      	ldrb	r3, [r2, r3]
 800223c:	40d9      	lsrs	r1, r3
 800223e:	000b      	movs	r3, r1
}    
 8002240:	0018      	movs	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	40021000 	.word	0x40021000
 800224c:	08003cdc 	.word	0x08003cdc

08002250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	025b      	lsls	r3, r3, #9
 8002268:	4013      	ands	r3, r2
 800226a:	d100      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800226c:	e08e      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800226e:	2017      	movs	r0, #23
 8002270:	183b      	adds	r3, r7, r0
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002276:	4b5f      	ldr	r3, [pc, #380]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	055b      	lsls	r3, r3, #21
 800227e:	4013      	ands	r3, r2
 8002280:	d110      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	4b5c      	ldr	r3, [pc, #368]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002284:	69da      	ldr	r2, [r3, #28]
 8002286:	4b5b      	ldr	r3, [pc, #364]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	0549      	lsls	r1, r1, #21
 800228c:	430a      	orrs	r2, r1
 800228e:	61da      	str	r2, [r3, #28]
 8002290:	4b58      	ldr	r3, [pc, #352]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002292:	69da      	ldr	r2, [r3, #28]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	055b      	lsls	r3, r3, #21
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229e:	183b      	adds	r3, r7, r0
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	4b54      	ldr	r3, [pc, #336]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4013      	ands	r3, r2
 80022ae:	d11a      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b0:	4b51      	ldr	r3, [pc, #324]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b50      	ldr	r3, [pc, #320]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	0049      	lsls	r1, r1, #1
 80022ba:	430a      	orrs	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022be:	f7fe fe19 	bl	8000ef4 <HAL_GetTick>
 80022c2:	0003      	movs	r3, r0
 80022c4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	e008      	b.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c8:	f7fe fe14 	bl	8000ef4 <HAL_GetTick>
 80022cc:	0002      	movs	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e087      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022da:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4013      	ands	r3, r2
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022e6:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022e8:	6a1a      	ldr	r2, [r3, #32]
 80022ea:	23c0      	movs	r3, #192	; 0xc0
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4013      	ands	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d034      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	23c0      	movs	r3, #192	; 0xc0
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4013      	ands	r3, r2
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d02c      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002308:	4b3a      	ldr	r3, [pc, #232]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a3b      	ldr	r2, [pc, #236]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800230e:	4013      	ands	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002312:	4b38      	ldr	r3, [pc, #224]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002314:	6a1a      	ldr	r2, [r3, #32]
 8002316:	4b37      	ldr	r3, [pc, #220]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	0249      	lsls	r1, r1, #9
 800231c:	430a      	orrs	r2, r1
 800231e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002320:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002322:	6a1a      	ldr	r2, [r3, #32]
 8002324:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002326:	4936      	ldr	r1, [pc, #216]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002328:	400a      	ands	r2, r1
 800232a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800232c:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	4013      	ands	r3, r2
 8002338:	d013      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7fe fddb 	bl	8000ef4 <HAL_GetTick>
 800233e:	0003      	movs	r3, r0
 8002340:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002342:	e009      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7fe fdd6 	bl	8000ef4 <HAL_GetTick>
 8002348:	0002      	movs	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	4a2d      	ldr	r2, [pc, #180]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e048      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	2202      	movs	r2, #2
 800235e:	4013      	ands	r3, r2
 8002360:	d0f0      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4a25      	ldr	r2, [pc, #148]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002368:	4013      	ands	r3, r2
 800236a:	0019      	movs	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002372:	430a      	orrs	r2, r1
 8002374:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002376:	2317      	movs	r3, #23
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002380:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002386:	4920      	ldr	r1, [pc, #128]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002388:	400a      	ands	r2, r1
 800238a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2201      	movs	r2, #1
 8002392:	4013      	ands	r3, r2
 8002394:	d009      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	2203      	movs	r2, #3
 800239c:	4393      	bics	r3, r2
 800239e:	0019      	movs	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023a6:	430a      	orrs	r2, r1
 80023a8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2220      	movs	r2, #32
 80023b0:	4013      	ands	r3, r2
 80023b2:	d009      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	2210      	movs	r2, #16
 80023ba:	4393      	bics	r3, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023c4:	430a      	orrs	r2, r1
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4013      	ands	r3, r2
 80023d2:	d009      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	2240      	movs	r2, #64	; 0x40
 80023da:	4393      	bics	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023e4:	430a      	orrs	r2, r1
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	0018      	movs	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b006      	add	sp, #24
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40007000 	.word	0x40007000
 80023fc:	fffffcff 	.word	0xfffffcff
 8002400:	fffeffff 	.word	0xfffeffff
 8002404:	00001388 	.word	0x00001388
 8002408:	efffffff 	.word	0xefffffff

0800240c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e044      	b.n	80024a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002422:	2b00      	cmp	r3, #0
 8002424:	d107      	bne.n	8002436 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2274      	movs	r2, #116	; 0x74
 800242a:	2100      	movs	r1, #0
 800242c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	0018      	movs	r0, r3
 8002432:	f7fe fbf1 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2224      	movs	r2, #36	; 0x24
 800243a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2101      	movs	r1, #1
 8002448:	438a      	bics	r2, r1
 800244a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	0018      	movs	r0, r3
 8002450:	f000 fbce 	bl	8002bf0 <UART_SetConfig>
 8002454:	0003      	movs	r3, r0
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e024      	b.n	80024a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	0018      	movs	r0, r3
 800246a:	f000 fd01 	bl	8002e70 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	490d      	ldr	r1, [pc, #52]	; (80024b0 <HAL_UART_Init+0xa4>)
 800247a:	400a      	ands	r2, r1
 800247c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	212a      	movs	r1, #42	; 0x2a
 800248a:	438a      	bics	r2, r1
 800248c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2101      	movs	r1, #1
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	0018      	movs	r0, r3
 80024a2:	f000 fd99 	bl	8002fd8 <UART_CheckIdleState>
 80024a6:	0003      	movs	r3, r0
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b002      	add	sp, #8
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	ffffb7ff 	.word	0xffffb7ff

080024b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	1dbb      	adds	r3, r7, #6
 80024c2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d000      	beq.n	80024ce <HAL_UART_Transmit+0x1a>
 80024cc:	e096      	b.n	80025fc <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_UART_Transmit+0x28>
 80024d4:	1dbb      	adds	r3, r7, #6
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e08e      	b.n	80025fe <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	015b      	lsls	r3, r3, #5
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d109      	bne.n	8002500 <HAL_UART_Transmit+0x4c>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2201      	movs	r2, #1
 80024f8:	4013      	ands	r3, r2
 80024fa:	d001      	beq.n	8002500 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e07e      	b.n	80025fe <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2274      	movs	r2, #116	; 0x74
 8002504:	5c9b      	ldrb	r3, [r3, r2]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_UART_Transmit+0x5a>
 800250a:	2302      	movs	r3, #2
 800250c:	e077      	b.n	80025fe <HAL_UART_Transmit+0x14a>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2274      	movs	r2, #116	; 0x74
 8002512:	2101      	movs	r1, #1
 8002514:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	2100      	movs	r1, #0
 800251c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2221      	movs	r2, #33	; 0x21
 8002522:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002524:	f7fe fce6 	bl	8000ef4 <HAL_GetTick>
 8002528:	0003      	movs	r3, r0
 800252a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1dba      	adds	r2, r7, #6
 8002530:	2150      	movs	r1, #80	; 0x50
 8002532:	8812      	ldrh	r2, [r2, #0]
 8002534:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1dba      	adds	r2, r7, #6
 800253a:	2152      	movs	r1, #82	; 0x52
 800253c:	8812      	ldrh	r2, [r2, #0]
 800253e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	015b      	lsls	r3, r3, #5
 8002548:	429a      	cmp	r2, r3
 800254a:	d108      	bne.n	800255e <HAL_UART_Transmit+0xaa>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002554:	2300      	movs	r3, #0
 8002556:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	e003      	b.n	8002566 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2274      	movs	r2, #116	; 0x74
 800256a:	2100      	movs	r1, #0
 800256c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800256e:	e02d      	b.n	80025cc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	0013      	movs	r3, r2
 800257a:	2200      	movs	r2, #0
 800257c:	2180      	movs	r1, #128	; 0x80
 800257e:	f000 fd73 	bl	8003068 <UART_WaitOnFlagUntilTimeout>
 8002582:	1e03      	subs	r3, r0, #0
 8002584:	d001      	beq.n	800258a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e039      	b.n	80025fe <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10b      	bne.n	80025a8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	881a      	ldrh	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	05d2      	lsls	r2, r2, #23
 800259a:	0dd2      	lsrs	r2, r2, #23
 800259c:	b292      	uxth	r2, r2
 800259e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	3302      	adds	r3, #2
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	e008      	b.n	80025ba <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	b292      	uxth	r2, r2
 80025b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	3301      	adds	r3, #1
 80025b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2252      	movs	r2, #82	; 0x52
 80025be:	5a9b      	ldrh	r3, [r3, r2]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b299      	uxth	r1, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2252      	movs	r2, #82	; 0x52
 80025ca:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2252      	movs	r2, #82	; 0x52
 80025d0:	5a9b      	ldrh	r3, [r3, r2]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1cb      	bne.n	8002570 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	0013      	movs	r3, r2
 80025e2:	2200      	movs	r2, #0
 80025e4:	2140      	movs	r1, #64	; 0x40
 80025e6:	f000 fd3f 	bl	8003068 <UART_WaitOnFlagUntilTimeout>
 80025ea:	1e03      	subs	r3, r0, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e005      	b.n	80025fe <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e000      	b.n	80025fe <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80025fc:	2302      	movs	r3, #2
  }
}
 80025fe:	0018      	movs	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	b008      	add	sp, #32
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b0ab      	sub	sp, #172	; 0xac
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	22a4      	movs	r2, #164	; 0xa4
 8002618:	18b9      	adds	r1, r7, r2
 800261a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	20a0      	movs	r0, #160	; 0xa0
 8002624:	1839      	adds	r1, r7, r0
 8002626:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	219c      	movs	r1, #156	; 0x9c
 8002630:	1879      	adds	r1, r7, r1
 8002632:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002634:	0011      	movs	r1, r2
 8002636:	18bb      	adds	r3, r7, r2
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a99      	ldr	r2, [pc, #612]	; (80028a0 <HAL_UART_IRQHandler+0x298>)
 800263c:	4013      	ands	r3, r2
 800263e:	2298      	movs	r2, #152	; 0x98
 8002640:	18bc      	adds	r4, r7, r2
 8002642:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002644:	18bb      	adds	r3, r7, r2
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d114      	bne.n	8002676 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800264c:	187b      	adds	r3, r7, r1
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2220      	movs	r2, #32
 8002652:	4013      	ands	r3, r2
 8002654:	d00f      	beq.n	8002676 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002656:	183b      	adds	r3, r7, r0
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2220      	movs	r2, #32
 800265c:	4013      	ands	r3, r2
 800265e:	d00a      	beq.n	8002676 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002664:	2b00      	cmp	r3, #0
 8002666:	d100      	bne.n	800266a <HAL_UART_IRQHandler+0x62>
 8002668:	e296      	b.n	8002b98 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	0010      	movs	r0, r2
 8002672:	4798      	blx	r3
      }
      return;
 8002674:	e290      	b.n	8002b98 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002676:	2398      	movs	r3, #152	; 0x98
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d100      	bne.n	8002682 <HAL_UART_IRQHandler+0x7a>
 8002680:	e114      	b.n	80028ac <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002682:	239c      	movs	r3, #156	; 0x9c
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2201      	movs	r2, #1
 800268a:	4013      	ands	r3, r2
 800268c:	d106      	bne.n	800269c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800268e:	23a0      	movs	r3, #160	; 0xa0
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a83      	ldr	r2, [pc, #524]	; (80028a4 <HAL_UART_IRQHandler+0x29c>)
 8002696:	4013      	ands	r3, r2
 8002698:	d100      	bne.n	800269c <HAL_UART_IRQHandler+0x94>
 800269a:	e107      	b.n	80028ac <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800269c:	23a4      	movs	r3, #164	; 0xa4
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2201      	movs	r2, #1
 80026a4:	4013      	ands	r3, r2
 80026a6:	d012      	beq.n	80026ce <HAL_UART_IRQHandler+0xc6>
 80026a8:	23a0      	movs	r3, #160	; 0xa0
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4013      	ands	r3, r2
 80026b4:	d00b      	beq.n	80026ce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2201      	movs	r2, #1
 80026bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	589b      	ldr	r3, [r3, r2]
 80026c4:	2201      	movs	r2, #1
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2180      	movs	r1, #128	; 0x80
 80026cc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026ce:	23a4      	movs	r3, #164	; 0xa4
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2202      	movs	r2, #2
 80026d6:	4013      	ands	r3, r2
 80026d8:	d011      	beq.n	80026fe <HAL_UART_IRQHandler+0xf6>
 80026da:	239c      	movs	r3, #156	; 0x9c
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2201      	movs	r2, #1
 80026e2:	4013      	ands	r3, r2
 80026e4:	d00b      	beq.n	80026fe <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2202      	movs	r2, #2
 80026ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2280      	movs	r2, #128	; 0x80
 80026f2:	589b      	ldr	r3, [r3, r2]
 80026f4:	2204      	movs	r2, #4
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2180      	movs	r1, #128	; 0x80
 80026fc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026fe:	23a4      	movs	r3, #164	; 0xa4
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2204      	movs	r2, #4
 8002706:	4013      	ands	r3, r2
 8002708:	d011      	beq.n	800272e <HAL_UART_IRQHandler+0x126>
 800270a:	239c      	movs	r3, #156	; 0x9c
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2201      	movs	r2, #1
 8002712:	4013      	ands	r3, r2
 8002714:	d00b      	beq.n	800272e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2204      	movs	r2, #4
 800271c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2280      	movs	r2, #128	; 0x80
 8002722:	589b      	ldr	r3, [r3, r2]
 8002724:	2202      	movs	r2, #2
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2180      	movs	r1, #128	; 0x80
 800272c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800272e:	23a4      	movs	r3, #164	; 0xa4
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2208      	movs	r2, #8
 8002736:	4013      	ands	r3, r2
 8002738:	d017      	beq.n	800276a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800273a:	23a0      	movs	r3, #160	; 0xa0
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2220      	movs	r2, #32
 8002742:	4013      	ands	r3, r2
 8002744:	d105      	bne.n	8002752 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002746:	239c      	movs	r3, #156	; 0x9c
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2201      	movs	r2, #1
 800274e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002750:	d00b      	beq.n	800276a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2208      	movs	r2, #8
 8002758:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2280      	movs	r2, #128	; 0x80
 800275e:	589b      	ldr	r3, [r3, r2]
 8002760:	2208      	movs	r2, #8
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2180      	movs	r1, #128	; 0x80
 8002768:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800276a:	23a4      	movs	r3, #164	; 0xa4
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	4013      	ands	r3, r2
 8002776:	d013      	beq.n	80027a0 <HAL_UART_IRQHandler+0x198>
 8002778:	23a0      	movs	r3, #160	; 0xa0
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	04db      	lsls	r3, r3, #19
 8002782:	4013      	ands	r3, r2
 8002784:	d00c      	beq.n	80027a0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2280      	movs	r2, #128	; 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2280      	movs	r2, #128	; 0x80
 8002794:	589b      	ldr	r3, [r3, r2]
 8002796:	2220      	movs	r2, #32
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2180      	movs	r1, #128	; 0x80
 800279e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2280      	movs	r2, #128	; 0x80
 80027a4:	589b      	ldr	r3, [r3, r2]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d100      	bne.n	80027ac <HAL_UART_IRQHandler+0x1a4>
 80027aa:	e1f7      	b.n	8002b9c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80027ac:	23a4      	movs	r3, #164	; 0xa4
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2220      	movs	r2, #32
 80027b4:	4013      	ands	r3, r2
 80027b6:	d00e      	beq.n	80027d6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027b8:	23a0      	movs	r3, #160	; 0xa0
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2220      	movs	r2, #32
 80027c0:	4013      	ands	r3, r2
 80027c2:	d008      	beq.n	80027d6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d004      	beq.n	80027d6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	0010      	movs	r0, r2
 80027d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	589b      	ldr	r3, [r3, r2]
 80027dc:	2194      	movs	r1, #148	; 0x94
 80027de:	187a      	adds	r2, r7, r1
 80027e0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2240      	movs	r2, #64	; 0x40
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b40      	cmp	r3, #64	; 0x40
 80027ee:	d004      	beq.n	80027fa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027f0:	187b      	adds	r3, r7, r1
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2228      	movs	r2, #40	; 0x28
 80027f6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027f8:	d047      	beq.n	800288a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 fcf7 	bl	80031f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2240      	movs	r2, #64	; 0x40
 800280a:	4013      	ands	r3, r2
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	d137      	bne.n	8002880 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002810:	f3ef 8310 	mrs	r3, PRIMASK
 8002814:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002818:	2090      	movs	r0, #144	; 0x90
 800281a:	183a      	adds	r2, r7, r0
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	2301      	movs	r3, #1
 8002820:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002824:	f383 8810 	msr	PRIMASK, r3
}
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2140      	movs	r1, #64	; 0x40
 8002836:	438a      	bics	r2, r1
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	183b      	adds	r3, r7, r0
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002842:	f383 8810 	msr	PRIMASK, r3
}
 8002846:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	2b00      	cmp	r3, #0
 800284e:	d012      	beq.n	8002876 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	4a14      	ldr	r2, [pc, #80]	; (80028a8 <HAL_UART_IRQHandler+0x2a0>)
 8002856:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	0018      	movs	r0, r3
 800285e:	f7fe fcb1 	bl	80011c4 <HAL_DMA_Abort_IT>
 8002862:	1e03      	subs	r3, r0, #0
 8002864:	d01a      	beq.n	800289c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	0018      	movs	r0, r3
 8002872:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002874:	e012      	b.n	800289c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	0018      	movs	r0, r3
 800287a:	f000 f9a5 	bl	8002bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800287e:	e00d      	b.n	800289c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	0018      	movs	r0, r3
 8002884:	f000 f9a0 	bl	8002bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002888:	e008      	b.n	800289c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	0018      	movs	r0, r3
 800288e:	f000 f99b 	bl	8002bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2280      	movs	r2, #128	; 0x80
 8002896:	2100      	movs	r1, #0
 8002898:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800289a:	e17f      	b.n	8002b9c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800289c:	46c0      	nop			; (mov r8, r8)
    return;
 800289e:	e17d      	b.n	8002b9c <HAL_UART_IRQHandler+0x594>
 80028a0:	0000080f 	.word	0x0000080f
 80028a4:	04000120 	.word	0x04000120
 80028a8:	080032b5 	.word	0x080032b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d000      	beq.n	80028b6 <HAL_UART_IRQHandler+0x2ae>
 80028b4:	e131      	b.n	8002b1a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80028b6:	23a4      	movs	r3, #164	; 0xa4
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2210      	movs	r2, #16
 80028be:	4013      	ands	r3, r2
 80028c0:	d100      	bne.n	80028c4 <HAL_UART_IRQHandler+0x2bc>
 80028c2:	e12a      	b.n	8002b1a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028c4:	23a0      	movs	r3, #160	; 0xa0
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2210      	movs	r2, #16
 80028cc:	4013      	ands	r3, r2
 80028ce:	d100      	bne.n	80028d2 <HAL_UART_IRQHandler+0x2ca>
 80028d0:	e123      	b.n	8002b1a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2210      	movs	r2, #16
 80028d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2240      	movs	r2, #64	; 0x40
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b40      	cmp	r3, #64	; 0x40
 80028e6:	d000      	beq.n	80028ea <HAL_UART_IRQHandler+0x2e2>
 80028e8:	e09b      	b.n	8002a22 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	217e      	movs	r1, #126	; 0x7e
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d100      	bne.n	8002902 <HAL_UART_IRQHandler+0x2fa>
 8002900:	e14e      	b.n	8002ba0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2258      	movs	r2, #88	; 0x58
 8002906:	5a9b      	ldrh	r3, [r3, r2]
 8002908:	187a      	adds	r2, r7, r1
 800290a:	8812      	ldrh	r2, [r2, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d300      	bcc.n	8002912 <HAL_UART_IRQHandler+0x30a>
 8002910:	e146      	b.n	8002ba0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	187a      	adds	r2, r7, r1
 8002916:	215a      	movs	r1, #90	; 0x5a
 8002918:	8812      	ldrh	r2, [r2, #0]
 800291a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b20      	cmp	r3, #32
 8002924:	d06e      	beq.n	8002a04 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002926:	f3ef 8310 	mrs	r3, PRIMASK
 800292a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800292e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002930:	2301      	movs	r3, #1
 8002932:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002936:	f383 8810 	msr	PRIMASK, r3
}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	499a      	ldr	r1, [pc, #616]	; (8002bb0 <HAL_UART_IRQHandler+0x5a8>)
 8002948:	400a      	ands	r2, r1
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800294e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002952:	f383 8810 	msr	PRIMASK, r3
}
 8002956:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002958:	f3ef 8310 	mrs	r3, PRIMASK
 800295c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800295e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002960:	677b      	str	r3, [r7, #116]	; 0x74
 8002962:	2301      	movs	r3, #1
 8002964:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002968:	f383 8810 	msr	PRIMASK, r3
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	438a      	bics	r2, r1
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002980:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002984:	f383 8810 	msr	PRIMASK, r3
}
 8002988:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800298a:	f3ef 8310 	mrs	r3, PRIMASK
 800298e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002990:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002992:	673b      	str	r3, [r7, #112]	; 0x70
 8002994:	2301      	movs	r3, #1
 8002996:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800299a:	f383 8810 	msr	PRIMASK, r3
}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2140      	movs	r1, #64	; 0x40
 80029ac:	438a      	bics	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029b6:	f383 8810 	msr	PRIMASK, r3
}
 80029ba:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029c8:	f3ef 8310 	mrs	r3, PRIMASK
 80029cc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80029ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029d2:	2301      	movs	r3, #1
 80029d4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029d8:	f383 8810 	msr	PRIMASK, r3
}
 80029dc:	46c0      	nop			; (mov r8, r8)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2110      	movs	r1, #16
 80029ea:	438a      	bics	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f4:	f383 8810 	msr	PRIMASK, r3
}
 80029f8:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	0018      	movs	r0, r3
 8002a00:	f7fe fba8 	bl	8001154 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2258      	movs	r2, #88	; 0x58
 8002a08:	5a9a      	ldrh	r2, [r3, r2]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	215a      	movs	r1, #90	; 0x5a
 8002a0e:	5a5b      	ldrh	r3, [r3, r1]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	0011      	movs	r1, r2
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 f8dc 	bl	8002bd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a20:	e0be      	b.n	8002ba0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2258      	movs	r2, #88	; 0x58
 8002a26:	5a99      	ldrh	r1, [r3, r2]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	225a      	movs	r2, #90	; 0x5a
 8002a2c:	5a9b      	ldrh	r3, [r3, r2]
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	208e      	movs	r0, #142	; 0x8e
 8002a32:	183b      	adds	r3, r7, r0
 8002a34:	1a8a      	subs	r2, r1, r2
 8002a36:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	225a      	movs	r2, #90	; 0x5a
 8002a3c:	5a9b      	ldrh	r3, [r3, r2]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d100      	bne.n	8002a46 <HAL_UART_IRQHandler+0x43e>
 8002a44:	e0ae      	b.n	8002ba4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8002a46:	183b      	adds	r3, r7, r0
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d100      	bne.n	8002a50 <HAL_UART_IRQHandler+0x448>
 8002a4e:	e0a9      	b.n	8002ba4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a50:	f3ef 8310 	mrs	r3, PRIMASK
 8002a54:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a56:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a58:	2488      	movs	r4, #136	; 0x88
 8002a5a:	193a      	adds	r2, r7, r4
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	2301      	movs	r3, #1
 8002a60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f383 8810 	msr	PRIMASK, r3
}
 8002a68:	46c0      	nop			; (mov r8, r8)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	494f      	ldr	r1, [pc, #316]	; (8002bb4 <HAL_UART_IRQHandler+0x5ac>)
 8002a76:	400a      	ands	r2, r1
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	193b      	adds	r3, r7, r4
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f383 8810 	msr	PRIMASK, r3
}
 8002a86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a88:	f3ef 8310 	mrs	r3, PRIMASK
 8002a8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a8e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a90:	2484      	movs	r4, #132	; 0x84
 8002a92:	193a      	adds	r2, r7, r4
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	2301      	movs	r3, #1
 8002a98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f383 8810 	msr	PRIMASK, r3
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2101      	movs	r1, #1
 8002aae:	438a      	bics	r2, r1
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	f383 8810 	msr	PRIMASK, r3
}
 8002abe:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ada:	2480      	movs	r4, #128	; 0x80
 8002adc:	193a      	adds	r2, r7, r4
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	f383 8810 	msr	PRIMASK, r3
}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2110      	movs	r1, #16
 8002af8:	438a      	bics	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	193b      	adds	r3, r7, r4
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	f383 8810 	msr	PRIMASK, r3
}
 8002b08:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b0a:	183b      	adds	r3, r7, r0
 8002b0c:	881a      	ldrh	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	0011      	movs	r1, r2
 8002b12:	0018      	movs	r0, r3
 8002b14:	f000 f860 	bl	8002bd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b18:	e044      	b.n	8002ba4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b1a:	23a4      	movs	r3, #164	; 0xa4
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	035b      	lsls	r3, r3, #13
 8002b24:	4013      	ands	r3, r2
 8002b26:	d010      	beq.n	8002b4a <HAL_UART_IRQHandler+0x542>
 8002b28:	239c      	movs	r3, #156	; 0x9c
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	03db      	lsls	r3, r3, #15
 8002b32:	4013      	ands	r3, r2
 8002b34:	d009      	beq.n	8002b4a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2280      	movs	r2, #128	; 0x80
 8002b3c:	0352      	lsls	r2, r2, #13
 8002b3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	0018      	movs	r0, r3
 8002b44:	f000 fbf8 	bl	8003338 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b48:	e02f      	b.n	8002baa <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b4a:	23a4      	movs	r3, #164	; 0xa4
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2280      	movs	r2, #128	; 0x80
 8002b52:	4013      	ands	r3, r2
 8002b54:	d00f      	beq.n	8002b76 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b56:	23a0      	movs	r3, #160	; 0xa0
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2280      	movs	r2, #128	; 0x80
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d009      	beq.n	8002b76 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01e      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	0010      	movs	r0, r2
 8002b72:	4798      	blx	r3
    }
    return;
 8002b74:	e018      	b.n	8002ba8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b76:	23a4      	movs	r3, #164	; 0xa4
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2240      	movs	r2, #64	; 0x40
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d013      	beq.n	8002baa <HAL_UART_IRQHandler+0x5a2>
 8002b82:	23a0      	movs	r3, #160	; 0xa0
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2240      	movs	r2, #64	; 0x40
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d00d      	beq.n	8002baa <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f000 fba6 	bl	80032e2 <UART_EndTransmit_IT>
    return;
 8002b96:	e008      	b.n	8002baa <HAL_UART_IRQHandler+0x5a2>
      return;
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	e006      	b.n	8002baa <HAL_UART_IRQHandler+0x5a2>
    return;
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	e004      	b.n	8002baa <HAL_UART_IRQHandler+0x5a2>
      return;
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	e002      	b.n	8002baa <HAL_UART_IRQHandler+0x5a2>
      return;
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	e000      	b.n	8002baa <HAL_UART_IRQHandler+0x5a2>
    return;
 8002ba8:	46c0      	nop			; (mov r8, r8)
  }

}
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b02b      	add	sp, #172	; 0xac
 8002bae:	bd90      	pop	{r4, r7, pc}
 8002bb0:	fffffeff 	.word	0xfffffeff
 8002bb4:	fffffedf 	.word	0xfffffedf

08002bb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b002      	add	sp, #8
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002bd0:	46c0      	nop			; (mov r8, r8)
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b002      	add	sp, #8
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	000a      	movs	r2, r1
 8002be2:	1cbb      	adds	r3, r7, #2
 8002be4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b002      	add	sp, #8
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bf8:	231e      	movs	r3, #30
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a8d      	ldr	r2, [pc, #564]	; (8002e54 <UART_SetConfig+0x264>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	0019      	movs	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a88      	ldr	r2, [pc, #544]	; (8002e58 <UART_SetConfig+0x268>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	0019      	movs	r1, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4a7f      	ldr	r2, [pc, #508]	; (8002e5c <UART_SetConfig+0x26c>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	0019      	movs	r1, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a7b      	ldr	r2, [pc, #492]	; (8002e60 <UART_SetConfig+0x270>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d127      	bne.n	8002cc6 <UART_SetConfig+0xd6>
 8002c76:	4b7b      	ldr	r3, [pc, #492]	; (8002e64 <UART_SetConfig+0x274>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d00d      	beq.n	8002c9e <UART_SetConfig+0xae>
 8002c82:	d81b      	bhi.n	8002cbc <UART_SetConfig+0xcc>
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d014      	beq.n	8002cb2 <UART_SetConfig+0xc2>
 8002c88:	d818      	bhi.n	8002cbc <UART_SetConfig+0xcc>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <UART_SetConfig+0xa4>
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d00a      	beq.n	8002ca8 <UART_SetConfig+0xb8>
 8002c92:	e013      	b.n	8002cbc <UART_SetConfig+0xcc>
 8002c94:	231f      	movs	r3, #31
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	e021      	b.n	8002ce2 <UART_SetConfig+0xf2>
 8002c9e:	231f      	movs	r3, #31
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e01c      	b.n	8002ce2 <UART_SetConfig+0xf2>
 8002ca8:	231f      	movs	r3, #31
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	2204      	movs	r2, #4
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e017      	b.n	8002ce2 <UART_SetConfig+0xf2>
 8002cb2:	231f      	movs	r3, #31
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	701a      	strb	r2, [r3, #0]
 8002cba:	e012      	b.n	8002ce2 <UART_SetConfig+0xf2>
 8002cbc:	231f      	movs	r3, #31
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	701a      	strb	r2, [r3, #0]
 8002cc4:	e00d      	b.n	8002ce2 <UART_SetConfig+0xf2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a67      	ldr	r2, [pc, #412]	; (8002e68 <UART_SetConfig+0x278>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d104      	bne.n	8002cda <UART_SetConfig+0xea>
 8002cd0:	231f      	movs	r3, #31
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	e003      	b.n	8002ce2 <UART_SetConfig+0xf2>
 8002cda:	231f      	movs	r3, #31
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	2210      	movs	r2, #16
 8002ce0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69da      	ldr	r2, [r3, #28]
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d15d      	bne.n	8002daa <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002cee:	231f      	movs	r3, #31
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d015      	beq.n	8002d24 <UART_SetConfig+0x134>
 8002cf8:	dc18      	bgt.n	8002d2c <UART_SetConfig+0x13c>
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d00d      	beq.n	8002d1a <UART_SetConfig+0x12a>
 8002cfe:	dc15      	bgt.n	8002d2c <UART_SetConfig+0x13c>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <UART_SetConfig+0x11a>
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d005      	beq.n	8002d14 <UART_SetConfig+0x124>
 8002d08:	e010      	b.n	8002d2c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d0a:	f7ff fa8b 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	61bb      	str	r3, [r7, #24]
        break;
 8002d12:	e012      	b.n	8002d3a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d14:	4b55      	ldr	r3, [pc, #340]	; (8002e6c <UART_SetConfig+0x27c>)
 8002d16:	61bb      	str	r3, [r7, #24]
        break;
 8002d18:	e00f      	b.n	8002d3a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d1a:	f7ff fa15 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	61bb      	str	r3, [r7, #24]
        break;
 8002d22:	e00a      	b.n	8002d3a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	021b      	lsls	r3, r3, #8
 8002d28:	61bb      	str	r3, [r7, #24]
        break;
 8002d2a:	e006      	b.n	8002d3a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d30:	231e      	movs	r3, #30
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
        break;
 8002d38:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d100      	bne.n	8002d42 <UART_SetConfig+0x152>
 8002d40:	e07b      	b.n	8002e3a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	005a      	lsls	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	18d2      	adds	r2, r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	0019      	movs	r1, r3
 8002d54:	0010      	movs	r0, r2
 8002d56:	f7fd f9e1 	bl	800011c <__udivsi3>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2b0f      	cmp	r3, #15
 8002d64:	d91c      	bls.n	8002da0 <UART_SetConfig+0x1b0>
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	025b      	lsls	r3, r3, #9
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d217      	bcs.n	8002da0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	200e      	movs	r0, #14
 8002d76:	183b      	adds	r3, r7, r0
 8002d78:	210f      	movs	r1, #15
 8002d7a:	438a      	bics	r2, r1
 8002d7c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	085b      	lsrs	r3, r3, #1
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2207      	movs	r2, #7
 8002d86:	4013      	ands	r3, r2
 8002d88:	b299      	uxth	r1, r3
 8002d8a:	183b      	adds	r3, r7, r0
 8002d8c:	183a      	adds	r2, r7, r0
 8002d8e:	8812      	ldrh	r2, [r2, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	183a      	adds	r2, r7, r0
 8002d9a:	8812      	ldrh	r2, [r2, #0]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	e04c      	b.n	8002e3a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002da0:	231e      	movs	r3, #30
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	e047      	b.n	8002e3a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002daa:	231f      	movs	r3, #31
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d015      	beq.n	8002de0 <UART_SetConfig+0x1f0>
 8002db4:	dc18      	bgt.n	8002de8 <UART_SetConfig+0x1f8>
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d00d      	beq.n	8002dd6 <UART_SetConfig+0x1e6>
 8002dba:	dc15      	bgt.n	8002de8 <UART_SetConfig+0x1f8>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <UART_SetConfig+0x1d6>
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d005      	beq.n	8002dd0 <UART_SetConfig+0x1e0>
 8002dc4:	e010      	b.n	8002de8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dc6:	f7ff fa2d 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	61bb      	str	r3, [r7, #24]
        break;
 8002dce:	e012      	b.n	8002df6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dd0:	4b26      	ldr	r3, [pc, #152]	; (8002e6c <UART_SetConfig+0x27c>)
 8002dd2:	61bb      	str	r3, [r7, #24]
        break;
 8002dd4:	e00f      	b.n	8002df6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dd6:	f7ff f9b7 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	61bb      	str	r3, [r7, #24]
        break;
 8002dde:	e00a      	b.n	8002df6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	61bb      	str	r3, [r7, #24]
        break;
 8002de6:	e006      	b.n	8002df6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dec:	231e      	movs	r3, #30
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	2201      	movs	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]
        break;
 8002df4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01e      	beq.n	8002e3a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	085a      	lsrs	r2, r3, #1
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	18d2      	adds	r2, r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	0010      	movs	r0, r2
 8002e0e:	f7fd f985 	bl	800011c <__udivsi3>
 8002e12:	0003      	movs	r3, r0
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	2b0f      	cmp	r3, #15
 8002e1c:	d909      	bls.n	8002e32 <UART_SetConfig+0x242>
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	025b      	lsls	r3, r3, #9
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d204      	bcs.n	8002e32 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	60da      	str	r2, [r3, #12]
 8002e30:	e003      	b.n	8002e3a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002e32:	231e      	movs	r3, #30
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	2201      	movs	r2, #1
 8002e38:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e46:	231e      	movs	r3, #30
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	781b      	ldrb	r3, [r3, #0]
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b008      	add	sp, #32
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	ffff69f3 	.word	0xffff69f3
 8002e58:	ffffcfff 	.word	0xffffcfff
 8002e5c:	fffff4ff 	.word	0xfffff4ff
 8002e60:	40013800 	.word	0x40013800
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40004400 	.word	0x40004400
 8002e6c:	007a1200 	.word	0x007a1200

08002e70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d00b      	beq.n	8002e9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4a4a      	ldr	r2, [pc, #296]	; (8002fb4 <UART_AdvFeatureConfig+0x144>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d00b      	beq.n	8002ebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	4a43      	ldr	r2, [pc, #268]	; (8002fb8 <UART_AdvFeatureConfig+0x148>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	0019      	movs	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d00b      	beq.n	8002ede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a3b      	ldr	r2, [pc, #236]	; (8002fbc <UART_AdvFeatureConfig+0x14c>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d00b      	beq.n	8002f00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4a34      	ldr	r2, [pc, #208]	; (8002fc0 <UART_AdvFeatureConfig+0x150>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	2210      	movs	r2, #16
 8002f06:	4013      	ands	r3, r2
 8002f08:	d00b      	beq.n	8002f22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4a2c      	ldr	r2, [pc, #176]	; (8002fc4 <UART_AdvFeatureConfig+0x154>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	2220      	movs	r2, #32
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d00b      	beq.n	8002f44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	4a25      	ldr	r2, [pc, #148]	; (8002fc8 <UART_AdvFeatureConfig+0x158>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	0019      	movs	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	2240      	movs	r2, #64	; 0x40
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d01d      	beq.n	8002f8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4a1d      	ldr	r2, [pc, #116]	; (8002fcc <UART_AdvFeatureConfig+0x15c>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	0019      	movs	r1, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	035b      	lsls	r3, r3, #13
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d10b      	bne.n	8002f8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4a15      	ldr	r2, [pc, #84]	; (8002fd0 <UART_AdvFeatureConfig+0x160>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	2280      	movs	r2, #128	; 0x80
 8002f90:	4013      	ands	r3, r2
 8002f92:	d00b      	beq.n	8002fac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <UART_AdvFeatureConfig+0x164>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	0019      	movs	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	605a      	str	r2, [r3, #4]
  }
}
 8002fac:	46c0      	nop			; (mov r8, r8)
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b002      	add	sp, #8
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	fffdffff 	.word	0xfffdffff
 8002fb8:	fffeffff 	.word	0xfffeffff
 8002fbc:	fffbffff 	.word	0xfffbffff
 8002fc0:	ffff7fff 	.word	0xffff7fff
 8002fc4:	ffffefff 	.word	0xffffefff
 8002fc8:	ffffdfff 	.word	0xffffdfff
 8002fcc:	ffefffff 	.word	0xffefffff
 8002fd0:	ff9fffff 	.word	0xff9fffff
 8002fd4:	fff7ffff 	.word	0xfff7ffff

08002fd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fe8:	f7fd ff84 	bl	8000ef4 <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2208      	movs	r2, #8
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d10c      	bne.n	8003018 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	0391      	lsls	r1, r2, #14
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4a17      	ldr	r2, [pc, #92]	; (8003064 <UART_CheckIdleState+0x8c>)
 8003008:	9200      	str	r2, [sp, #0]
 800300a:	2200      	movs	r2, #0
 800300c:	f000 f82c 	bl	8003068 <UART_WaitOnFlagUntilTimeout>
 8003010:	1e03      	subs	r3, r0, #0
 8003012:	d001      	beq.n	8003018 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e021      	b.n	800305c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2204      	movs	r2, #4
 8003020:	4013      	ands	r3, r2
 8003022:	2b04      	cmp	r3, #4
 8003024:	d10c      	bne.n	8003040 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2280      	movs	r2, #128	; 0x80
 800302a:	03d1      	lsls	r1, r2, #15
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4a0d      	ldr	r2, [pc, #52]	; (8003064 <UART_CheckIdleState+0x8c>)
 8003030:	9200      	str	r2, [sp, #0]
 8003032:	2200      	movs	r2, #0
 8003034:	f000 f818 	bl	8003068 <UART_WaitOnFlagUntilTimeout>
 8003038:	1e03      	subs	r3, r0, #0
 800303a:	d001      	beq.n	8003040 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e00d      	b.n	800305c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2220      	movs	r2, #32
 800304a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2274      	movs	r2, #116	; 0x74
 8003056:	2100      	movs	r1, #0
 8003058:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b004      	add	sp, #16
 8003062:	bd80      	pop	{r7, pc}
 8003064:	01ffffff 	.word	0x01ffffff

08003068 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b094      	sub	sp, #80	; 0x50
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	1dfb      	adds	r3, r7, #7
 8003076:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003078:	e0a3      	b.n	80031c2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800307c:	3301      	adds	r3, #1
 800307e:	d100      	bne.n	8003082 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003080:	e09f      	b.n	80031c2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003082:	f7fd ff37 	bl	8000ef4 <HAL_GetTick>
 8003086:	0002      	movs	r2, r0
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800308e:	429a      	cmp	r2, r3
 8003090:	d302      	bcc.n	8003098 <UART_WaitOnFlagUntilTimeout+0x30>
 8003092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003094:	2b00      	cmp	r3, #0
 8003096:	d13d      	bne.n	8003114 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003098:	f3ef 8310 	mrs	r3, PRIMASK
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030a0:	647b      	str	r3, [r7, #68]	; 0x44
 80030a2:	2301      	movs	r3, #1
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	f383 8810 	msr	PRIMASK, r3
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	494c      	ldr	r1, [pc, #304]	; (80031ec <UART_WaitOnFlagUntilTimeout+0x184>)
 80030ba:	400a      	ands	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030c0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	f383 8810 	msr	PRIMASK, r3
}
 80030c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ca:	f3ef 8310 	mrs	r3, PRIMASK
 80030ce:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80030d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d2:	643b      	str	r3, [r7, #64]	; 0x40
 80030d4:	2301      	movs	r3, #1
 80030d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030da:	f383 8810 	msr	PRIMASK, r3
}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2101      	movs	r1, #1
 80030ec:	438a      	bics	r2, r1
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f6:	f383 8810 	msr	PRIMASK, r3
}
 80030fa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2274      	movs	r2, #116	; 0x74
 800310c:	2100      	movs	r1, #0
 800310e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e067      	b.n	80031e4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2204      	movs	r2, #4
 800311c:	4013      	ands	r3, r2
 800311e:	d050      	beq.n	80031c2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	401a      	ands	r2, r3
 800312c:	2380      	movs	r3, #128	; 0x80
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	429a      	cmp	r2, r3
 8003132:	d146      	bne.n	80031c2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800313e:	f3ef 8310 	mrs	r3, PRIMASK
 8003142:	613b      	str	r3, [r7, #16]
  return(result);
 8003144:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003148:	2301      	movs	r3, #1
 800314a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f383 8810 	msr	PRIMASK, r3
}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4923      	ldr	r1, [pc, #140]	; (80031ec <UART_WaitOnFlagUntilTimeout+0x184>)
 8003160:	400a      	ands	r2, r1
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003166:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	f383 8810 	msr	PRIMASK, r3
}
 800316e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003170:	f3ef 8310 	mrs	r3, PRIMASK
 8003174:	61fb      	str	r3, [r7, #28]
  return(result);
 8003176:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003178:	64bb      	str	r3, [r7, #72]	; 0x48
 800317a:	2301      	movs	r3, #1
 800317c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	f383 8810 	msr	PRIMASK, r3
}
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2101      	movs	r1, #1
 8003192:	438a      	bics	r2, r1
 8003194:	609a      	str	r2, [r3, #8]
 8003196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	f383 8810 	msr	PRIMASK, r3
}
 80031a0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2280      	movs	r2, #128	; 0x80
 80031b2:	2120      	movs	r1, #32
 80031b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2274      	movs	r2, #116	; 0x74
 80031ba:	2100      	movs	r1, #0
 80031bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e010      	b.n	80031e4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	4013      	ands	r3, r2
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	425a      	negs	r2, r3
 80031d2:	4153      	adcs	r3, r2
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	001a      	movs	r2, r3
 80031d8:	1dfb      	adds	r3, r7, #7
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d100      	bne.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80031e0:	e74b      	b.n	800307a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	0018      	movs	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b014      	add	sp, #80	; 0x50
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	fffffe5f 	.word	0xfffffe5f

080031f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08e      	sub	sp, #56	; 0x38
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031f8:	f3ef 8310 	mrs	r3, PRIMASK
 80031fc:	617b      	str	r3, [r7, #20]
  return(result);
 80031fe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
 8003202:	2301      	movs	r3, #1
 8003204:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	f383 8810 	msr	PRIMASK, r3
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4925      	ldr	r1, [pc, #148]	; (80032b0 <UART_EndRxTransfer+0xc0>)
 800321a:	400a      	ands	r2, r1
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003220:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f383 8810 	msr	PRIMASK, r3
}
 8003228:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322a:	f3ef 8310 	mrs	r3, PRIMASK
 800322e:	623b      	str	r3, [r7, #32]
  return(result);
 8003230:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003232:	633b      	str	r3, [r7, #48]	; 0x30
 8003234:	2301      	movs	r3, #1
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	f383 8810 	msr	PRIMASK, r3
}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2101      	movs	r1, #1
 800324c:	438a      	bics	r2, r1
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	f383 8810 	msr	PRIMASK, r3
}
 800325a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003260:	2b01      	cmp	r3, #1
 8003262:	d118      	bne.n	8003296 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003264:	f3ef 8310 	mrs	r3, PRIMASK
 8003268:	60bb      	str	r3, [r7, #8]
  return(result);
 800326a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800326c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800326e:	2301      	movs	r3, #1
 8003270:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f383 8810 	msr	PRIMASK, r3
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2110      	movs	r1, #16
 8003286:	438a      	bics	r2, r1
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f383 8810 	msr	PRIMASK, r3
}
 8003294:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b00e      	add	sp, #56	; 0x38
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	fffffedf 	.word	0xfffffedf

080032b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	225a      	movs	r2, #90	; 0x5a
 80032c6:	2100      	movs	r1, #0
 80032c8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2252      	movs	r2, #82	; 0x52
 80032ce:	2100      	movs	r1, #0
 80032d0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	0018      	movs	r0, r3
 80032d6:	f7ff fc77 	bl	8002bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	b004      	add	sp, #16
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b086      	sub	sp, #24
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ea:	f3ef 8310 	mrs	r3, PRIMASK
 80032ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80032f0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	2301      	movs	r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f383 8810 	msr	PRIMASK, r3
}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2140      	movs	r1, #64	; 0x40
 800330c:	438a      	bics	r2, r1
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f383 8810 	msr	PRIMASK, r3
}
 800331a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	0018      	movs	r0, r3
 800332c:	f7ff fc44 	bl	8002bb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	b006      	add	sp, #24
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b002      	add	sp, #8
 8003346:	bd80      	pop	{r7, pc}

08003348 <__errno>:
 8003348:	4b01      	ldr	r3, [pc, #4]	; (8003350 <__errno+0x8>)
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	4770      	bx	lr
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	2000000c 	.word	0x2000000c

08003354 <__libc_init_array>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	2600      	movs	r6, #0
 8003358:	4d0c      	ldr	r5, [pc, #48]	; (800338c <__libc_init_array+0x38>)
 800335a:	4c0d      	ldr	r4, [pc, #52]	; (8003390 <__libc_init_array+0x3c>)
 800335c:	1b64      	subs	r4, r4, r5
 800335e:	10a4      	asrs	r4, r4, #2
 8003360:	42a6      	cmp	r6, r4
 8003362:	d109      	bne.n	8003378 <__libc_init_array+0x24>
 8003364:	2600      	movs	r6, #0
 8003366:	f000 fc8b 	bl	8003c80 <_init>
 800336a:	4d0a      	ldr	r5, [pc, #40]	; (8003394 <__libc_init_array+0x40>)
 800336c:	4c0a      	ldr	r4, [pc, #40]	; (8003398 <__libc_init_array+0x44>)
 800336e:	1b64      	subs	r4, r4, r5
 8003370:	10a4      	asrs	r4, r4, #2
 8003372:	42a6      	cmp	r6, r4
 8003374:	d105      	bne.n	8003382 <__libc_init_array+0x2e>
 8003376:	bd70      	pop	{r4, r5, r6, pc}
 8003378:	00b3      	lsls	r3, r6, #2
 800337a:	58eb      	ldr	r3, [r5, r3]
 800337c:	4798      	blx	r3
 800337e:	3601      	adds	r6, #1
 8003380:	e7ee      	b.n	8003360 <__libc_init_array+0xc>
 8003382:	00b3      	lsls	r3, r6, #2
 8003384:	58eb      	ldr	r3, [r5, r3]
 8003386:	4798      	blx	r3
 8003388:	3601      	adds	r6, #1
 800338a:	e7f2      	b.n	8003372 <__libc_init_array+0x1e>
 800338c:	08003d78 	.word	0x08003d78
 8003390:	08003d78 	.word	0x08003d78
 8003394:	08003d78 	.word	0x08003d78
 8003398:	08003d7c 	.word	0x08003d7c

0800339c <memset>:
 800339c:	0003      	movs	r3, r0
 800339e:	1882      	adds	r2, r0, r2
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d100      	bne.n	80033a6 <memset+0xa>
 80033a4:	4770      	bx	lr
 80033a6:	7019      	strb	r1, [r3, #0]
 80033a8:	3301      	adds	r3, #1
 80033aa:	e7f9      	b.n	80033a0 <memset+0x4>

080033ac <siprintf>:
 80033ac:	b40e      	push	{r1, r2, r3}
 80033ae:	b500      	push	{lr}
 80033b0:	490b      	ldr	r1, [pc, #44]	; (80033e0 <siprintf+0x34>)
 80033b2:	b09c      	sub	sp, #112	; 0x70
 80033b4:	ab1d      	add	r3, sp, #116	; 0x74
 80033b6:	9002      	str	r0, [sp, #8]
 80033b8:	9006      	str	r0, [sp, #24]
 80033ba:	9107      	str	r1, [sp, #28]
 80033bc:	9104      	str	r1, [sp, #16]
 80033be:	4809      	ldr	r0, [pc, #36]	; (80033e4 <siprintf+0x38>)
 80033c0:	4909      	ldr	r1, [pc, #36]	; (80033e8 <siprintf+0x3c>)
 80033c2:	cb04      	ldmia	r3!, {r2}
 80033c4:	9105      	str	r1, [sp, #20]
 80033c6:	6800      	ldr	r0, [r0, #0]
 80033c8:	a902      	add	r1, sp, #8
 80033ca:	9301      	str	r3, [sp, #4]
 80033cc:	f000 f90a 	bl	80035e4 <_svfiprintf_r>
 80033d0:	2300      	movs	r3, #0
 80033d2:	9a02      	ldr	r2, [sp, #8]
 80033d4:	7013      	strb	r3, [r2, #0]
 80033d6:	b01c      	add	sp, #112	; 0x70
 80033d8:	bc08      	pop	{r3}
 80033da:	b003      	add	sp, #12
 80033dc:	4718      	bx	r3
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	7fffffff 	.word	0x7fffffff
 80033e4:	2000000c 	.word	0x2000000c
 80033e8:	ffff0208 	.word	0xffff0208

080033ec <__retarget_lock_acquire_recursive>:
 80033ec:	4770      	bx	lr

080033ee <__retarget_lock_release_recursive>:
 80033ee:	4770      	bx	lr

080033f0 <sbrk_aligned>:
 80033f0:	b570      	push	{r4, r5, r6, lr}
 80033f2:	4e0f      	ldr	r6, [pc, #60]	; (8003430 <sbrk_aligned+0x40>)
 80033f4:	000d      	movs	r5, r1
 80033f6:	6831      	ldr	r1, [r6, #0]
 80033f8:	0004      	movs	r4, r0
 80033fa:	2900      	cmp	r1, #0
 80033fc:	d102      	bne.n	8003404 <sbrk_aligned+0x14>
 80033fe:	f000 fb73 	bl	8003ae8 <_sbrk_r>
 8003402:	6030      	str	r0, [r6, #0]
 8003404:	0029      	movs	r1, r5
 8003406:	0020      	movs	r0, r4
 8003408:	f000 fb6e 	bl	8003ae8 <_sbrk_r>
 800340c:	1c43      	adds	r3, r0, #1
 800340e:	d00a      	beq.n	8003426 <sbrk_aligned+0x36>
 8003410:	2303      	movs	r3, #3
 8003412:	1cc5      	adds	r5, r0, #3
 8003414:	439d      	bics	r5, r3
 8003416:	42a8      	cmp	r0, r5
 8003418:	d007      	beq.n	800342a <sbrk_aligned+0x3a>
 800341a:	1a29      	subs	r1, r5, r0
 800341c:	0020      	movs	r0, r4
 800341e:	f000 fb63 	bl	8003ae8 <_sbrk_r>
 8003422:	1c43      	adds	r3, r0, #1
 8003424:	d101      	bne.n	800342a <sbrk_aligned+0x3a>
 8003426:	2501      	movs	r5, #1
 8003428:	426d      	negs	r5, r5
 800342a:	0028      	movs	r0, r5
 800342c:	bd70      	pop	{r4, r5, r6, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	200001c0 	.word	0x200001c0

08003434 <_malloc_r>:
 8003434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003436:	2203      	movs	r2, #3
 8003438:	1ccb      	adds	r3, r1, #3
 800343a:	4393      	bics	r3, r2
 800343c:	3308      	adds	r3, #8
 800343e:	0006      	movs	r6, r0
 8003440:	001f      	movs	r7, r3
 8003442:	2b0c      	cmp	r3, #12
 8003444:	d232      	bcs.n	80034ac <_malloc_r+0x78>
 8003446:	270c      	movs	r7, #12
 8003448:	42b9      	cmp	r1, r7
 800344a:	d831      	bhi.n	80034b0 <_malloc_r+0x7c>
 800344c:	0030      	movs	r0, r6
 800344e:	f000 fb85 	bl	8003b5c <__malloc_lock>
 8003452:	4d32      	ldr	r5, [pc, #200]	; (800351c <_malloc_r+0xe8>)
 8003454:	682b      	ldr	r3, [r5, #0]
 8003456:	001c      	movs	r4, r3
 8003458:	2c00      	cmp	r4, #0
 800345a:	d12e      	bne.n	80034ba <_malloc_r+0x86>
 800345c:	0039      	movs	r1, r7
 800345e:	0030      	movs	r0, r6
 8003460:	f7ff ffc6 	bl	80033f0 <sbrk_aligned>
 8003464:	0004      	movs	r4, r0
 8003466:	1c43      	adds	r3, r0, #1
 8003468:	d11e      	bne.n	80034a8 <_malloc_r+0x74>
 800346a:	682c      	ldr	r4, [r5, #0]
 800346c:	0025      	movs	r5, r4
 800346e:	2d00      	cmp	r5, #0
 8003470:	d14a      	bne.n	8003508 <_malloc_r+0xd4>
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	0029      	movs	r1, r5
 8003476:	18e3      	adds	r3, r4, r3
 8003478:	0030      	movs	r0, r6
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	f000 fb34 	bl	8003ae8 <_sbrk_r>
 8003480:	9b01      	ldr	r3, [sp, #4]
 8003482:	4283      	cmp	r3, r0
 8003484:	d143      	bne.n	800350e <_malloc_r+0xda>
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	3703      	adds	r7, #3
 800348a:	1aff      	subs	r7, r7, r3
 800348c:	2303      	movs	r3, #3
 800348e:	439f      	bics	r7, r3
 8003490:	3708      	adds	r7, #8
 8003492:	2f0c      	cmp	r7, #12
 8003494:	d200      	bcs.n	8003498 <_malloc_r+0x64>
 8003496:	270c      	movs	r7, #12
 8003498:	0039      	movs	r1, r7
 800349a:	0030      	movs	r0, r6
 800349c:	f7ff ffa8 	bl	80033f0 <sbrk_aligned>
 80034a0:	1c43      	adds	r3, r0, #1
 80034a2:	d034      	beq.n	800350e <_malloc_r+0xda>
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	19df      	adds	r7, r3, r7
 80034a8:	6027      	str	r7, [r4, #0]
 80034aa:	e013      	b.n	80034d4 <_malloc_r+0xa0>
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	dacb      	bge.n	8003448 <_malloc_r+0x14>
 80034b0:	230c      	movs	r3, #12
 80034b2:	2500      	movs	r5, #0
 80034b4:	6033      	str	r3, [r6, #0]
 80034b6:	0028      	movs	r0, r5
 80034b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034ba:	6822      	ldr	r2, [r4, #0]
 80034bc:	1bd1      	subs	r1, r2, r7
 80034be:	d420      	bmi.n	8003502 <_malloc_r+0xce>
 80034c0:	290b      	cmp	r1, #11
 80034c2:	d917      	bls.n	80034f4 <_malloc_r+0xc0>
 80034c4:	19e2      	adds	r2, r4, r7
 80034c6:	6027      	str	r7, [r4, #0]
 80034c8:	42a3      	cmp	r3, r4
 80034ca:	d111      	bne.n	80034f0 <_malloc_r+0xbc>
 80034cc:	602a      	str	r2, [r5, #0]
 80034ce:	6863      	ldr	r3, [r4, #4]
 80034d0:	6011      	str	r1, [r2, #0]
 80034d2:	6053      	str	r3, [r2, #4]
 80034d4:	0030      	movs	r0, r6
 80034d6:	0025      	movs	r5, r4
 80034d8:	f000 fb48 	bl	8003b6c <__malloc_unlock>
 80034dc:	2207      	movs	r2, #7
 80034de:	350b      	adds	r5, #11
 80034e0:	1d23      	adds	r3, r4, #4
 80034e2:	4395      	bics	r5, r2
 80034e4:	1aea      	subs	r2, r5, r3
 80034e6:	429d      	cmp	r5, r3
 80034e8:	d0e5      	beq.n	80034b6 <_malloc_r+0x82>
 80034ea:	1b5b      	subs	r3, r3, r5
 80034ec:	50a3      	str	r3, [r4, r2]
 80034ee:	e7e2      	b.n	80034b6 <_malloc_r+0x82>
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	e7ec      	b.n	80034ce <_malloc_r+0x9a>
 80034f4:	6862      	ldr	r2, [r4, #4]
 80034f6:	42a3      	cmp	r3, r4
 80034f8:	d101      	bne.n	80034fe <_malloc_r+0xca>
 80034fa:	602a      	str	r2, [r5, #0]
 80034fc:	e7ea      	b.n	80034d4 <_malloc_r+0xa0>
 80034fe:	605a      	str	r2, [r3, #4]
 8003500:	e7e8      	b.n	80034d4 <_malloc_r+0xa0>
 8003502:	0023      	movs	r3, r4
 8003504:	6864      	ldr	r4, [r4, #4]
 8003506:	e7a7      	b.n	8003458 <_malloc_r+0x24>
 8003508:	002c      	movs	r4, r5
 800350a:	686d      	ldr	r5, [r5, #4]
 800350c:	e7af      	b.n	800346e <_malloc_r+0x3a>
 800350e:	230c      	movs	r3, #12
 8003510:	0030      	movs	r0, r6
 8003512:	6033      	str	r3, [r6, #0]
 8003514:	f000 fb2a 	bl	8003b6c <__malloc_unlock>
 8003518:	e7cd      	b.n	80034b6 <_malloc_r+0x82>
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	200001bc 	.word	0x200001bc

08003520 <__ssputs_r>:
 8003520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003522:	688e      	ldr	r6, [r1, #8]
 8003524:	b085      	sub	sp, #20
 8003526:	0007      	movs	r7, r0
 8003528:	000c      	movs	r4, r1
 800352a:	9203      	str	r2, [sp, #12]
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	429e      	cmp	r6, r3
 8003530:	d83c      	bhi.n	80035ac <__ssputs_r+0x8c>
 8003532:	2390      	movs	r3, #144	; 0x90
 8003534:	898a      	ldrh	r2, [r1, #12]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	421a      	tst	r2, r3
 800353a:	d034      	beq.n	80035a6 <__ssputs_r+0x86>
 800353c:	6909      	ldr	r1, [r1, #16]
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	6960      	ldr	r0, [r4, #20]
 8003542:	1a5b      	subs	r3, r3, r1
 8003544:	9302      	str	r3, [sp, #8]
 8003546:	2303      	movs	r3, #3
 8003548:	4343      	muls	r3, r0
 800354a:	0fdd      	lsrs	r5, r3, #31
 800354c:	18ed      	adds	r5, r5, r3
 800354e:	9b01      	ldr	r3, [sp, #4]
 8003550:	9802      	ldr	r0, [sp, #8]
 8003552:	3301      	adds	r3, #1
 8003554:	181b      	adds	r3, r3, r0
 8003556:	106d      	asrs	r5, r5, #1
 8003558:	42ab      	cmp	r3, r5
 800355a:	d900      	bls.n	800355e <__ssputs_r+0x3e>
 800355c:	001d      	movs	r5, r3
 800355e:	0553      	lsls	r3, r2, #21
 8003560:	d532      	bpl.n	80035c8 <__ssputs_r+0xa8>
 8003562:	0029      	movs	r1, r5
 8003564:	0038      	movs	r0, r7
 8003566:	f7ff ff65 	bl	8003434 <_malloc_r>
 800356a:	1e06      	subs	r6, r0, #0
 800356c:	d109      	bne.n	8003582 <__ssputs_r+0x62>
 800356e:	230c      	movs	r3, #12
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	2340      	movs	r3, #64	; 0x40
 8003574:	2001      	movs	r0, #1
 8003576:	89a2      	ldrh	r2, [r4, #12]
 8003578:	4240      	negs	r0, r0
 800357a:	4313      	orrs	r3, r2
 800357c:	81a3      	strh	r3, [r4, #12]
 800357e:	b005      	add	sp, #20
 8003580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003582:	9a02      	ldr	r2, [sp, #8]
 8003584:	6921      	ldr	r1, [r4, #16]
 8003586:	f000 facc 	bl	8003b22 <memcpy>
 800358a:	89a3      	ldrh	r3, [r4, #12]
 800358c:	4a14      	ldr	r2, [pc, #80]	; (80035e0 <__ssputs_r+0xc0>)
 800358e:	401a      	ands	r2, r3
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	4313      	orrs	r3, r2
 8003594:	81a3      	strh	r3, [r4, #12]
 8003596:	9b02      	ldr	r3, [sp, #8]
 8003598:	6126      	str	r6, [r4, #16]
 800359a:	18f6      	adds	r6, r6, r3
 800359c:	6026      	str	r6, [r4, #0]
 800359e:	6165      	str	r5, [r4, #20]
 80035a0:	9e01      	ldr	r6, [sp, #4]
 80035a2:	1aed      	subs	r5, r5, r3
 80035a4:	60a5      	str	r5, [r4, #8]
 80035a6:	9b01      	ldr	r3, [sp, #4]
 80035a8:	429e      	cmp	r6, r3
 80035aa:	d900      	bls.n	80035ae <__ssputs_r+0x8e>
 80035ac:	9e01      	ldr	r6, [sp, #4]
 80035ae:	0032      	movs	r2, r6
 80035b0:	9903      	ldr	r1, [sp, #12]
 80035b2:	6820      	ldr	r0, [r4, #0]
 80035b4:	f000 fabe 	bl	8003b34 <memmove>
 80035b8:	68a3      	ldr	r3, [r4, #8]
 80035ba:	2000      	movs	r0, #0
 80035bc:	1b9b      	subs	r3, r3, r6
 80035be:	60a3      	str	r3, [r4, #8]
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	199e      	adds	r6, r3, r6
 80035c4:	6026      	str	r6, [r4, #0]
 80035c6:	e7da      	b.n	800357e <__ssputs_r+0x5e>
 80035c8:	002a      	movs	r2, r5
 80035ca:	0038      	movs	r0, r7
 80035cc:	f000 fb20 	bl	8003c10 <_realloc_r>
 80035d0:	1e06      	subs	r6, r0, #0
 80035d2:	d1e0      	bne.n	8003596 <__ssputs_r+0x76>
 80035d4:	0038      	movs	r0, r7
 80035d6:	6921      	ldr	r1, [r4, #16]
 80035d8:	f000 fad0 	bl	8003b7c <_free_r>
 80035dc:	e7c7      	b.n	800356e <__ssputs_r+0x4e>
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	fffffb7f 	.word	0xfffffb7f

080035e4 <_svfiprintf_r>:
 80035e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e6:	b0a1      	sub	sp, #132	; 0x84
 80035e8:	9003      	str	r0, [sp, #12]
 80035ea:	001d      	movs	r5, r3
 80035ec:	898b      	ldrh	r3, [r1, #12]
 80035ee:	000f      	movs	r7, r1
 80035f0:	0016      	movs	r6, r2
 80035f2:	061b      	lsls	r3, r3, #24
 80035f4:	d511      	bpl.n	800361a <_svfiprintf_r+0x36>
 80035f6:	690b      	ldr	r3, [r1, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10e      	bne.n	800361a <_svfiprintf_r+0x36>
 80035fc:	2140      	movs	r1, #64	; 0x40
 80035fe:	f7ff ff19 	bl	8003434 <_malloc_r>
 8003602:	6038      	str	r0, [r7, #0]
 8003604:	6138      	str	r0, [r7, #16]
 8003606:	2800      	cmp	r0, #0
 8003608:	d105      	bne.n	8003616 <_svfiprintf_r+0x32>
 800360a:	230c      	movs	r3, #12
 800360c:	9a03      	ldr	r2, [sp, #12]
 800360e:	3801      	subs	r0, #1
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	b021      	add	sp, #132	; 0x84
 8003614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003616:	2340      	movs	r3, #64	; 0x40
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	2300      	movs	r3, #0
 800361c:	ac08      	add	r4, sp, #32
 800361e:	6163      	str	r3, [r4, #20]
 8003620:	3320      	adds	r3, #32
 8003622:	7663      	strb	r3, [r4, #25]
 8003624:	3310      	adds	r3, #16
 8003626:	76a3      	strb	r3, [r4, #26]
 8003628:	9507      	str	r5, [sp, #28]
 800362a:	0035      	movs	r5, r6
 800362c:	782b      	ldrb	r3, [r5, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <_svfiprintf_r+0x52>
 8003632:	2b25      	cmp	r3, #37	; 0x25
 8003634:	d147      	bne.n	80036c6 <_svfiprintf_r+0xe2>
 8003636:	1bab      	subs	r3, r5, r6
 8003638:	9305      	str	r3, [sp, #20]
 800363a:	42b5      	cmp	r5, r6
 800363c:	d00c      	beq.n	8003658 <_svfiprintf_r+0x74>
 800363e:	0032      	movs	r2, r6
 8003640:	0039      	movs	r1, r7
 8003642:	9803      	ldr	r0, [sp, #12]
 8003644:	f7ff ff6c 	bl	8003520 <__ssputs_r>
 8003648:	1c43      	adds	r3, r0, #1
 800364a:	d100      	bne.n	800364e <_svfiprintf_r+0x6a>
 800364c:	e0ae      	b.n	80037ac <_svfiprintf_r+0x1c8>
 800364e:	6962      	ldr	r2, [r4, #20]
 8003650:	9b05      	ldr	r3, [sp, #20]
 8003652:	4694      	mov	ip, r2
 8003654:	4463      	add	r3, ip
 8003656:	6163      	str	r3, [r4, #20]
 8003658:	782b      	ldrb	r3, [r5, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d100      	bne.n	8003660 <_svfiprintf_r+0x7c>
 800365e:	e0a5      	b.n	80037ac <_svfiprintf_r+0x1c8>
 8003660:	2201      	movs	r2, #1
 8003662:	2300      	movs	r3, #0
 8003664:	4252      	negs	r2, r2
 8003666:	6062      	str	r2, [r4, #4]
 8003668:	a904      	add	r1, sp, #16
 800366a:	3254      	adds	r2, #84	; 0x54
 800366c:	1852      	adds	r2, r2, r1
 800366e:	1c6e      	adds	r6, r5, #1
 8003670:	6023      	str	r3, [r4, #0]
 8003672:	60e3      	str	r3, [r4, #12]
 8003674:	60a3      	str	r3, [r4, #8]
 8003676:	7013      	strb	r3, [r2, #0]
 8003678:	65a3      	str	r3, [r4, #88]	; 0x58
 800367a:	2205      	movs	r2, #5
 800367c:	7831      	ldrb	r1, [r6, #0]
 800367e:	4854      	ldr	r0, [pc, #336]	; (80037d0 <_svfiprintf_r+0x1ec>)
 8003680:	f000 fa44 	bl	8003b0c <memchr>
 8003684:	1c75      	adds	r5, r6, #1
 8003686:	2800      	cmp	r0, #0
 8003688:	d11f      	bne.n	80036ca <_svfiprintf_r+0xe6>
 800368a:	6822      	ldr	r2, [r4, #0]
 800368c:	06d3      	lsls	r3, r2, #27
 800368e:	d504      	bpl.n	800369a <_svfiprintf_r+0xb6>
 8003690:	2353      	movs	r3, #83	; 0x53
 8003692:	a904      	add	r1, sp, #16
 8003694:	185b      	adds	r3, r3, r1
 8003696:	2120      	movs	r1, #32
 8003698:	7019      	strb	r1, [r3, #0]
 800369a:	0713      	lsls	r3, r2, #28
 800369c:	d504      	bpl.n	80036a8 <_svfiprintf_r+0xc4>
 800369e:	2353      	movs	r3, #83	; 0x53
 80036a0:	a904      	add	r1, sp, #16
 80036a2:	185b      	adds	r3, r3, r1
 80036a4:	212b      	movs	r1, #43	; 0x2b
 80036a6:	7019      	strb	r1, [r3, #0]
 80036a8:	7833      	ldrb	r3, [r6, #0]
 80036aa:	2b2a      	cmp	r3, #42	; 0x2a
 80036ac:	d016      	beq.n	80036dc <_svfiprintf_r+0xf8>
 80036ae:	0035      	movs	r5, r6
 80036b0:	2100      	movs	r1, #0
 80036b2:	200a      	movs	r0, #10
 80036b4:	68e3      	ldr	r3, [r4, #12]
 80036b6:	782a      	ldrb	r2, [r5, #0]
 80036b8:	1c6e      	adds	r6, r5, #1
 80036ba:	3a30      	subs	r2, #48	; 0x30
 80036bc:	2a09      	cmp	r2, #9
 80036be:	d94e      	bls.n	800375e <_svfiprintf_r+0x17a>
 80036c0:	2900      	cmp	r1, #0
 80036c2:	d111      	bne.n	80036e8 <_svfiprintf_r+0x104>
 80036c4:	e017      	b.n	80036f6 <_svfiprintf_r+0x112>
 80036c6:	3501      	adds	r5, #1
 80036c8:	e7b0      	b.n	800362c <_svfiprintf_r+0x48>
 80036ca:	4b41      	ldr	r3, [pc, #260]	; (80037d0 <_svfiprintf_r+0x1ec>)
 80036cc:	6822      	ldr	r2, [r4, #0]
 80036ce:	1ac0      	subs	r0, r0, r3
 80036d0:	2301      	movs	r3, #1
 80036d2:	4083      	lsls	r3, r0
 80036d4:	4313      	orrs	r3, r2
 80036d6:	002e      	movs	r6, r5
 80036d8:	6023      	str	r3, [r4, #0]
 80036da:	e7ce      	b.n	800367a <_svfiprintf_r+0x96>
 80036dc:	9b07      	ldr	r3, [sp, #28]
 80036de:	1d19      	adds	r1, r3, #4
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	9107      	str	r1, [sp, #28]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	db01      	blt.n	80036ec <_svfiprintf_r+0x108>
 80036e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80036ea:	e004      	b.n	80036f6 <_svfiprintf_r+0x112>
 80036ec:	425b      	negs	r3, r3
 80036ee:	60e3      	str	r3, [r4, #12]
 80036f0:	2302      	movs	r3, #2
 80036f2:	4313      	orrs	r3, r2
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	782b      	ldrb	r3, [r5, #0]
 80036f8:	2b2e      	cmp	r3, #46	; 0x2e
 80036fa:	d10a      	bne.n	8003712 <_svfiprintf_r+0x12e>
 80036fc:	786b      	ldrb	r3, [r5, #1]
 80036fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003700:	d135      	bne.n	800376e <_svfiprintf_r+0x18a>
 8003702:	9b07      	ldr	r3, [sp, #28]
 8003704:	3502      	adds	r5, #2
 8003706:	1d1a      	adds	r2, r3, #4
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	9207      	str	r2, [sp, #28]
 800370c:	2b00      	cmp	r3, #0
 800370e:	db2b      	blt.n	8003768 <_svfiprintf_r+0x184>
 8003710:	9309      	str	r3, [sp, #36]	; 0x24
 8003712:	4e30      	ldr	r6, [pc, #192]	; (80037d4 <_svfiprintf_r+0x1f0>)
 8003714:	2203      	movs	r2, #3
 8003716:	0030      	movs	r0, r6
 8003718:	7829      	ldrb	r1, [r5, #0]
 800371a:	f000 f9f7 	bl	8003b0c <memchr>
 800371e:	2800      	cmp	r0, #0
 8003720:	d006      	beq.n	8003730 <_svfiprintf_r+0x14c>
 8003722:	2340      	movs	r3, #64	; 0x40
 8003724:	1b80      	subs	r0, r0, r6
 8003726:	4083      	lsls	r3, r0
 8003728:	6822      	ldr	r2, [r4, #0]
 800372a:	3501      	adds	r5, #1
 800372c:	4313      	orrs	r3, r2
 800372e:	6023      	str	r3, [r4, #0]
 8003730:	7829      	ldrb	r1, [r5, #0]
 8003732:	2206      	movs	r2, #6
 8003734:	4828      	ldr	r0, [pc, #160]	; (80037d8 <_svfiprintf_r+0x1f4>)
 8003736:	1c6e      	adds	r6, r5, #1
 8003738:	7621      	strb	r1, [r4, #24]
 800373a:	f000 f9e7 	bl	8003b0c <memchr>
 800373e:	2800      	cmp	r0, #0
 8003740:	d03c      	beq.n	80037bc <_svfiprintf_r+0x1d8>
 8003742:	4b26      	ldr	r3, [pc, #152]	; (80037dc <_svfiprintf_r+0x1f8>)
 8003744:	2b00      	cmp	r3, #0
 8003746:	d125      	bne.n	8003794 <_svfiprintf_r+0x1b0>
 8003748:	2207      	movs	r2, #7
 800374a:	9b07      	ldr	r3, [sp, #28]
 800374c:	3307      	adds	r3, #7
 800374e:	4393      	bics	r3, r2
 8003750:	3308      	adds	r3, #8
 8003752:	9307      	str	r3, [sp, #28]
 8003754:	6963      	ldr	r3, [r4, #20]
 8003756:	9a04      	ldr	r2, [sp, #16]
 8003758:	189b      	adds	r3, r3, r2
 800375a:	6163      	str	r3, [r4, #20]
 800375c:	e765      	b.n	800362a <_svfiprintf_r+0x46>
 800375e:	4343      	muls	r3, r0
 8003760:	0035      	movs	r5, r6
 8003762:	2101      	movs	r1, #1
 8003764:	189b      	adds	r3, r3, r2
 8003766:	e7a6      	b.n	80036b6 <_svfiprintf_r+0xd2>
 8003768:	2301      	movs	r3, #1
 800376a:	425b      	negs	r3, r3
 800376c:	e7d0      	b.n	8003710 <_svfiprintf_r+0x12c>
 800376e:	2300      	movs	r3, #0
 8003770:	200a      	movs	r0, #10
 8003772:	001a      	movs	r2, r3
 8003774:	3501      	adds	r5, #1
 8003776:	6063      	str	r3, [r4, #4]
 8003778:	7829      	ldrb	r1, [r5, #0]
 800377a:	1c6e      	adds	r6, r5, #1
 800377c:	3930      	subs	r1, #48	; 0x30
 800377e:	2909      	cmp	r1, #9
 8003780:	d903      	bls.n	800378a <_svfiprintf_r+0x1a6>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0c5      	beq.n	8003712 <_svfiprintf_r+0x12e>
 8003786:	9209      	str	r2, [sp, #36]	; 0x24
 8003788:	e7c3      	b.n	8003712 <_svfiprintf_r+0x12e>
 800378a:	4342      	muls	r2, r0
 800378c:	0035      	movs	r5, r6
 800378e:	2301      	movs	r3, #1
 8003790:	1852      	adds	r2, r2, r1
 8003792:	e7f1      	b.n	8003778 <_svfiprintf_r+0x194>
 8003794:	ab07      	add	r3, sp, #28
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	003a      	movs	r2, r7
 800379a:	0021      	movs	r1, r4
 800379c:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <_svfiprintf_r+0x1fc>)
 800379e:	9803      	ldr	r0, [sp, #12]
 80037a0:	e000      	b.n	80037a4 <_svfiprintf_r+0x1c0>
 80037a2:	bf00      	nop
 80037a4:	9004      	str	r0, [sp, #16]
 80037a6:	9b04      	ldr	r3, [sp, #16]
 80037a8:	3301      	adds	r3, #1
 80037aa:	d1d3      	bne.n	8003754 <_svfiprintf_r+0x170>
 80037ac:	89bb      	ldrh	r3, [r7, #12]
 80037ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 80037b0:	065b      	lsls	r3, r3, #25
 80037b2:	d400      	bmi.n	80037b6 <_svfiprintf_r+0x1d2>
 80037b4:	e72d      	b.n	8003612 <_svfiprintf_r+0x2e>
 80037b6:	2001      	movs	r0, #1
 80037b8:	4240      	negs	r0, r0
 80037ba:	e72a      	b.n	8003612 <_svfiprintf_r+0x2e>
 80037bc:	ab07      	add	r3, sp, #28
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	003a      	movs	r2, r7
 80037c2:	0021      	movs	r1, r4
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <_svfiprintf_r+0x1fc>)
 80037c6:	9803      	ldr	r0, [sp, #12]
 80037c8:	f000 f87c 	bl	80038c4 <_printf_i>
 80037cc:	e7ea      	b.n	80037a4 <_svfiprintf_r+0x1c0>
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	08003d44 	.word	0x08003d44
 80037d4:	08003d4a 	.word	0x08003d4a
 80037d8:	08003d4e 	.word	0x08003d4e
 80037dc:	00000000 	.word	0x00000000
 80037e0:	08003521 	.word	0x08003521

080037e4 <_printf_common>:
 80037e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037e6:	0015      	movs	r5, r2
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	688a      	ldr	r2, [r1, #8]
 80037ec:	690b      	ldr	r3, [r1, #16]
 80037ee:	000c      	movs	r4, r1
 80037f0:	9000      	str	r0, [sp, #0]
 80037f2:	4293      	cmp	r3, r2
 80037f4:	da00      	bge.n	80037f8 <_printf_common+0x14>
 80037f6:	0013      	movs	r3, r2
 80037f8:	0022      	movs	r2, r4
 80037fa:	602b      	str	r3, [r5, #0]
 80037fc:	3243      	adds	r2, #67	; 0x43
 80037fe:	7812      	ldrb	r2, [r2, #0]
 8003800:	2a00      	cmp	r2, #0
 8003802:	d001      	beq.n	8003808 <_printf_common+0x24>
 8003804:	3301      	adds	r3, #1
 8003806:	602b      	str	r3, [r5, #0]
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	069b      	lsls	r3, r3, #26
 800380c:	d502      	bpl.n	8003814 <_printf_common+0x30>
 800380e:	682b      	ldr	r3, [r5, #0]
 8003810:	3302      	adds	r3, #2
 8003812:	602b      	str	r3, [r5, #0]
 8003814:	6822      	ldr	r2, [r4, #0]
 8003816:	2306      	movs	r3, #6
 8003818:	0017      	movs	r7, r2
 800381a:	401f      	ands	r7, r3
 800381c:	421a      	tst	r2, r3
 800381e:	d027      	beq.n	8003870 <_printf_common+0x8c>
 8003820:	0023      	movs	r3, r4
 8003822:	3343      	adds	r3, #67	; 0x43
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	1e5a      	subs	r2, r3, #1
 8003828:	4193      	sbcs	r3, r2
 800382a:	6822      	ldr	r2, [r4, #0]
 800382c:	0692      	lsls	r2, r2, #26
 800382e:	d430      	bmi.n	8003892 <_printf_common+0xae>
 8003830:	0022      	movs	r2, r4
 8003832:	9901      	ldr	r1, [sp, #4]
 8003834:	9800      	ldr	r0, [sp, #0]
 8003836:	9e08      	ldr	r6, [sp, #32]
 8003838:	3243      	adds	r2, #67	; 0x43
 800383a:	47b0      	blx	r6
 800383c:	1c43      	adds	r3, r0, #1
 800383e:	d025      	beq.n	800388c <_printf_common+0xa8>
 8003840:	2306      	movs	r3, #6
 8003842:	6820      	ldr	r0, [r4, #0]
 8003844:	682a      	ldr	r2, [r5, #0]
 8003846:	68e1      	ldr	r1, [r4, #12]
 8003848:	2500      	movs	r5, #0
 800384a:	4003      	ands	r3, r0
 800384c:	2b04      	cmp	r3, #4
 800384e:	d103      	bne.n	8003858 <_printf_common+0x74>
 8003850:	1a8d      	subs	r5, r1, r2
 8003852:	43eb      	mvns	r3, r5
 8003854:	17db      	asrs	r3, r3, #31
 8003856:	401d      	ands	r5, r3
 8003858:	68a3      	ldr	r3, [r4, #8]
 800385a:	6922      	ldr	r2, [r4, #16]
 800385c:	4293      	cmp	r3, r2
 800385e:	dd01      	ble.n	8003864 <_printf_common+0x80>
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	18ed      	adds	r5, r5, r3
 8003864:	2700      	movs	r7, #0
 8003866:	42bd      	cmp	r5, r7
 8003868:	d120      	bne.n	80038ac <_printf_common+0xc8>
 800386a:	2000      	movs	r0, #0
 800386c:	e010      	b.n	8003890 <_printf_common+0xac>
 800386e:	3701      	adds	r7, #1
 8003870:	68e3      	ldr	r3, [r4, #12]
 8003872:	682a      	ldr	r2, [r5, #0]
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	42bb      	cmp	r3, r7
 8003878:	ddd2      	ble.n	8003820 <_printf_common+0x3c>
 800387a:	0022      	movs	r2, r4
 800387c:	2301      	movs	r3, #1
 800387e:	9901      	ldr	r1, [sp, #4]
 8003880:	9800      	ldr	r0, [sp, #0]
 8003882:	9e08      	ldr	r6, [sp, #32]
 8003884:	3219      	adds	r2, #25
 8003886:	47b0      	blx	r6
 8003888:	1c43      	adds	r3, r0, #1
 800388a:	d1f0      	bne.n	800386e <_printf_common+0x8a>
 800388c:	2001      	movs	r0, #1
 800388e:	4240      	negs	r0, r0
 8003890:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003892:	2030      	movs	r0, #48	; 0x30
 8003894:	18e1      	adds	r1, r4, r3
 8003896:	3143      	adds	r1, #67	; 0x43
 8003898:	7008      	strb	r0, [r1, #0]
 800389a:	0021      	movs	r1, r4
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	3145      	adds	r1, #69	; 0x45
 80038a0:	7809      	ldrb	r1, [r1, #0]
 80038a2:	18a2      	adds	r2, r4, r2
 80038a4:	3243      	adds	r2, #67	; 0x43
 80038a6:	3302      	adds	r3, #2
 80038a8:	7011      	strb	r1, [r2, #0]
 80038aa:	e7c1      	b.n	8003830 <_printf_common+0x4c>
 80038ac:	0022      	movs	r2, r4
 80038ae:	2301      	movs	r3, #1
 80038b0:	9901      	ldr	r1, [sp, #4]
 80038b2:	9800      	ldr	r0, [sp, #0]
 80038b4:	9e08      	ldr	r6, [sp, #32]
 80038b6:	321a      	adds	r2, #26
 80038b8:	47b0      	blx	r6
 80038ba:	1c43      	adds	r3, r0, #1
 80038bc:	d0e6      	beq.n	800388c <_printf_common+0xa8>
 80038be:	3701      	adds	r7, #1
 80038c0:	e7d1      	b.n	8003866 <_printf_common+0x82>
	...

080038c4 <_printf_i>:
 80038c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c6:	b08b      	sub	sp, #44	; 0x2c
 80038c8:	9206      	str	r2, [sp, #24]
 80038ca:	000a      	movs	r2, r1
 80038cc:	3243      	adds	r2, #67	; 0x43
 80038ce:	9307      	str	r3, [sp, #28]
 80038d0:	9005      	str	r0, [sp, #20]
 80038d2:	9204      	str	r2, [sp, #16]
 80038d4:	7e0a      	ldrb	r2, [r1, #24]
 80038d6:	000c      	movs	r4, r1
 80038d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80038da:	2a78      	cmp	r2, #120	; 0x78
 80038dc:	d807      	bhi.n	80038ee <_printf_i+0x2a>
 80038de:	2a62      	cmp	r2, #98	; 0x62
 80038e0:	d809      	bhi.n	80038f6 <_printf_i+0x32>
 80038e2:	2a00      	cmp	r2, #0
 80038e4:	d100      	bne.n	80038e8 <_printf_i+0x24>
 80038e6:	e0c1      	b.n	8003a6c <_printf_i+0x1a8>
 80038e8:	2a58      	cmp	r2, #88	; 0x58
 80038ea:	d100      	bne.n	80038ee <_printf_i+0x2a>
 80038ec:	e08c      	b.n	8003a08 <_printf_i+0x144>
 80038ee:	0026      	movs	r6, r4
 80038f0:	3642      	adds	r6, #66	; 0x42
 80038f2:	7032      	strb	r2, [r6, #0]
 80038f4:	e022      	b.n	800393c <_printf_i+0x78>
 80038f6:	0010      	movs	r0, r2
 80038f8:	3863      	subs	r0, #99	; 0x63
 80038fa:	2815      	cmp	r0, #21
 80038fc:	d8f7      	bhi.n	80038ee <_printf_i+0x2a>
 80038fe:	f7fc fc03 	bl	8000108 <__gnu_thumb1_case_shi>
 8003902:	0016      	.short	0x0016
 8003904:	fff6001f 	.word	0xfff6001f
 8003908:	fff6fff6 	.word	0xfff6fff6
 800390c:	001ffff6 	.word	0x001ffff6
 8003910:	fff6fff6 	.word	0xfff6fff6
 8003914:	fff6fff6 	.word	0xfff6fff6
 8003918:	003600a8 	.word	0x003600a8
 800391c:	fff6009a 	.word	0xfff6009a
 8003920:	00b9fff6 	.word	0x00b9fff6
 8003924:	0036fff6 	.word	0x0036fff6
 8003928:	fff6fff6 	.word	0xfff6fff6
 800392c:	009e      	.short	0x009e
 800392e:	0026      	movs	r6, r4
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	3642      	adds	r6, #66	; 0x42
 8003934:	1d11      	adds	r1, r2, #4
 8003936:	6019      	str	r1, [r3, #0]
 8003938:	6813      	ldr	r3, [r2, #0]
 800393a:	7033      	strb	r3, [r6, #0]
 800393c:	2301      	movs	r3, #1
 800393e:	e0a7      	b.n	8003a90 <_printf_i+0x1cc>
 8003940:	6808      	ldr	r0, [r1, #0]
 8003942:	6819      	ldr	r1, [r3, #0]
 8003944:	1d0a      	adds	r2, r1, #4
 8003946:	0605      	lsls	r5, r0, #24
 8003948:	d50b      	bpl.n	8003962 <_printf_i+0x9e>
 800394a:	680d      	ldr	r5, [r1, #0]
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	2d00      	cmp	r5, #0
 8003950:	da03      	bge.n	800395a <_printf_i+0x96>
 8003952:	232d      	movs	r3, #45	; 0x2d
 8003954:	9a04      	ldr	r2, [sp, #16]
 8003956:	426d      	negs	r5, r5
 8003958:	7013      	strb	r3, [r2, #0]
 800395a:	4b61      	ldr	r3, [pc, #388]	; (8003ae0 <_printf_i+0x21c>)
 800395c:	270a      	movs	r7, #10
 800395e:	9303      	str	r3, [sp, #12]
 8003960:	e01b      	b.n	800399a <_printf_i+0xd6>
 8003962:	680d      	ldr	r5, [r1, #0]
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	0641      	lsls	r1, r0, #25
 8003968:	d5f1      	bpl.n	800394e <_printf_i+0x8a>
 800396a:	b22d      	sxth	r5, r5
 800396c:	e7ef      	b.n	800394e <_printf_i+0x8a>
 800396e:	680d      	ldr	r5, [r1, #0]
 8003970:	6819      	ldr	r1, [r3, #0]
 8003972:	1d08      	adds	r0, r1, #4
 8003974:	6018      	str	r0, [r3, #0]
 8003976:	062e      	lsls	r6, r5, #24
 8003978:	d501      	bpl.n	800397e <_printf_i+0xba>
 800397a:	680d      	ldr	r5, [r1, #0]
 800397c:	e003      	b.n	8003986 <_printf_i+0xc2>
 800397e:	066d      	lsls	r5, r5, #25
 8003980:	d5fb      	bpl.n	800397a <_printf_i+0xb6>
 8003982:	680d      	ldr	r5, [r1, #0]
 8003984:	b2ad      	uxth	r5, r5
 8003986:	4b56      	ldr	r3, [pc, #344]	; (8003ae0 <_printf_i+0x21c>)
 8003988:	2708      	movs	r7, #8
 800398a:	9303      	str	r3, [sp, #12]
 800398c:	2a6f      	cmp	r2, #111	; 0x6f
 800398e:	d000      	beq.n	8003992 <_printf_i+0xce>
 8003990:	3702      	adds	r7, #2
 8003992:	0023      	movs	r3, r4
 8003994:	2200      	movs	r2, #0
 8003996:	3343      	adds	r3, #67	; 0x43
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	6863      	ldr	r3, [r4, #4]
 800399c:	60a3      	str	r3, [r4, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	db03      	blt.n	80039aa <_printf_i+0xe6>
 80039a2:	2204      	movs	r2, #4
 80039a4:	6821      	ldr	r1, [r4, #0]
 80039a6:	4391      	bics	r1, r2
 80039a8:	6021      	str	r1, [r4, #0]
 80039aa:	2d00      	cmp	r5, #0
 80039ac:	d102      	bne.n	80039b4 <_printf_i+0xf0>
 80039ae:	9e04      	ldr	r6, [sp, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00c      	beq.n	80039ce <_printf_i+0x10a>
 80039b4:	9e04      	ldr	r6, [sp, #16]
 80039b6:	0028      	movs	r0, r5
 80039b8:	0039      	movs	r1, r7
 80039ba:	f7fc fc35 	bl	8000228 <__aeabi_uidivmod>
 80039be:	9b03      	ldr	r3, [sp, #12]
 80039c0:	3e01      	subs	r6, #1
 80039c2:	5c5b      	ldrb	r3, [r3, r1]
 80039c4:	7033      	strb	r3, [r6, #0]
 80039c6:	002b      	movs	r3, r5
 80039c8:	0005      	movs	r5, r0
 80039ca:	429f      	cmp	r7, r3
 80039cc:	d9f3      	bls.n	80039b6 <_printf_i+0xf2>
 80039ce:	2f08      	cmp	r7, #8
 80039d0:	d109      	bne.n	80039e6 <_printf_i+0x122>
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	07db      	lsls	r3, r3, #31
 80039d6:	d506      	bpl.n	80039e6 <_printf_i+0x122>
 80039d8:	6863      	ldr	r3, [r4, #4]
 80039da:	6922      	ldr	r2, [r4, #16]
 80039dc:	4293      	cmp	r3, r2
 80039de:	dc02      	bgt.n	80039e6 <_printf_i+0x122>
 80039e0:	2330      	movs	r3, #48	; 0x30
 80039e2:	3e01      	subs	r6, #1
 80039e4:	7033      	strb	r3, [r6, #0]
 80039e6:	9b04      	ldr	r3, [sp, #16]
 80039e8:	1b9b      	subs	r3, r3, r6
 80039ea:	6123      	str	r3, [r4, #16]
 80039ec:	9b07      	ldr	r3, [sp, #28]
 80039ee:	0021      	movs	r1, r4
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	9805      	ldr	r0, [sp, #20]
 80039f4:	9b06      	ldr	r3, [sp, #24]
 80039f6:	aa09      	add	r2, sp, #36	; 0x24
 80039f8:	f7ff fef4 	bl	80037e4 <_printf_common>
 80039fc:	1c43      	adds	r3, r0, #1
 80039fe:	d14c      	bne.n	8003a9a <_printf_i+0x1d6>
 8003a00:	2001      	movs	r0, #1
 8003a02:	4240      	negs	r0, r0
 8003a04:	b00b      	add	sp, #44	; 0x2c
 8003a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a08:	3145      	adds	r1, #69	; 0x45
 8003a0a:	700a      	strb	r2, [r1, #0]
 8003a0c:	4a34      	ldr	r2, [pc, #208]	; (8003ae0 <_printf_i+0x21c>)
 8003a0e:	9203      	str	r2, [sp, #12]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	6821      	ldr	r1, [r4, #0]
 8003a14:	ca20      	ldmia	r2!, {r5}
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	0608      	lsls	r0, r1, #24
 8003a1a:	d516      	bpl.n	8003a4a <_printf_i+0x186>
 8003a1c:	07cb      	lsls	r3, r1, #31
 8003a1e:	d502      	bpl.n	8003a26 <_printf_i+0x162>
 8003a20:	2320      	movs	r3, #32
 8003a22:	4319      	orrs	r1, r3
 8003a24:	6021      	str	r1, [r4, #0]
 8003a26:	2710      	movs	r7, #16
 8003a28:	2d00      	cmp	r5, #0
 8003a2a:	d1b2      	bne.n	8003992 <_printf_i+0xce>
 8003a2c:	2320      	movs	r3, #32
 8003a2e:	6822      	ldr	r2, [r4, #0]
 8003a30:	439a      	bics	r2, r3
 8003a32:	6022      	str	r2, [r4, #0]
 8003a34:	e7ad      	b.n	8003992 <_printf_i+0xce>
 8003a36:	2220      	movs	r2, #32
 8003a38:	6809      	ldr	r1, [r1, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	6022      	str	r2, [r4, #0]
 8003a3e:	0022      	movs	r2, r4
 8003a40:	2178      	movs	r1, #120	; 0x78
 8003a42:	3245      	adds	r2, #69	; 0x45
 8003a44:	7011      	strb	r1, [r2, #0]
 8003a46:	4a27      	ldr	r2, [pc, #156]	; (8003ae4 <_printf_i+0x220>)
 8003a48:	e7e1      	b.n	8003a0e <_printf_i+0x14a>
 8003a4a:	0648      	lsls	r0, r1, #25
 8003a4c:	d5e6      	bpl.n	8003a1c <_printf_i+0x158>
 8003a4e:	b2ad      	uxth	r5, r5
 8003a50:	e7e4      	b.n	8003a1c <_printf_i+0x158>
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	680d      	ldr	r5, [r1, #0]
 8003a56:	1d10      	adds	r0, r2, #4
 8003a58:	6949      	ldr	r1, [r1, #20]
 8003a5a:	6018      	str	r0, [r3, #0]
 8003a5c:	6813      	ldr	r3, [r2, #0]
 8003a5e:	062e      	lsls	r6, r5, #24
 8003a60:	d501      	bpl.n	8003a66 <_printf_i+0x1a2>
 8003a62:	6019      	str	r1, [r3, #0]
 8003a64:	e002      	b.n	8003a6c <_printf_i+0x1a8>
 8003a66:	066d      	lsls	r5, r5, #25
 8003a68:	d5fb      	bpl.n	8003a62 <_printf_i+0x19e>
 8003a6a:	8019      	strh	r1, [r3, #0]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	9e04      	ldr	r6, [sp, #16]
 8003a70:	6123      	str	r3, [r4, #16]
 8003a72:	e7bb      	b.n	80039ec <_printf_i+0x128>
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	1d11      	adds	r1, r2, #4
 8003a78:	6019      	str	r1, [r3, #0]
 8003a7a:	6816      	ldr	r6, [r2, #0]
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	0030      	movs	r0, r6
 8003a80:	6862      	ldr	r2, [r4, #4]
 8003a82:	f000 f843 	bl	8003b0c <memchr>
 8003a86:	2800      	cmp	r0, #0
 8003a88:	d001      	beq.n	8003a8e <_printf_i+0x1ca>
 8003a8a:	1b80      	subs	r0, r0, r6
 8003a8c:	6060      	str	r0, [r4, #4]
 8003a8e:	6863      	ldr	r3, [r4, #4]
 8003a90:	6123      	str	r3, [r4, #16]
 8003a92:	2300      	movs	r3, #0
 8003a94:	9a04      	ldr	r2, [sp, #16]
 8003a96:	7013      	strb	r3, [r2, #0]
 8003a98:	e7a8      	b.n	80039ec <_printf_i+0x128>
 8003a9a:	6923      	ldr	r3, [r4, #16]
 8003a9c:	0032      	movs	r2, r6
 8003a9e:	9906      	ldr	r1, [sp, #24]
 8003aa0:	9805      	ldr	r0, [sp, #20]
 8003aa2:	9d07      	ldr	r5, [sp, #28]
 8003aa4:	47a8      	blx	r5
 8003aa6:	1c43      	adds	r3, r0, #1
 8003aa8:	d0aa      	beq.n	8003a00 <_printf_i+0x13c>
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	079b      	lsls	r3, r3, #30
 8003aae:	d415      	bmi.n	8003adc <_printf_i+0x218>
 8003ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ab2:	68e0      	ldr	r0, [r4, #12]
 8003ab4:	4298      	cmp	r0, r3
 8003ab6:	daa5      	bge.n	8003a04 <_printf_i+0x140>
 8003ab8:	0018      	movs	r0, r3
 8003aba:	e7a3      	b.n	8003a04 <_printf_i+0x140>
 8003abc:	0022      	movs	r2, r4
 8003abe:	2301      	movs	r3, #1
 8003ac0:	9906      	ldr	r1, [sp, #24]
 8003ac2:	9805      	ldr	r0, [sp, #20]
 8003ac4:	9e07      	ldr	r6, [sp, #28]
 8003ac6:	3219      	adds	r2, #25
 8003ac8:	47b0      	blx	r6
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	d098      	beq.n	8003a00 <_printf_i+0x13c>
 8003ace:	3501      	adds	r5, #1
 8003ad0:	68e3      	ldr	r3, [r4, #12]
 8003ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	42ab      	cmp	r3, r5
 8003ad8:	dcf0      	bgt.n	8003abc <_printf_i+0x1f8>
 8003ada:	e7e9      	b.n	8003ab0 <_printf_i+0x1ec>
 8003adc:	2500      	movs	r5, #0
 8003ade:	e7f7      	b.n	8003ad0 <_printf_i+0x20c>
 8003ae0:	08003d55 	.word	0x08003d55
 8003ae4:	08003d66 	.word	0x08003d66

08003ae8 <_sbrk_r>:
 8003ae8:	2300      	movs	r3, #0
 8003aea:	b570      	push	{r4, r5, r6, lr}
 8003aec:	4d06      	ldr	r5, [pc, #24]	; (8003b08 <_sbrk_r+0x20>)
 8003aee:	0004      	movs	r4, r0
 8003af0:	0008      	movs	r0, r1
 8003af2:	602b      	str	r3, [r5, #0]
 8003af4:	f7fd f93e 	bl	8000d74 <_sbrk>
 8003af8:	1c43      	adds	r3, r0, #1
 8003afa:	d103      	bne.n	8003b04 <_sbrk_r+0x1c>
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d000      	beq.n	8003b04 <_sbrk_r+0x1c>
 8003b02:	6023      	str	r3, [r4, #0]
 8003b04:	bd70      	pop	{r4, r5, r6, pc}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	200001c4 	.word	0x200001c4

08003b0c <memchr>:
 8003b0c:	b2c9      	uxtb	r1, r1
 8003b0e:	1882      	adds	r2, r0, r2
 8003b10:	4290      	cmp	r0, r2
 8003b12:	d101      	bne.n	8003b18 <memchr+0xc>
 8003b14:	2000      	movs	r0, #0
 8003b16:	4770      	bx	lr
 8003b18:	7803      	ldrb	r3, [r0, #0]
 8003b1a:	428b      	cmp	r3, r1
 8003b1c:	d0fb      	beq.n	8003b16 <memchr+0xa>
 8003b1e:	3001      	adds	r0, #1
 8003b20:	e7f6      	b.n	8003b10 <memchr+0x4>

08003b22 <memcpy>:
 8003b22:	2300      	movs	r3, #0
 8003b24:	b510      	push	{r4, lr}
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d100      	bne.n	8003b2c <memcpy+0xa>
 8003b2a:	bd10      	pop	{r4, pc}
 8003b2c:	5ccc      	ldrb	r4, [r1, r3]
 8003b2e:	54c4      	strb	r4, [r0, r3]
 8003b30:	3301      	adds	r3, #1
 8003b32:	e7f8      	b.n	8003b26 <memcpy+0x4>

08003b34 <memmove>:
 8003b34:	b510      	push	{r4, lr}
 8003b36:	4288      	cmp	r0, r1
 8003b38:	d902      	bls.n	8003b40 <memmove+0xc>
 8003b3a:	188b      	adds	r3, r1, r2
 8003b3c:	4298      	cmp	r0, r3
 8003b3e:	d303      	bcc.n	8003b48 <memmove+0x14>
 8003b40:	2300      	movs	r3, #0
 8003b42:	e007      	b.n	8003b54 <memmove+0x20>
 8003b44:	5c8b      	ldrb	r3, [r1, r2]
 8003b46:	5483      	strb	r3, [r0, r2]
 8003b48:	3a01      	subs	r2, #1
 8003b4a:	d2fb      	bcs.n	8003b44 <memmove+0x10>
 8003b4c:	bd10      	pop	{r4, pc}
 8003b4e:	5ccc      	ldrb	r4, [r1, r3]
 8003b50:	54c4      	strb	r4, [r0, r3]
 8003b52:	3301      	adds	r3, #1
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d1fa      	bne.n	8003b4e <memmove+0x1a>
 8003b58:	e7f8      	b.n	8003b4c <memmove+0x18>
	...

08003b5c <__malloc_lock>:
 8003b5c:	b510      	push	{r4, lr}
 8003b5e:	4802      	ldr	r0, [pc, #8]	; (8003b68 <__malloc_lock+0xc>)
 8003b60:	f7ff fc44 	bl	80033ec <__retarget_lock_acquire_recursive>
 8003b64:	bd10      	pop	{r4, pc}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	200001b8 	.word	0x200001b8

08003b6c <__malloc_unlock>:
 8003b6c:	b510      	push	{r4, lr}
 8003b6e:	4802      	ldr	r0, [pc, #8]	; (8003b78 <__malloc_unlock+0xc>)
 8003b70:	f7ff fc3d 	bl	80033ee <__retarget_lock_release_recursive>
 8003b74:	bd10      	pop	{r4, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	200001b8 	.word	0x200001b8

08003b7c <_free_r>:
 8003b7c:	b570      	push	{r4, r5, r6, lr}
 8003b7e:	0005      	movs	r5, r0
 8003b80:	2900      	cmp	r1, #0
 8003b82:	d010      	beq.n	8003ba6 <_free_r+0x2a>
 8003b84:	1f0c      	subs	r4, r1, #4
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	da00      	bge.n	8003b8e <_free_r+0x12>
 8003b8c:	18e4      	adds	r4, r4, r3
 8003b8e:	0028      	movs	r0, r5
 8003b90:	f7ff ffe4 	bl	8003b5c <__malloc_lock>
 8003b94:	4a1d      	ldr	r2, [pc, #116]	; (8003c0c <_free_r+0x90>)
 8003b96:	6813      	ldr	r3, [r2, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d105      	bne.n	8003ba8 <_free_r+0x2c>
 8003b9c:	6063      	str	r3, [r4, #4]
 8003b9e:	6014      	str	r4, [r2, #0]
 8003ba0:	0028      	movs	r0, r5
 8003ba2:	f7ff ffe3 	bl	8003b6c <__malloc_unlock>
 8003ba6:	bd70      	pop	{r4, r5, r6, pc}
 8003ba8:	42a3      	cmp	r3, r4
 8003baa:	d908      	bls.n	8003bbe <_free_r+0x42>
 8003bac:	6821      	ldr	r1, [r4, #0]
 8003bae:	1860      	adds	r0, r4, r1
 8003bb0:	4283      	cmp	r3, r0
 8003bb2:	d1f3      	bne.n	8003b9c <_free_r+0x20>
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	1841      	adds	r1, r0, r1
 8003bba:	6021      	str	r1, [r4, #0]
 8003bbc:	e7ee      	b.n	8003b9c <_free_r+0x20>
 8003bbe:	001a      	movs	r2, r3
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <_free_r+0x4e>
 8003bc6:	42a3      	cmp	r3, r4
 8003bc8:	d9f9      	bls.n	8003bbe <_free_r+0x42>
 8003bca:	6811      	ldr	r1, [r2, #0]
 8003bcc:	1850      	adds	r0, r2, r1
 8003bce:	42a0      	cmp	r0, r4
 8003bd0:	d10b      	bne.n	8003bea <_free_r+0x6e>
 8003bd2:	6820      	ldr	r0, [r4, #0]
 8003bd4:	1809      	adds	r1, r1, r0
 8003bd6:	1850      	adds	r0, r2, r1
 8003bd8:	6011      	str	r1, [r2, #0]
 8003bda:	4283      	cmp	r3, r0
 8003bdc:	d1e0      	bne.n	8003ba0 <_free_r+0x24>
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	1841      	adds	r1, r0, r1
 8003be4:	6011      	str	r1, [r2, #0]
 8003be6:	6053      	str	r3, [r2, #4]
 8003be8:	e7da      	b.n	8003ba0 <_free_r+0x24>
 8003bea:	42a0      	cmp	r0, r4
 8003bec:	d902      	bls.n	8003bf4 <_free_r+0x78>
 8003bee:	230c      	movs	r3, #12
 8003bf0:	602b      	str	r3, [r5, #0]
 8003bf2:	e7d5      	b.n	8003ba0 <_free_r+0x24>
 8003bf4:	6821      	ldr	r1, [r4, #0]
 8003bf6:	1860      	adds	r0, r4, r1
 8003bf8:	4283      	cmp	r3, r0
 8003bfa:	d103      	bne.n	8003c04 <_free_r+0x88>
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	1841      	adds	r1, r0, r1
 8003c02:	6021      	str	r1, [r4, #0]
 8003c04:	6063      	str	r3, [r4, #4]
 8003c06:	6054      	str	r4, [r2, #4]
 8003c08:	e7ca      	b.n	8003ba0 <_free_r+0x24>
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	200001bc 	.word	0x200001bc

08003c10 <_realloc_r>:
 8003c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c12:	0007      	movs	r7, r0
 8003c14:	000e      	movs	r6, r1
 8003c16:	0014      	movs	r4, r2
 8003c18:	2900      	cmp	r1, #0
 8003c1a:	d105      	bne.n	8003c28 <_realloc_r+0x18>
 8003c1c:	0011      	movs	r1, r2
 8003c1e:	f7ff fc09 	bl	8003434 <_malloc_r>
 8003c22:	0005      	movs	r5, r0
 8003c24:	0028      	movs	r0, r5
 8003c26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c28:	2a00      	cmp	r2, #0
 8003c2a:	d103      	bne.n	8003c34 <_realloc_r+0x24>
 8003c2c:	f7ff ffa6 	bl	8003b7c <_free_r>
 8003c30:	0025      	movs	r5, r4
 8003c32:	e7f7      	b.n	8003c24 <_realloc_r+0x14>
 8003c34:	f000 f81b 	bl	8003c6e <_malloc_usable_size_r>
 8003c38:	9001      	str	r0, [sp, #4]
 8003c3a:	4284      	cmp	r4, r0
 8003c3c:	d803      	bhi.n	8003c46 <_realloc_r+0x36>
 8003c3e:	0035      	movs	r5, r6
 8003c40:	0843      	lsrs	r3, r0, #1
 8003c42:	42a3      	cmp	r3, r4
 8003c44:	d3ee      	bcc.n	8003c24 <_realloc_r+0x14>
 8003c46:	0021      	movs	r1, r4
 8003c48:	0038      	movs	r0, r7
 8003c4a:	f7ff fbf3 	bl	8003434 <_malloc_r>
 8003c4e:	1e05      	subs	r5, r0, #0
 8003c50:	d0e8      	beq.n	8003c24 <_realloc_r+0x14>
 8003c52:	9b01      	ldr	r3, [sp, #4]
 8003c54:	0022      	movs	r2, r4
 8003c56:	429c      	cmp	r4, r3
 8003c58:	d900      	bls.n	8003c5c <_realloc_r+0x4c>
 8003c5a:	001a      	movs	r2, r3
 8003c5c:	0031      	movs	r1, r6
 8003c5e:	0028      	movs	r0, r5
 8003c60:	f7ff ff5f 	bl	8003b22 <memcpy>
 8003c64:	0031      	movs	r1, r6
 8003c66:	0038      	movs	r0, r7
 8003c68:	f7ff ff88 	bl	8003b7c <_free_r>
 8003c6c:	e7da      	b.n	8003c24 <_realloc_r+0x14>

08003c6e <_malloc_usable_size_r>:
 8003c6e:	1f0b      	subs	r3, r1, #4
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	1f18      	subs	r0, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	da01      	bge.n	8003c7c <_malloc_usable_size_r+0xe>
 8003c78:	580b      	ldr	r3, [r1, r0]
 8003c7a:	18c0      	adds	r0, r0, r3
 8003c7c:	4770      	bx	lr
	...

08003c80 <_init>:
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c86:	bc08      	pop	{r3}
 8003c88:	469e      	mov	lr, r3
 8003c8a:	4770      	bx	lr

08003c8c <_fini>:
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c92:	bc08      	pop	{r3}
 8003c94:	469e      	mov	lr, r3
 8003c96:	4770      	bx	lr
