
EEE3096S_2022_Prac_2_Delays_and_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c84  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e14  08003e14  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003e14  08003e14  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e14  08003e14  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e14  08003e14  00013e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e18  08003e18  00013e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000070  08003e8c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08003e8c  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccaa  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd9  00000000  00000000  0002cd42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002ed20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002f7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012b4e  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2ab  00000000  00000000  00042cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b519  00000000  00000000  00050f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bc47a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c88  00000000  00000000  000bc4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d2c 	.word	0x08003d2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003d2c 	.word	0x08003d2c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fb94 	bl	8000964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f816 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f904 	bl	800044c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000244:	f000 f874 	bl	8000330 <MX_I2C1_Init>
  MX_DMA_Init();
 8000248:	f000 f8e2 	bl	8000410 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800024c:	f000 f8b0 	bl	80003b0 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */
	//TO DO:
	//TASK 1
	//First run this with nothing else in the loop and scope pin PC8 on an oscilloscope
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000250:	2380      	movs	r3, #128	; 0x80
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	4a04      	ldr	r2, [pc, #16]	; (8000268 <main+0x34>)
 8000256:	0019      	movs	r1, r3
 8000258:	0010      	movs	r0, r2
 800025a:	f000 ffd6 	bl	800120a <HAL_GPIO_TogglePin>
	bcdToDec(0b0001);
 800025e:	2001      	movs	r0, #1
 8000260:	f000 f96c 	bl	800053c <bcdToDec>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000264:	e7f4      	b.n	8000250 <main+0x1c>
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	48000800 	.word	0x48000800

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b590      	push	{r4, r7, lr}
 800026e:	b097      	sub	sp, #92	; 0x5c
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	2428      	movs	r4, #40	; 0x28
 8000274:	193b      	adds	r3, r7, r4
 8000276:	0018      	movs	r0, r3
 8000278:	2330      	movs	r3, #48	; 0x30
 800027a:	001a      	movs	r2, r3
 800027c:	2100      	movs	r1, #0
 800027e:	f002 fd75 	bl	8002d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000282:	2318      	movs	r3, #24
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	0018      	movs	r0, r3
 8000288:	2310      	movs	r3, #16
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f002 fd6d 	bl	8002d6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	0018      	movs	r0, r3
 8000296:	2314      	movs	r3, #20
 8000298:	001a      	movs	r2, r3
 800029a:	2100      	movs	r1, #0
 800029c:	f002 fd66 	bl	8002d6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a0:	0021      	movs	r1, r4
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2202      	movs	r2, #2
 80002a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2201      	movs	r2, #1
 80002ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2210      	movs	r2, #16
 80002b2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2202      	movs	r2, #2
 80002b8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2200      	movs	r2, #0
 80002be:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	22a0      	movs	r2, #160	; 0xa0
 80002c4:	0392      	lsls	r2, r2, #14
 80002c6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2200      	movs	r2, #0
 80002cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	0018      	movs	r0, r3
 80002d2:	f001 f8e3 	bl	800149c <HAL_RCC_OscConfig>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002da:	f000 f951 	bl	8000580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	2118      	movs	r1, #24
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2207      	movs	r2, #7
 80002e4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2202      	movs	r2, #2
 80002ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2101      	movs	r1, #1
 80002fc:	0018      	movs	r0, r3
 80002fe:	f001 fbe7 	bl	8001ad0 <HAL_RCC_ClockConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000306:	f000 f93b 	bl	8000580 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2220      	movs	r2, #32
 800030e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	0018      	movs	r0, r3
 800031a:	f001 fd2b 	bl	8001d74 <HAL_RCCEx_PeriphCLKConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000322:	f000 f92d 	bl	8000580 <Error_Handler>
  }
}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	b017      	add	sp, #92	; 0x5c
 800032c:	bd90      	pop	{r4, r7, pc}
	...

08000330 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000336:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <MX_I2C1_Init+0x78>)
 8000338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800033a:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <MX_I2C1_Init+0x74>)
 800033c:	4a1b      	ldr	r2, [pc, #108]	; (80003ac <MX_I2C1_Init+0x7c>)
 800033e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000348:	2201      	movs	r2, #1
 800034a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_I2C1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000352:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <MX_I2C1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800035e:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_I2C1_Init+0x74>)
 800036c:	0018      	movs	r0, r3
 800036e:	f000 ff67 	bl	8001240 <HAL_I2C_Init>
 8000372:	1e03      	subs	r3, r0, #0
 8000374:	d001      	beq.n	800037a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000376:	f000 f903 	bl	8000580 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <MX_I2C1_Init+0x74>)
 800037c:	2100      	movs	r1, #0
 800037e:	0018      	movs	r0, r3
 8000380:	f000 fff4 	bl	800136c <HAL_I2CEx_ConfigAnalogFilter>
 8000384:	1e03      	subs	r3, r0, #0
 8000386:	d001      	beq.n	800038c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000388:	f000 f8fa 	bl	8000580 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <MX_I2C1_Init+0x74>)
 800038e:	2100      	movs	r1, #0
 8000390:	0018      	movs	r0, r3
 8000392:	f001 f837 	bl	8001404 <HAL_I2CEx_ConfigDigitalFilter>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d001      	beq.n	800039e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800039a:	f000 f8f1 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	2000008c 	.word	0x2000008c
 80003a8:	40005400 	.word	0x40005400
 80003ac:	2000090e 	.word	0x2000090e

080003b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003b4:	4b14      	ldr	r3, [pc, #80]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003b6:	4a15      	ldr	r2, [pc, #84]	; (800040c <MX_USART2_UART_Init+0x5c>)
 80003b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003bc:	2296      	movs	r2, #150	; 0x96
 80003be:	0192      	lsls	r2, r2, #6
 80003c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003d6:	220c      	movs	r2, #12
 80003d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003f2:	4b05      	ldr	r3, [pc, #20]	; (8000408 <MX_USART2_UART_Init+0x58>)
 80003f4:	0018      	movs	r0, r3
 80003f6:	f001 fd9b 	bl	8001f30 <HAL_UART_Init>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003fe:	f000 f8bf 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	200000d8 	.word	0x200000d8
 800040c:	40004400 	.word	0x40004400

08000410 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <MX_DMA_Init+0x38>)
 8000418:	695a      	ldr	r2, [r3, #20]
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <MX_DMA_Init+0x38>)
 800041c:	2101      	movs	r1, #1
 800041e:	430a      	orrs	r2, r1
 8000420:	615a      	str	r2, [r3, #20]
 8000422:	4b09      	ldr	r3, [pc, #36]	; (8000448 <MX_DMA_Init+0x38>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	2201      	movs	r2, #1
 8000428:	4013      	ands	r3, r2
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800042e:	2200      	movs	r2, #0
 8000430:	2100      	movs	r1, #0
 8000432:	200b      	movs	r0, #11
 8000434:	f000 fba6 	bl	8000b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000438:	200b      	movs	r0, #11
 800043a:	f000 fbb8 	bl	8000bae <HAL_NVIC_EnableIRQ>

}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	b002      	add	sp, #8
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	40021000 	.word	0x40021000

0800044c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800044c:	b590      	push	{r4, r7, lr}
 800044e:	b08b      	sub	sp, #44	; 0x2c
 8000450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	2414      	movs	r4, #20
 8000454:	193b      	adds	r3, r7, r4
 8000456:	0018      	movs	r0, r3
 8000458:	2314      	movs	r3, #20
 800045a:	001a      	movs	r2, r3
 800045c:	2100      	movs	r1, #0
 800045e:	f002 fc85 	bl	8002d6c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000462:	4b34      	ldr	r3, [pc, #208]	; (8000534 <MX_GPIO_Init+0xe8>)
 8000464:	695a      	ldr	r2, [r3, #20]
 8000466:	4b33      	ldr	r3, [pc, #204]	; (8000534 <MX_GPIO_Init+0xe8>)
 8000468:	2180      	movs	r1, #128	; 0x80
 800046a:	03c9      	lsls	r1, r1, #15
 800046c:	430a      	orrs	r2, r1
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	4b30      	ldr	r3, [pc, #192]	; (8000534 <MX_GPIO_Init+0xe8>)
 8000472:	695a      	ldr	r2, [r3, #20]
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	03db      	lsls	r3, r3, #15
 8000478:	4013      	ands	r3, r2
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047e:	4b2d      	ldr	r3, [pc, #180]	; (8000534 <MX_GPIO_Init+0xe8>)
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	4b2c      	ldr	r3, [pc, #176]	; (8000534 <MX_GPIO_Init+0xe8>)
 8000484:	2180      	movs	r1, #128	; 0x80
 8000486:	0289      	lsls	r1, r1, #10
 8000488:	430a      	orrs	r2, r1
 800048a:	615a      	str	r2, [r3, #20]
 800048c:	4b29      	ldr	r3, [pc, #164]	; (8000534 <MX_GPIO_Init+0xe8>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	029b      	lsls	r3, r3, #10
 8000494:	4013      	ands	r3, r2
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b26      	ldr	r3, [pc, #152]	; (8000534 <MX_GPIO_Init+0xe8>)
 800049c:	695a      	ldr	r2, [r3, #20]
 800049e:	4b25      	ldr	r3, [pc, #148]	; (8000534 <MX_GPIO_Init+0xe8>)
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	0309      	lsls	r1, r1, #12
 80004a4:	430a      	orrs	r2, r1
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	4b22      	ldr	r3, [pc, #136]	; (8000534 <MX_GPIO_Init+0xe8>)
 80004aa:	695a      	ldr	r2, [r3, #20]
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	031b      	lsls	r3, r3, #12
 80004b0:	4013      	ands	r3, r2
 80004b2:	60bb      	str	r3, [r7, #8]
 80004b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b6:	4b1f      	ldr	r3, [pc, #124]	; (8000534 <MX_GPIO_Init+0xe8>)
 80004b8:	695a      	ldr	r2, [r3, #20]
 80004ba:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <MX_GPIO_Init+0xe8>)
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	02c9      	lsls	r1, r1, #11
 80004c0:	430a      	orrs	r2, r1
 80004c2:	615a      	str	r2, [r3, #20]
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <MX_GPIO_Init+0xe8>)
 80004c6:	695a      	ldr	r2, [r3, #20]
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	02db      	lsls	r3, r3, #11
 80004cc:	4013      	ands	r3, r2
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80004d2:	23c0      	movs	r3, #192	; 0xc0
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	4818      	ldr	r0, [pc, #96]	; (8000538 <MX_GPIO_Init+0xec>)
 80004d8:	2200      	movs	r2, #0
 80004da:	0019      	movs	r1, r3
 80004dc:	f000 fe78 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	2201      	movs	r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2290      	movs	r2, #144	; 0x90
 80004ea:	0352      	lsls	r2, r2, #13
 80004ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004f4:	193a      	adds	r2, r7, r4
 80004f6:	2390      	movs	r3, #144	; 0x90
 80004f8:	05db      	lsls	r3, r3, #23
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fcf7 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000502:	0021      	movs	r1, r4
 8000504:	187b      	adds	r3, r7, r1
 8000506:	22c0      	movs	r2, #192	; 0xc0
 8000508:	0092      	lsls	r2, r2, #2
 800050a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2201      	movs	r2, #1
 8000510:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800051e:	187b      	adds	r3, r7, r1
 8000520:	4a05      	ldr	r2, [pc, #20]	; (8000538 <MX_GPIO_Init+0xec>)
 8000522:	0019      	movs	r1, r3
 8000524:	0010      	movs	r0, r2
 8000526:	f000 fce3 	bl	8000ef0 <HAL_GPIO_Init>

}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b00b      	add	sp, #44	; 0x2c
 8000530:	bd90      	pop	{r4, r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	40021000 	.word	0x40021000
 8000538:	48000800 	.word	0x48000800

0800053c <bcdToDec>:
//	uint8_t onesPlace =
//	return
//}

int bcdToDec(uint8_t val)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
 8000542:	0002      	movs	r2, r0
 8000544:	1dfb      	adds	r3, r7, #7
 8000546:	701a      	strb	r2, [r3, #0]
    /* Convert binary coded decimal to normal decimal numbers */
	//TO DO:
	//TASK 3
	//Complete the BCD to decimal function
	int tensPlace = (val >> 4);
 8000548:	1dfb      	adds	r3, r7, #7
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	091b      	lsrs	r3, r3, #4
 800054e:	b2db      	uxtb	r3, r3
 8000550:	617b      	str	r3, [r7, #20]
	int onesPlace = ((val << 4) >> 4);
 8000552:	1dfb      	adds	r3, r7, #7
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	011b      	lsls	r3, r3, #4
 8000558:	111b      	asrs	r3, r3, #4
 800055a:	613b      	str	r3, [r7, #16]
	int result = tensPlace*10 + onesPlace;
 800055c:	697a      	ldr	r2, [r7, #20]
 800055e:	0013      	movs	r3, r2
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	189b      	adds	r3, r3, r2
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	001a      	movs	r2, r3
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	189b      	adds	r3, r3, r2
 800056c:	60fb      	str	r3, [r7, #12]
	printf(result);
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	0018      	movs	r0, r3
 8000572:	f002 fc03 	bl	8002d7c <iprintf>
	return result;
 8000576:	68fb      	ldr	r3, [r7, #12]
}
 8000578:	0018      	movs	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	b006      	add	sp, #24
 800057e:	bd80      	pop	{r7, pc}

08000580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000584:	b672      	cpsid	i
}
 8000586:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000588:	e7fe      	b.n	8000588 <Error_Handler+0x8>
	...

0800058c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <HAL_MspInit+0x44>)
 8000594:	699a      	ldr	r2, [r3, #24]
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_MspInit+0x44>)
 8000598:	2101      	movs	r1, #1
 800059a:	430a      	orrs	r2, r1
 800059c:	619a      	str	r2, [r3, #24]
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <HAL_MspInit+0x44>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	2201      	movs	r2, #1
 80005a4:	4013      	ands	r3, r2
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <HAL_MspInit+0x44>)
 80005ac:	69da      	ldr	r2, [r3, #28]
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_MspInit+0x44>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	0549      	lsls	r1, r1, #21
 80005b4:	430a      	orrs	r2, r1
 80005b6:	61da      	str	r2, [r3, #28]
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_MspInit+0x44>)
 80005ba:	69da      	ldr	r2, [r3, #28]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	055b      	lsls	r3, r3, #21
 80005c0:	4013      	ands	r3, r2
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b002      	add	sp, #8
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b08b      	sub	sp, #44	; 0x2c
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	2414      	movs	r4, #20
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	0018      	movs	r0, r3
 80005e2:	2314      	movs	r3, #20
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f002 fbc0 	bl	8002d6c <memset>
  if(hi2c->Instance==I2C1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1c      	ldr	r2, [pc, #112]	; (8000664 <HAL_I2C_MspInit+0x90>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d131      	bne.n	800065a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <HAL_I2C_MspInit+0x94>)
 80005f8:	695a      	ldr	r2, [r3, #20]
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <HAL_I2C_MspInit+0x94>)
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	02c9      	lsls	r1, r1, #11
 8000600:	430a      	orrs	r2, r1
 8000602:	615a      	str	r2, [r3, #20]
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <HAL_I2C_MspInit+0x94>)
 8000606:	695a      	ldr	r2, [r3, #20]
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	02db      	lsls	r3, r3, #11
 800060c:	4013      	ands	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000612:	0021      	movs	r1, r4
 8000614:	187b      	adds	r3, r7, r1
 8000616:	22c0      	movs	r2, #192	; 0xc0
 8000618:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2212      	movs	r2, #18
 800061e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2203      	movs	r2, #3
 800062a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2201      	movs	r2, #1
 8000630:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	187b      	adds	r3, r7, r1
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <HAL_I2C_MspInit+0x98>)
 8000636:	0019      	movs	r1, r3
 8000638:	0010      	movs	r0, r2
 800063a:	f000 fc59 	bl	8000ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <HAL_I2C_MspInit+0x94>)
 8000640:	69da      	ldr	r2, [r3, #28]
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <HAL_I2C_MspInit+0x94>)
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	0389      	lsls	r1, r1, #14
 8000648:	430a      	orrs	r2, r1
 800064a:	61da      	str	r2, [r3, #28]
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_I2C_MspInit+0x94>)
 800064e:	69da      	ldr	r2, [r3, #28]
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	039b      	lsls	r3, r3, #14
 8000654:	4013      	ands	r3, r2
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b00b      	add	sp, #44	; 0x2c
 8000660:	bd90      	pop	{r4, r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40005400 	.word	0x40005400
 8000668:	40021000 	.word	0x40021000
 800066c:	48000400 	.word	0x48000400

08000670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b08b      	sub	sp, #44	; 0x2c
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	2414      	movs	r4, #20
 800067a:	193b      	adds	r3, r7, r4
 800067c:	0018      	movs	r0, r3
 800067e:	2314      	movs	r3, #20
 8000680:	001a      	movs	r2, r3
 8000682:	2100      	movs	r1, #0
 8000684:	f002 fb72 	bl	8002d6c <memset>
  if(huart->Instance==USART2)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a33      	ldr	r2, [pc, #204]	; (800075c <HAL_UART_MspInit+0xec>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d160      	bne.n	8000754 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000692:	4b33      	ldr	r3, [pc, #204]	; (8000760 <HAL_UART_MspInit+0xf0>)
 8000694:	69da      	ldr	r2, [r3, #28]
 8000696:	4b32      	ldr	r3, [pc, #200]	; (8000760 <HAL_UART_MspInit+0xf0>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	0289      	lsls	r1, r1, #10
 800069c:	430a      	orrs	r2, r1
 800069e:	61da      	str	r2, [r3, #28]
 80006a0:	4b2f      	ldr	r3, [pc, #188]	; (8000760 <HAL_UART_MspInit+0xf0>)
 80006a2:	69da      	ldr	r2, [r3, #28]
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	029b      	lsls	r3, r3, #10
 80006a8:	4013      	ands	r3, r2
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <HAL_UART_MspInit+0xf0>)
 80006b0:	695a      	ldr	r2, [r3, #20]
 80006b2:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <HAL_UART_MspInit+0xf0>)
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	0289      	lsls	r1, r1, #10
 80006b8:	430a      	orrs	r2, r1
 80006ba:	615a      	str	r2, [r3, #20]
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <HAL_UART_MspInit+0xf0>)
 80006be:	695a      	ldr	r2, [r3, #20]
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	029b      	lsls	r3, r3, #10
 80006c4:	4013      	ands	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006ca:	0021      	movs	r1, r4
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	220c      	movs	r2, #12
 80006d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2202      	movs	r2, #2
 80006d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2203      	movs	r2, #3
 80006e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2201      	movs	r2, #1
 80006e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	187a      	adds	r2, r7, r1
 80006ec:	2390      	movs	r3, #144	; 0x90
 80006ee:	05db      	lsls	r3, r3, #23
 80006f0:	0011      	movs	r1, r2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 fbfc 	bl	8000ef0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <HAL_UART_MspInit+0xf4>)
 80006fa:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <HAL_UART_MspInit+0xf8>)
 80006fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <HAL_UART_MspInit+0xf4>)
 8000700:	2210      	movs	r2, #16
 8000702:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <HAL_UART_MspInit+0xf4>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <HAL_UART_MspInit+0xf4>)
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <HAL_UART_MspInit+0xf4>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <HAL_UART_MspInit+0xf4>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <HAL_UART_MspInit+0xf4>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <HAL_UART_MspInit+0xf4>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <HAL_UART_MspInit+0xf4>)
 800072a:	0018      	movs	r0, r3
 800072c:	f000 fa5c 	bl	8000be8 <HAL_DMA_Init>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000734:	f7ff ff24 	bl	8000580 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <HAL_UART_MspInit+0xf4>)
 800073c:	66da      	str	r2, [r3, #108]	; 0x6c
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_UART_MspInit+0xf4>)
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	201c      	movs	r0, #28
 800074a:	f000 fa1b 	bl	8000b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800074e:	201c      	movs	r0, #28
 8000750:	f000 fa2d 	bl	8000bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b00b      	add	sp, #44	; 0x2c
 800075a:	bd90      	pop	{r4, r7, pc}
 800075c:	40004400 	.word	0x40004400
 8000760:	40021000 	.word	0x40021000
 8000764:	2000015c 	.word	0x2000015c
 8000768:	40020044 	.word	0x40020044

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f000 f930 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <DMA1_Channel4_5_IRQHandler+0x14>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 fae5 	bl	8000d72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	2000015c 	.word	0x2000015c

080007b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <USART2_IRQHandler+0x14>)
 80007ba:	0018      	movs	r0, r3
 80007bc:	f001 fc0c 	bl	8001fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	200000d8 	.word	0x200000d8

080007cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	e00a      	b.n	80007f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007de:	e000      	b.n	80007e2 <_read+0x16>
 80007e0:	bf00      	nop
 80007e2:	0001      	movs	r1, r0
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	60ba      	str	r2, [r7, #8]
 80007ea:	b2ca      	uxtb	r2, r1
 80007ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	3301      	adds	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	dbf0      	blt.n	80007de <_read+0x12>
	}

return len;
 80007fc:	687b      	ldr	r3, [r7, #4]
}
 80007fe:	0018      	movs	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	b006      	add	sp, #24
 8000804:	bd80      	pop	{r7, pc}

08000806 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b086      	sub	sp, #24
 800080a:	af00      	add	r7, sp, #0
 800080c:	60f8      	str	r0, [r7, #12]
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	e009      	b.n	800082c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	60ba      	str	r2, [r7, #8]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	0018      	movs	r0, r3
 8000822:	e000      	b.n	8000826 <_write+0x20>
 8000824:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	3301      	adds	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	429a      	cmp	r2, r3
 8000832:	dbf1      	blt.n	8000818 <_write+0x12>
	}
	return len;
 8000834:	687b      	ldr	r3, [r7, #4]
}
 8000836:	0018      	movs	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	b006      	add	sp, #24
 800083c:	bd80      	pop	{r7, pc}

0800083e <_close>:

int _close(int file)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	return -1;
 8000846:	2301      	movs	r3, #1
 8000848:	425b      	negs	r3, r3
}
 800084a:	0018      	movs	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}

08000852 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
 800085a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	0192      	lsls	r2, r2, #6
 8000862:	605a      	str	r2, [r3, #4]
	return 0;
 8000864:	2300      	movs	r3, #0
}
 8000866:	0018      	movs	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}

0800086e <_isatty>:

int _isatty(int file)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	return 1;
 8000876:	2301      	movs	r3, #1
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	b002      	add	sp, #8
 800087e:	bd80      	pop	{r7, pc}

08000880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
	return 0;
 800088c:	2300      	movs	r3, #0
}
 800088e:	0018      	movs	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	b004      	add	sp, #16
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <_sbrk+0x5c>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <_sbrk+0x60>)
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <_sbrk+0x64>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <_sbrk+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	18d3      	adds	r3, r2, r3
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d207      	bcs.n	80008d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c8:	f002 fa26 	bl	8002d18 <__errno>
 80008cc:	0003      	movs	r3, r0
 80008ce:	220c      	movs	r2, #12
 80008d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	425b      	negs	r3, r3
 80008d6:	e009      	b.n	80008ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	18d2      	adds	r2, r2, r3
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <_sbrk+0x64>)
 80008e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	0018      	movs	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b006      	add	sp, #24
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20002000 	.word	0x20002000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	200001a0 	.word	0x200001a0
 8000900:	200001b8 	.word	0x200001b8

08000904 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000912:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <LoopForever+0x6>)
  ldr r1, =_edata
 8000916:	490e      	ldr	r1, [pc, #56]	; (8000950 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000918:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <LoopForever+0xe>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <LoopForever+0x12>)
  ldr r4, =_ebss
 800092c:	4c0b      	ldr	r4, [pc, #44]	; (800095c <LoopForever+0x16>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800093a:	f7ff ffe3 	bl	8000904 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800093e:	f002 f9f1 	bl	8002d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000942:	f7ff fc77 	bl	8000234 <main>

08000946 <LoopForever>:

LoopForever:
    b LoopForever
 8000946:	e7fe      	b.n	8000946 <LoopForever>
  ldr   r0, =_estack
 8000948:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000954:	08003e1c 	.word	0x08003e1c
  ldr r2, =_sbss
 8000958:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800095c:	200001b8 	.word	0x200001b8

08000960 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC1_COMP_IRQHandler>
	...

08000964 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <HAL_Init+0x24>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_Init+0x24>)
 800096e:	2110      	movs	r1, #16
 8000970:	430a      	orrs	r2, r1
 8000972:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000974:	2000      	movs	r0, #0
 8000976:	f000 f809 	bl	800098c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800097a:	f7ff fe07 	bl	800058c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097e:	2300      	movs	r3, #0
}
 8000980:	0018      	movs	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	40022000 	.word	0x40022000

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_InitTick+0x5c>)
 8000996:	681c      	ldr	r4, [r3, #0]
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_InitTick+0x60>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	0019      	movs	r1, r3
 800099e:	23fa      	movs	r3, #250	; 0xfa
 80009a0:	0098      	lsls	r0, r3, #2
 80009a2:	f7ff fbbb 	bl	800011c <__udivsi3>
 80009a6:	0003      	movs	r3, r0
 80009a8:	0019      	movs	r1, r3
 80009aa:	0020      	movs	r0, r4
 80009ac:	f7ff fbb6 	bl	800011c <__udivsi3>
 80009b0:	0003      	movs	r3, r0
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 f90b 	bl	8000bce <HAL_SYSTICK_Config>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	e00f      	b.n	80009e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d80b      	bhi.n	80009de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	2301      	movs	r3, #1
 80009ca:	425b      	negs	r3, r3
 80009cc:	2200      	movs	r2, #0
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 f8d8 	bl	8000b84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_InitTick+0x64>)
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	0018      	movs	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b003      	add	sp, #12
 80009e6:	bd90      	pop	{r4, r7, pc}
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000004 	.word	0x20000004

080009f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_IncTick+0x1c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	001a      	movs	r2, r3
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_IncTick+0x20>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	18d2      	adds	r2, r2, r3
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <HAL_IncTick+0x20>)
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	20000008 	.word	0x20000008
 8000a14:	200001a4 	.word	0x200001a4

08000a18 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <HAL_GetTick+0x10>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	200001a4 	.word	0x200001a4

08000a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	0002      	movs	r2, r0
 8000a34:	1dfb      	adds	r3, r7, #7
 8000a36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a3e:	d809      	bhi.n	8000a54 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	001a      	movs	r2, r3
 8000a46:	231f      	movs	r3, #31
 8000a48:	401a      	ands	r2, r3
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <__NVIC_EnableIRQ+0x30>)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4091      	lsls	r1, r2
 8000a50:	000a      	movs	r2, r1
 8000a52:	601a      	str	r2, [r3, #0]
  }
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b002      	add	sp, #8
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	e000e100 	.word	0xe000e100

08000a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	0002      	movs	r2, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b7f      	cmp	r3, #127	; 0x7f
 8000a74:	d828      	bhi.n	8000ac8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a76:	4a2f      	ldr	r2, [pc, #188]	; (8000b34 <__NVIC_SetPriority+0xd4>)
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b25b      	sxtb	r3, r3
 8000a7e:	089b      	lsrs	r3, r3, #2
 8000a80:	33c0      	adds	r3, #192	; 0xc0
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	589b      	ldr	r3, [r3, r2]
 8000a86:	1dfa      	adds	r2, r7, #7
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	400a      	ands	r2, r1
 8000a90:	00d2      	lsls	r2, r2, #3
 8000a92:	21ff      	movs	r1, #255	; 0xff
 8000a94:	4091      	lsls	r1, r2
 8000a96:	000a      	movs	r2, r1
 8000a98:	43d2      	mvns	r2, r2
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	019b      	lsls	r3, r3, #6
 8000aa2:	22ff      	movs	r2, #255	; 0xff
 8000aa4:	401a      	ands	r2, r3
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	0018      	movs	r0, r3
 8000aac:	2303      	movs	r3, #3
 8000aae:	4003      	ands	r3, r0
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab4:	481f      	ldr	r0, [pc, #124]	; (8000b34 <__NVIC_SetPriority+0xd4>)
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	089b      	lsrs	r3, r3, #2
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	33c0      	adds	r3, #192	; 0xc0
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ac6:	e031      	b.n	8000b2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <__NVIC_SetPriority+0xd8>)
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	0019      	movs	r1, r3
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	400b      	ands	r3, r1
 8000ad4:	3b08      	subs	r3, #8
 8000ad6:	089b      	lsrs	r3, r3, #2
 8000ad8:	3306      	adds	r3, #6
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	18d3      	adds	r3, r2, r3
 8000ade:	3304      	adds	r3, #4
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	1dfa      	adds	r2, r7, #7
 8000ae4:	7812      	ldrb	r2, [r2, #0]
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	2203      	movs	r2, #3
 8000aea:	400a      	ands	r2, r1
 8000aec:	00d2      	lsls	r2, r2, #3
 8000aee:	21ff      	movs	r1, #255	; 0xff
 8000af0:	4091      	lsls	r1, r2
 8000af2:	000a      	movs	r2, r1
 8000af4:	43d2      	mvns	r2, r2
 8000af6:	401a      	ands	r2, r3
 8000af8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	019b      	lsls	r3, r3, #6
 8000afe:	22ff      	movs	r2, #255	; 0xff
 8000b00:	401a      	ands	r2, r3
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	0018      	movs	r0, r3
 8000b08:	2303      	movs	r3, #3
 8000b0a:	4003      	ands	r3, r0
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b10:	4809      	ldr	r0, [pc, #36]	; (8000b38 <__NVIC_SetPriority+0xd8>)
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	001c      	movs	r4, r3
 8000b18:	230f      	movs	r3, #15
 8000b1a:	4023      	ands	r3, r4
 8000b1c:	3b08      	subs	r3, #8
 8000b1e:	089b      	lsrs	r3, r3, #2
 8000b20:	430a      	orrs	r2, r1
 8000b22:	3306      	adds	r3, #6
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	18c3      	adds	r3, r0, r3
 8000b28:	3304      	adds	r3, #4
 8000b2a:	601a      	str	r2, [r3, #0]
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b003      	add	sp, #12
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	1e5a      	subs	r2, r3, #1
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	045b      	lsls	r3, r3, #17
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d301      	bcc.n	8000b54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b50:	2301      	movs	r3, #1
 8000b52:	e010      	b.n	8000b76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <SysTick_Config+0x44>)
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	3a01      	subs	r2, #1
 8000b5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	425b      	negs	r3, r3
 8000b60:	2103      	movs	r1, #3
 8000b62:	0018      	movs	r0, r3
 8000b64:	f7ff ff7c 	bl	8000a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <SysTick_Config+0x44>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SysTick_Config+0x44>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	0018      	movs	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	e000e010 	.word	0xe000e010

08000b84 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	210f      	movs	r1, #15
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	1c02      	adds	r2, r0, #0
 8000b94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	b25b      	sxtb	r3, r3
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff ff5d 	bl	8000a60 <__NVIC_SetPriority>
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b004      	add	sp, #16
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	0002      	movs	r2, r0
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff ff33 	bl	8000a2c <__NVIC_EnableIRQ>
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b002      	add	sp, #8
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff ffaf 	bl	8000b3c <SysTick_Config>
 8000bde:	0003      	movs	r3, r0
}
 8000be0:	0018      	movs	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b002      	add	sp, #8
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d101      	bne.n	8000bfe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e036      	b.n	8000c6c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2221      	movs	r2, #33	; 0x21
 8000c02:	2102      	movs	r1, #2
 8000c04:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <HAL_DMA_Init+0x8c>)
 8000c12:	4013      	ands	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f000 f932 	bl	8000eb8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2221      	movs	r2, #33	; 0x21
 8000c5e:	2101      	movs	r1, #1
 8000c60:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2220      	movs	r2, #32
 8000c66:	2100      	movs	r1, #0
 8000c68:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
}  
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b004      	add	sp, #16
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	ffffc00f 	.word	0xffffc00f

08000c78 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2221      	movs	r2, #33	; 0x21
 8000c84:	5c9b      	ldrb	r3, [r3, r2]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d008      	beq.n	8000c9e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2204      	movs	r2, #4
 8000c90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2220      	movs	r2, #32
 8000c96:	2100      	movs	r1, #0
 8000c98:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e020      	b.n	8000ce0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	210e      	movs	r1, #14
 8000caa:	438a      	bics	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2101      	movs	r1, #1
 8000cba:	438a      	bics	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4091      	lsls	r1, r2
 8000cca:	000a      	movs	r2, r1
 8000ccc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2221      	movs	r2, #33	; 0x21
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2220      	movs	r2, #32
 8000cda:	2100      	movs	r1, #0
 8000cdc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b002      	add	sp, #8
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf0:	210f      	movs	r1, #15
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2221      	movs	r2, #33	; 0x21
 8000cfc:	5c9b      	ldrb	r3, [r3, r2]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d006      	beq.n	8000d12 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2204      	movs	r2, #4
 8000d08:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e028      	b.n	8000d64 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	210e      	movs	r1, #14
 8000d1e:	438a      	bics	r2, r1
 8000d20:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	438a      	bics	r2, r1
 8000d30:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4091      	lsls	r1, r2
 8000d3e:	000a      	movs	r2, r1
 8000d40:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2221      	movs	r2, #33	; 0x21
 8000d46:	2101      	movs	r1, #1
 8000d48:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2220      	movs	r2, #32
 8000d4e:	2100      	movs	r1, #0
 8000d50:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d004      	beq.n	8000d64 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	0010      	movs	r0, r2
 8000d62:	4798      	blx	r3
    } 
  }
  return status;
 8000d64:	230f      	movs	r3, #15
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	781b      	ldrb	r3, [r3, #0]
}
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b004      	add	sp, #16
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	2204      	movs	r2, #4
 8000d90:	409a      	lsls	r2, r3
 8000d92:	0013      	movs	r3, r2
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	4013      	ands	r3, r2
 8000d98:	d024      	beq.n	8000de4 <HAL_DMA_IRQHandler+0x72>
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	4013      	ands	r3, r2
 8000da0:	d020      	beq.n	8000de4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2220      	movs	r2, #32
 8000daa:	4013      	ands	r3, r2
 8000dac:	d107      	bne.n	8000dbe <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2104      	movs	r1, #4
 8000dba:	438a      	bics	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	000a      	movs	r2, r1
 8000dcc:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d100      	bne.n	8000dd8 <HAL_DMA_IRQHandler+0x66>
 8000dd6:	e06a      	b.n	8000eae <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	0010      	movs	r0, r2
 8000de0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000de2:	e064      	b.n	8000eae <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	2202      	movs	r2, #2
 8000dea:	409a      	lsls	r2, r3
 8000dec:	0013      	movs	r3, r2
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	4013      	ands	r3, r2
 8000df2:	d02b      	beq.n	8000e4c <HAL_DMA_IRQHandler+0xda>
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	2202      	movs	r2, #2
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d027      	beq.n	8000e4c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2220      	movs	r2, #32
 8000e04:	4013      	ands	r3, r2
 8000e06:	d10b      	bne.n	8000e20 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	210a      	movs	r1, #10
 8000e14:	438a      	bics	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2221      	movs	r2, #33	; 0x21
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4091      	lsls	r1, r2
 8000e2c:	000a      	movs	r2, r1
 8000e2e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2220      	movs	r2, #32
 8000e34:	2100      	movs	r1, #0
 8000e36:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d036      	beq.n	8000eae <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	0010      	movs	r0, r2
 8000e48:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000e4a:	e030      	b.n	8000eae <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	2208      	movs	r2, #8
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d028      	beq.n	8000eae <HAL_DMA_IRQHandler+0x13c>
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	2208      	movs	r2, #8
 8000e60:	4013      	ands	r3, r2
 8000e62:	d024      	beq.n	8000eae <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	210e      	movs	r1, #14
 8000e70:	438a      	bics	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	4091      	lsls	r1, r2
 8000e80:	000a      	movs	r2, r1
 8000e82:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2201      	movs	r2, #1
 8000e88:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2221      	movs	r2, #33	; 0x21
 8000e8e:	2101      	movs	r1, #1
 8000e90:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2220      	movs	r2, #32
 8000e96:	2100      	movs	r1, #0
 8000e98:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d005      	beq.n	8000eae <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	0010      	movs	r0, r2
 8000eaa:	4798      	blx	r3
    }
   }
}  
 8000eac:	e7ff      	b.n	8000eae <HAL_DMA_IRQHandler+0x13c>
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b004      	add	sp, #16
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <DMA_CalcBaseAndBitshift+0x30>)
 8000ec6:	4694      	mov	ip, r2
 8000ec8:	4463      	add	r3, ip
 8000eca:	2114      	movs	r1, #20
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f7ff f925 	bl	800011c <__udivsi3>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	009a      	lsls	r2, r3, #2
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a03      	ldr	r2, [pc, #12]	; (8000eec <DMA_CalcBaseAndBitshift+0x34>)
 8000ede:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	bffdfff8 	.word	0xbffdfff8
 8000eec:	40020000 	.word	0x40020000

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efe:	e14f      	b.n	80011a0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2101      	movs	r1, #1
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	4091      	lsls	r1, r2
 8000f0a:	000a      	movs	r2, r1
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d100      	bne.n	8000f18 <HAL_GPIO_Init+0x28>
 8000f16:	e140      	b.n	800119a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d005      	beq.n	8000f30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2203      	movs	r2, #3
 8000f2a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d130      	bne.n	8000f92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	0013      	movs	r3, r2
 8000f40:	43da      	mvns	r2, r3
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	409a      	lsls	r2, r3
 8000f52:	0013      	movs	r3, r2
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f66:	2201      	movs	r2, #1
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	091b      	lsrs	r3, r3, #4
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
 8000f84:	0013      	movs	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2203      	movs	r2, #3
 8000f98:	4013      	ands	r3, r2
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d017      	beq.n	8000fce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2203      	movs	r2, #3
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d123      	bne.n	8001022 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	08da      	lsrs	r2, r3, #3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3208      	adds	r2, #8
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	58d3      	ldr	r3, [r2, r3]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	2207      	movs	r2, #7
 8000fec:	4013      	ands	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	691a      	ldr	r2, [r3, #16]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2107      	movs	r1, #7
 8001006:	400b      	ands	r3, r1
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	08da      	lsrs	r2, r3, #3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3208      	adds	r2, #8
 800101c:	0092      	lsls	r2, r2, #2
 800101e:	6939      	ldr	r1, [r7, #16]
 8001020:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	43da      	mvns	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2203      	movs	r2, #3
 8001040:	401a      	ands	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	409a      	lsls	r2, r3
 8001048:	0013      	movs	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	23c0      	movs	r3, #192	; 0xc0
 800105c:	029b      	lsls	r3, r3, #10
 800105e:	4013      	ands	r3, r2
 8001060:	d100      	bne.n	8001064 <HAL_GPIO_Init+0x174>
 8001062:	e09a      	b.n	800119a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001064:	4b54      	ldr	r3, [pc, #336]	; (80011b8 <HAL_GPIO_Init+0x2c8>)
 8001066:	699a      	ldr	r2, [r3, #24]
 8001068:	4b53      	ldr	r3, [pc, #332]	; (80011b8 <HAL_GPIO_Init+0x2c8>)
 800106a:	2101      	movs	r1, #1
 800106c:	430a      	orrs	r2, r1
 800106e:	619a      	str	r2, [r3, #24]
 8001070:	4b51      	ldr	r3, [pc, #324]	; (80011b8 <HAL_GPIO_Init+0x2c8>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	2201      	movs	r2, #1
 8001076:	4013      	ands	r3, r2
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800107c:	4a4f      	ldr	r2, [pc, #316]	; (80011bc <HAL_GPIO_Init+0x2cc>)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3302      	adds	r3, #2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	589b      	ldr	r3, [r3, r2]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2203      	movs	r2, #3
 800108e:	4013      	ands	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	220f      	movs	r2, #15
 8001094:	409a      	lsls	r2, r3
 8001096:	0013      	movs	r3, r2
 8001098:	43da      	mvns	r2, r3
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	2390      	movs	r3, #144	; 0x90
 80010a4:	05db      	lsls	r3, r3, #23
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0x1e2>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a44      	ldr	r2, [pc, #272]	; (80011c0 <HAL_GPIO_Init+0x2d0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00d      	beq.n	80010ce <HAL_GPIO_Init+0x1de>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a43      	ldr	r2, [pc, #268]	; (80011c4 <HAL_GPIO_Init+0x2d4>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x1da>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a42      	ldr	r2, [pc, #264]	; (80011c8 <HAL_GPIO_Init+0x2d8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_GPIO_Init+0x1d6>
 80010c2:	2303      	movs	r3, #3
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x1e4>
 80010c6:	2305      	movs	r3, #5
 80010c8:	e004      	b.n	80010d4 <HAL_GPIO_Init+0x1e4>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e002      	b.n	80010d4 <HAL_GPIO_Init+0x1e4>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <HAL_GPIO_Init+0x1e4>
 80010d2:	2300      	movs	r3, #0
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	2103      	movs	r1, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0092      	lsls	r2, r2, #2
 80010dc:	4093      	lsls	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010e4:	4935      	ldr	r1, [pc, #212]	; (80011bc <HAL_GPIO_Init+0x2cc>)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f2:	4b36      	ldr	r3, [pc, #216]	; (80011cc <HAL_GPIO_Init+0x2dc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43da      	mvns	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	025b      	lsls	r3, r3, #9
 800110a:	4013      	ands	r3, r2
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001116:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <HAL_GPIO_Init+0x2dc>)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <HAL_GPIO_Init+0x2dc>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	43da      	mvns	r2, r3
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	029b      	lsls	r3, r3, #10
 8001134:	4013      	ands	r3, r2
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <HAL_GPIO_Init+0x2dc>)
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <HAL_GPIO_Init+0x2dc>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43da      	mvns	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	035b      	lsls	r3, r3, #13
 800115e:	4013      	ands	r3, r2
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_GPIO_Init+0x2dc>)
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_GPIO_Init+0x2dc>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43da      	mvns	r2, r3
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	039b      	lsls	r3, r3, #14
 8001188:	4013      	ands	r3, r2
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HAL_GPIO_Init+0x2dc>)
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3301      	adds	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	40da      	lsrs	r2, r3
 80011a8:	1e13      	subs	r3, r2, #0
 80011aa:	d000      	beq.n	80011ae <HAL_GPIO_Init+0x2be>
 80011ac:	e6a8      	b.n	8000f00 <HAL_GPIO_Init+0x10>
  } 
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b006      	add	sp, #24
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010000 	.word	0x40010000
 80011c0:	48000400 	.word	0x48000400
 80011c4:	48000800 	.word	0x48000800
 80011c8:	48000c00 	.word	0x48000c00
 80011cc:	40010400 	.word	0x40010400

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	0008      	movs	r0, r1
 80011da:	0011      	movs	r1, r2
 80011dc:	1cbb      	adds	r3, r7, #2
 80011de:	1c02      	adds	r2, r0, #0
 80011e0:	801a      	strh	r2, [r3, #0]
 80011e2:	1c7b      	adds	r3, r7, #1
 80011e4:	1c0a      	adds	r2, r1, #0
 80011e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011e8:	1c7b      	adds	r3, r7, #1
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d004      	beq.n	80011fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f0:	1cbb      	adds	r3, r7, #2
 80011f2:	881a      	ldrh	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011f8:	e003      	b.n	8001202 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011fa:	1cbb      	adds	r3, r7, #2
 80011fc:	881a      	ldrh	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	b002      	add	sp, #8
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b084      	sub	sp, #16
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	000a      	movs	r2, r1
 8001214:	1cbb      	adds	r3, r7, #2
 8001216:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800121e:	1cbb      	adds	r3, r7, #2
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	4013      	ands	r3, r2
 8001226:	041a      	lsls	r2, r3, #16
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43db      	mvns	r3, r3
 800122c:	1cb9      	adds	r1, r7, #2
 800122e:	8809      	ldrh	r1, [r1, #0]
 8001230:	400b      	ands	r3, r1
 8001232:	431a      	orrs	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	619a      	str	r2, [r3, #24]
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b004      	add	sp, #16
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e082      	b.n	8001358 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2241      	movs	r2, #65	; 0x41
 8001256:	5c9b      	ldrb	r3, [r3, r2]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d107      	bne.n	800126e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2240      	movs	r2, #64	; 0x40
 8001262:	2100      	movs	r1, #0
 8001264:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff f9b3 	bl	80005d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2241      	movs	r2, #65	; 0x41
 8001272:	2124      	movs	r1, #36	; 0x24
 8001274:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2101      	movs	r1, #1
 8001282:	438a      	bics	r2, r1
 8001284:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4934      	ldr	r1, [pc, #208]	; (8001360 <HAL_I2C_Init+0x120>)
 8001290:	400a      	ands	r2, r1
 8001292:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4931      	ldr	r1, [pc, #196]	; (8001364 <HAL_I2C_Init+0x124>)
 80012a0:	400a      	ands	r2, r1
 80012a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d108      	bne.n	80012be <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	0209      	lsls	r1, r1, #8
 80012b8:	430a      	orrs	r2, r1
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	e007      	b.n	80012ce <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2184      	movs	r1, #132	; 0x84
 80012c8:	0209      	lsls	r1, r1, #8
 80012ca:	430a      	orrs	r2, r1
 80012cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d104      	bne.n	80012e0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	0112      	lsls	r2, r2, #4
 80012de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	491f      	ldr	r1, [pc, #124]	; (8001368 <HAL_I2C_Init+0x128>)
 80012ec:	430a      	orrs	r2, r1
 80012ee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	491a      	ldr	r1, [pc, #104]	; (8001364 <HAL_I2C_Init+0x124>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	431a      	orrs	r2, r3
 800130a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69d9      	ldr	r1, [r3, #28]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1a      	ldr	r2, [r3, #32]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2101      	movs	r1, #1
 8001336:	430a      	orrs	r2, r1
 8001338:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2241      	movs	r2, #65	; 0x41
 8001344:	2120      	movs	r1, #32
 8001346:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2242      	movs	r2, #66	; 0x42
 8001352:	2100      	movs	r1, #0
 8001354:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	0018      	movs	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	b002      	add	sp, #8
 800135e:	bd80      	pop	{r7, pc}
 8001360:	f0ffffff 	.word	0xf0ffffff
 8001364:	ffff7fff 	.word	0xffff7fff
 8001368:	02008000 	.word	0x02008000

0800136c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2241      	movs	r2, #65	; 0x41
 800137a:	5c9b      	ldrb	r3, [r3, r2]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b20      	cmp	r3, #32
 8001380:	d138      	bne.n	80013f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2240      	movs	r2, #64	; 0x40
 8001386:	5c9b      	ldrb	r3, [r3, r2]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d101      	bne.n	8001390 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800138c:	2302      	movs	r3, #2
 800138e:	e032      	b.n	80013f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2240      	movs	r2, #64	; 0x40
 8001394:	2101      	movs	r1, #1
 8001396:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2241      	movs	r2, #65	; 0x41
 800139c:	2124      	movs	r1, #36	; 0x24
 800139e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2101      	movs	r1, #1
 80013ac:	438a      	bics	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4911      	ldr	r1, [pc, #68]	; (8001400 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80013bc:	400a      	ands	r2, r1
 80013be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6819      	ldr	r1, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2101      	movs	r1, #1
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2241      	movs	r2, #65	; 0x41
 80013e4:	2120      	movs	r1, #32
 80013e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2240      	movs	r2, #64	; 0x40
 80013ec:	2100      	movs	r1, #0
 80013ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	e000      	b.n	80013f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013f4:	2302      	movs	r3, #2
  }
}
 80013f6:	0018      	movs	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b002      	add	sp, #8
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	ffffefff 	.word	0xffffefff

08001404 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2241      	movs	r2, #65	; 0x41
 8001412:	5c9b      	ldrb	r3, [r3, r2]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b20      	cmp	r3, #32
 8001418:	d139      	bne.n	800148e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2240      	movs	r2, #64	; 0x40
 800141e:	5c9b      	ldrb	r3, [r3, r2]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001424:	2302      	movs	r3, #2
 8001426:	e033      	b.n	8001490 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2240      	movs	r2, #64	; 0x40
 800142c:	2101      	movs	r1, #1
 800142e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2241      	movs	r2, #65	; 0x41
 8001434:	2124      	movs	r1, #36	; 0x24
 8001436:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2101      	movs	r1, #1
 8001444:	438a      	bics	r2, r1
 8001446:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4a11      	ldr	r2, [pc, #68]	; (8001498 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001454:	4013      	ands	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2101      	movs	r1, #1
 8001476:	430a      	orrs	r2, r1
 8001478:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2241      	movs	r2, #65	; 0x41
 800147e:	2120      	movs	r1, #32
 8001480:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2240      	movs	r2, #64	; 0x40
 8001486:	2100      	movs	r1, #0
 8001488:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800148e:	2302      	movs	r3, #2
  }
}
 8001490:	0018      	movs	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	b004      	add	sp, #16
 8001496:	bd80      	pop	{r7, pc}
 8001498:	fffff0ff 	.word	0xfffff0ff

0800149c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e301      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2201      	movs	r2, #1
 80014b4:	4013      	ands	r3, r2
 80014b6:	d100      	bne.n	80014ba <HAL_RCC_OscConfig+0x1e>
 80014b8:	e08d      	b.n	80015d6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014ba:	4bc3      	ldr	r3, [pc, #780]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	220c      	movs	r2, #12
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d00e      	beq.n	80014e4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c6:	4bc0      	ldr	r3, [pc, #768]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	220c      	movs	r2, #12
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d116      	bne.n	8001500 <HAL_RCC_OscConfig+0x64>
 80014d2:	4bbd      	ldr	r3, [pc, #756]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	025b      	lsls	r3, r3, #9
 80014da:	401a      	ands	r2, r3
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	025b      	lsls	r3, r3, #9
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d10d      	bne.n	8001500 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	4bb8      	ldr	r3, [pc, #736]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	029b      	lsls	r3, r3, #10
 80014ec:	4013      	ands	r3, r2
 80014ee:	d100      	bne.n	80014f2 <HAL_RCC_OscConfig+0x56>
 80014f0:	e070      	b.n	80015d4 <HAL_RCC_OscConfig+0x138>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d000      	beq.n	80014fc <HAL_RCC_OscConfig+0x60>
 80014fa:	e06b      	b.n	80015d4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e2d8      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d107      	bne.n	8001518 <HAL_RCC_OscConfig+0x7c>
 8001508:	4baf      	ldr	r3, [pc, #700]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4bae      	ldr	r3, [pc, #696]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	0249      	lsls	r1, r1, #9
 8001512:	430a      	orrs	r2, r1
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e02f      	b.n	8001578 <HAL_RCC_OscConfig+0xdc>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10c      	bne.n	800153a <HAL_RCC_OscConfig+0x9e>
 8001520:	4ba9      	ldr	r3, [pc, #676]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4ba8      	ldr	r3, [pc, #672]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001526:	49a9      	ldr	r1, [pc, #676]	; (80017cc <HAL_RCC_OscConfig+0x330>)
 8001528:	400a      	ands	r2, r1
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	4ba6      	ldr	r3, [pc, #664]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4ba5      	ldr	r3, [pc, #660]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001532:	49a7      	ldr	r1, [pc, #668]	; (80017d0 <HAL_RCC_OscConfig+0x334>)
 8001534:	400a      	ands	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e01e      	b.n	8001578 <HAL_RCC_OscConfig+0xdc>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b05      	cmp	r3, #5
 8001540:	d10e      	bne.n	8001560 <HAL_RCC_OscConfig+0xc4>
 8001542:	4ba1      	ldr	r3, [pc, #644]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4ba0      	ldr	r3, [pc, #640]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	02c9      	lsls	r1, r1, #11
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	4b9d      	ldr	r3, [pc, #628]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b9c      	ldr	r3, [pc, #624]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	0249      	lsls	r1, r1, #9
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0xdc>
 8001560:	4b99      	ldr	r3, [pc, #612]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b98      	ldr	r3, [pc, #608]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001566:	4999      	ldr	r1, [pc, #612]	; (80017cc <HAL_RCC_OscConfig+0x330>)
 8001568:	400a      	ands	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	4b96      	ldr	r3, [pc, #600]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b95      	ldr	r3, [pc, #596]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001572:	4997      	ldr	r1, [pc, #604]	; (80017d0 <HAL_RCC_OscConfig+0x334>)
 8001574:	400a      	ands	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d014      	beq.n	80015aa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fa4a 	bl	8000a18 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158a:	f7ff fa45 	bl	8000a18 <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b64      	cmp	r3, #100	; 0x64
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e28a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159c:	4b8a      	ldr	r3, [pc, #552]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	029b      	lsls	r3, r3, #10
 80015a4:	4013      	ands	r3, r2
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0xee>
 80015a8:	e015      	b.n	80015d6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fa35 	bl	8000a18 <HAL_GetTick>
 80015ae:	0003      	movs	r3, r0
 80015b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fa30 	bl	8000a18 <HAL_GetTick>
 80015b8:	0002      	movs	r2, r0
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e275      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	4b80      	ldr	r3, [pc, #512]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	029b      	lsls	r3, r3, #10
 80015ce:	4013      	ands	r3, r2
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x118>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2202      	movs	r2, #2
 80015dc:	4013      	ands	r3, r2
 80015de:	d100      	bne.n	80015e2 <HAL_RCC_OscConfig+0x146>
 80015e0:	e069      	b.n	80016b6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015e2:	4b79      	ldr	r3, [pc, #484]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	220c      	movs	r2, #12
 80015e8:	4013      	ands	r3, r2
 80015ea:	d00b      	beq.n	8001604 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015ec:	4b76      	ldr	r3, [pc, #472]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	220c      	movs	r2, #12
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d11c      	bne.n	8001632 <HAL_RCC_OscConfig+0x196>
 80015f8:	4b73      	ldr	r3, [pc, #460]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	025b      	lsls	r3, r3, #9
 8001600:	4013      	ands	r3, r2
 8001602:	d116      	bne.n	8001632 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001604:	4b70      	ldr	r3, [pc, #448]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2202      	movs	r2, #2
 800160a:	4013      	ands	r3, r2
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x17e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e24b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161a:	4b6b      	ldr	r3, [pc, #428]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	22f8      	movs	r2, #248	; 0xf8
 8001620:	4393      	bics	r3, r2
 8001622:	0019      	movs	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	00da      	lsls	r2, r3, #3
 800162a:	4b67      	ldr	r3, [pc, #412]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800162c:	430a      	orrs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001630:	e041      	b.n	80016b6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d024      	beq.n	8001684 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163a:	4b63      	ldr	r3, [pc, #396]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4b62      	ldr	r3, [pc, #392]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001640:	2101      	movs	r1, #1
 8001642:	430a      	orrs	r2, r1
 8001644:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff f9e7 	bl	8000a18 <HAL_GetTick>
 800164a:	0003      	movs	r3, r0
 800164c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001650:	f7ff f9e2 	bl	8000a18 <HAL_GetTick>
 8001654:	0002      	movs	r2, r0
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e227      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001662:	4b59      	ldr	r3, [pc, #356]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2202      	movs	r2, #2
 8001668:	4013      	ands	r3, r2
 800166a:	d0f1      	beq.n	8001650 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166c:	4b56      	ldr	r3, [pc, #344]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	22f8      	movs	r2, #248	; 0xf8
 8001672:	4393      	bics	r3, r2
 8001674:	0019      	movs	r1, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	00da      	lsls	r2, r3, #3
 800167c:	4b52      	ldr	r3, [pc, #328]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800167e:	430a      	orrs	r2, r1
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	e018      	b.n	80016b6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001684:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800168a:	2101      	movs	r1, #1
 800168c:	438a      	bics	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff f9c2 	bl	8000a18 <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169a:	f7ff f9bd 	bl	8000a18 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e202      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ac:	4b46      	ldr	r3, [pc, #280]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2202      	movs	r2, #2
 80016b2:	4013      	ands	r3, r2
 80016b4:	d1f1      	bne.n	800169a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2208      	movs	r2, #8
 80016bc:	4013      	ands	r3, r2
 80016be:	d036      	beq.n	800172e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d019      	beq.n	80016fc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c8:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80016ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016cc:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	430a      	orrs	r2, r1
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d4:	f7ff f9a0 	bl	8000a18 <HAL_GetTick>
 80016d8:	0003      	movs	r3, r0
 80016da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff f99b 	bl	8000a18 <HAL_GetTick>
 80016e2:	0002      	movs	r2, r0
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1e0      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f0:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	2202      	movs	r2, #2
 80016f6:	4013      	ands	r3, r2
 80016f8:	d0f1      	beq.n	80016de <HAL_RCC_OscConfig+0x242>
 80016fa:	e018      	b.n	800172e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fc:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80016fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001700:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001702:	2101      	movs	r1, #1
 8001704:	438a      	bics	r2, r1
 8001706:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001708:	f7ff f986 	bl	8000a18 <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001712:	f7ff f981 	bl	8000a18 <HAL_GetTick>
 8001716:	0002      	movs	r2, r0
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e1c6      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	2202      	movs	r2, #2
 800172a:	4013      	ands	r3, r2
 800172c:	d1f1      	bne.n	8001712 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2204      	movs	r2, #4
 8001734:	4013      	ands	r3, r2
 8001736:	d100      	bne.n	800173a <HAL_RCC_OscConfig+0x29e>
 8001738:	e0b4      	b.n	80018a4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173a:	201f      	movs	r0, #31
 800173c:	183b      	adds	r3, r7, r0
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001744:	69da      	ldr	r2, [r3, #28]
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	055b      	lsls	r3, r3, #21
 800174a:	4013      	ands	r3, r2
 800174c:	d110      	bne.n	8001770 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001750:	69da      	ldr	r2, [r3, #28]
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 8001754:	2180      	movs	r1, #128	; 0x80
 8001756:	0549      	lsls	r1, r1, #21
 8001758:	430a      	orrs	r2, r1
 800175a:	61da      	str	r2, [r3, #28]
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 800175e:	69da      	ldr	r2, [r3, #28]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	055b      	lsls	r3, r3, #21
 8001764:	4013      	ands	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800176a:	183b      	adds	r3, r7, r0
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <HAL_RCC_OscConfig+0x338>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4013      	ands	r3, r2
 800177a:	d11a      	bne.n	80017b2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_RCC_OscConfig+0x338>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_RCC_OscConfig+0x338>)
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	0049      	lsls	r1, r1, #1
 8001786:	430a      	orrs	r2, r1
 8001788:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800178a:	f7ff f945 	bl	8000a18 <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001794:	f7ff f940 	bl	8000a18 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	; 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e185      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_OscConfig+0x338>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4013      	ands	r3, r2
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d10e      	bne.n	80017d8 <HAL_RCC_OscConfig+0x33c>
 80017ba:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80017bc:	6a1a      	ldr	r2, [r3, #32]
 80017be:	4b02      	ldr	r3, [pc, #8]	; (80017c8 <HAL_RCC_OscConfig+0x32c>)
 80017c0:	2101      	movs	r1, #1
 80017c2:	430a      	orrs	r2, r1
 80017c4:	621a      	str	r2, [r3, #32]
 80017c6:	e035      	b.n	8001834 <HAL_RCC_OscConfig+0x398>
 80017c8:	40021000 	.word	0x40021000
 80017cc:	fffeffff 	.word	0xfffeffff
 80017d0:	fffbffff 	.word	0xfffbffff
 80017d4:	40007000 	.word	0x40007000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10c      	bne.n	80017fa <HAL_RCC_OscConfig+0x35e>
 80017e0:	4bb6      	ldr	r3, [pc, #728]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80017e2:	6a1a      	ldr	r2, [r3, #32]
 80017e4:	4bb5      	ldr	r3, [pc, #724]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	438a      	bics	r2, r1
 80017ea:	621a      	str	r2, [r3, #32]
 80017ec:	4bb3      	ldr	r3, [pc, #716]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80017ee:	6a1a      	ldr	r2, [r3, #32]
 80017f0:	4bb2      	ldr	r3, [pc, #712]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80017f2:	2104      	movs	r1, #4
 80017f4:	438a      	bics	r2, r1
 80017f6:	621a      	str	r2, [r3, #32]
 80017f8:	e01c      	b.n	8001834 <HAL_RCC_OscConfig+0x398>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b05      	cmp	r3, #5
 8001800:	d10c      	bne.n	800181c <HAL_RCC_OscConfig+0x380>
 8001802:	4bae      	ldr	r3, [pc, #696]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001804:	6a1a      	ldr	r2, [r3, #32]
 8001806:	4bad      	ldr	r3, [pc, #692]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001808:	2104      	movs	r1, #4
 800180a:	430a      	orrs	r2, r1
 800180c:	621a      	str	r2, [r3, #32]
 800180e:	4bab      	ldr	r3, [pc, #684]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001810:	6a1a      	ldr	r2, [r3, #32]
 8001812:	4baa      	ldr	r3, [pc, #680]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001814:	2101      	movs	r1, #1
 8001816:	430a      	orrs	r2, r1
 8001818:	621a      	str	r2, [r3, #32]
 800181a:	e00b      	b.n	8001834 <HAL_RCC_OscConfig+0x398>
 800181c:	4ba7      	ldr	r3, [pc, #668]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800181e:	6a1a      	ldr	r2, [r3, #32]
 8001820:	4ba6      	ldr	r3, [pc, #664]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001822:	2101      	movs	r1, #1
 8001824:	438a      	bics	r2, r1
 8001826:	621a      	str	r2, [r3, #32]
 8001828:	4ba4      	ldr	r3, [pc, #656]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800182a:	6a1a      	ldr	r2, [r3, #32]
 800182c:	4ba3      	ldr	r3, [pc, #652]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800182e:	2104      	movs	r1, #4
 8001830:	438a      	bics	r2, r1
 8001832:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d014      	beq.n	8001866 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183c:	f7ff f8ec 	bl	8000a18 <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001844:	e009      	b.n	800185a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7ff f8e7 	bl	8000a18 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	4a9b      	ldr	r2, [pc, #620]	; (8001ac0 <HAL_RCC_OscConfig+0x624>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e12b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185a:	4b98      	ldr	r3, [pc, #608]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	2202      	movs	r2, #2
 8001860:	4013      	ands	r3, r2
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x3aa>
 8001864:	e013      	b.n	800188e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7ff f8d7 	bl	8000a18 <HAL_GetTick>
 800186a:	0003      	movs	r3, r0
 800186c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186e:	e009      	b.n	8001884 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001870:	f7ff f8d2 	bl	8000a18 <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	4a91      	ldr	r2, [pc, #580]	; (8001ac0 <HAL_RCC_OscConfig+0x624>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e116      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001884:	4b8d      	ldr	r3, [pc, #564]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	2202      	movs	r2, #2
 800188a:	4013      	ands	r3, r2
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800188e:	231f      	movs	r3, #31
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d105      	bne.n	80018a4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001898:	4b88      	ldr	r3, [pc, #544]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800189a:	69da      	ldr	r2, [r3, #28]
 800189c:	4b87      	ldr	r3, [pc, #540]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800189e:	4989      	ldr	r1, [pc, #548]	; (8001ac4 <HAL_RCC_OscConfig+0x628>)
 80018a0:	400a      	ands	r2, r1
 80018a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2210      	movs	r2, #16
 80018aa:	4013      	ands	r3, r2
 80018ac:	d063      	beq.n	8001976 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d12a      	bne.n	800190c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018b6:	4b81      	ldr	r3, [pc, #516]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80018b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ba:	4b80      	ldr	r3, [pc, #512]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80018bc:	2104      	movs	r1, #4
 80018be:	430a      	orrs	r2, r1
 80018c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018c2:	4b7e      	ldr	r3, [pc, #504]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80018c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018c6:	4b7d      	ldr	r3, [pc, #500]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80018c8:	2101      	movs	r1, #1
 80018ca:	430a      	orrs	r2, r1
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ce:	f7ff f8a3 	bl	8000a18 <HAL_GetTick>
 80018d2:	0003      	movs	r3, r0
 80018d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018d8:	f7ff f89e 	bl	8000a18 <HAL_GetTick>
 80018dc:	0002      	movs	r2, r0
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e0e3      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018ea:	4b74      	ldr	r3, [pc, #464]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80018ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ee:	2202      	movs	r2, #2
 80018f0:	4013      	ands	r3, r2
 80018f2:	d0f1      	beq.n	80018d8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018f4:	4b71      	ldr	r3, [pc, #452]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80018f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f8:	22f8      	movs	r2, #248	; 0xf8
 80018fa:	4393      	bics	r3, r2
 80018fc:	0019      	movs	r1, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	00da      	lsls	r2, r3, #3
 8001904:	4b6d      	ldr	r3, [pc, #436]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001906:	430a      	orrs	r2, r1
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
 800190a:	e034      	b.n	8001976 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	3305      	adds	r3, #5
 8001912:	d111      	bne.n	8001938 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001914:	4b69      	ldr	r3, [pc, #420]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001918:	4b68      	ldr	r3, [pc, #416]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800191a:	2104      	movs	r1, #4
 800191c:	438a      	bics	r2, r1
 800191e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001920:	4b66      	ldr	r3, [pc, #408]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001924:	22f8      	movs	r2, #248	; 0xf8
 8001926:	4393      	bics	r3, r2
 8001928:	0019      	movs	r1, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	00da      	lsls	r2, r3, #3
 8001930:	4b62      	ldr	r3, [pc, #392]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001932:	430a      	orrs	r2, r1
 8001934:	635a      	str	r2, [r3, #52]	; 0x34
 8001936:	e01e      	b.n	8001976 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001938:	4b60      	ldr	r3, [pc, #384]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800193a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800193c:	4b5f      	ldr	r3, [pc, #380]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800193e:	2104      	movs	r1, #4
 8001940:	430a      	orrs	r2, r1
 8001942:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001944:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001948:	4b5c      	ldr	r3, [pc, #368]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800194a:	2101      	movs	r1, #1
 800194c:	438a      	bics	r2, r1
 800194e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff f862 	bl	8000a18 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800195a:	f7ff f85d 	bl	8000a18 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e0a2      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800196c:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800196e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001970:	2202      	movs	r2, #2
 8001972:	4013      	ands	r3, r2
 8001974:	d1f1      	bne.n	800195a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d100      	bne.n	8001980 <HAL_RCC_OscConfig+0x4e4>
 800197e:	e097      	b.n	8001ab0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001980:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	220c      	movs	r2, #12
 8001986:	4013      	ands	r3, r2
 8001988:	2b08      	cmp	r3, #8
 800198a:	d100      	bne.n	800198e <HAL_RCC_OscConfig+0x4f2>
 800198c:	e06b      	b.n	8001a66 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d14c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001996:	4b49      	ldr	r3, [pc, #292]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4b48      	ldr	r3, [pc, #288]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 800199c:	494a      	ldr	r1, [pc, #296]	; (8001ac8 <HAL_RCC_OscConfig+0x62c>)
 800199e:	400a      	ands	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff f839 	bl	8000a18 <HAL_GetTick>
 80019a6:	0003      	movs	r3, r0
 80019a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff f834 	bl	8000a18 <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e079      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019be:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	049b      	lsls	r3, r3, #18
 80019c6:	4013      	ands	r3, r2
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ca:	4b3c      	ldr	r3, [pc, #240]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	220f      	movs	r2, #15
 80019d0:	4393      	bics	r3, r2
 80019d2:	0019      	movs	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d8:	4b38      	ldr	r3, [pc, #224]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80019da:	430a      	orrs	r2, r1
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80019de:	4b37      	ldr	r3, [pc, #220]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4a3a      	ldr	r2, [pc, #232]	; (8001acc <HAL_RCC_OscConfig+0x630>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	431a      	orrs	r2, r3
 80019f2:	4b32      	ldr	r3, [pc, #200]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80019f4:	430a      	orrs	r2, r1
 80019f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f8:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b2f      	ldr	r3, [pc, #188]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 80019fe:	2180      	movs	r1, #128	; 0x80
 8001a00:	0449      	lsls	r1, r1, #17
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a06:	f7ff f807 	bl	8000a18 <HAL_GetTick>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff f802 	bl	8000a18 <HAL_GetTick>
 8001a14:	0002      	movs	r2, r0
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e047      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	049b      	lsls	r3, r3, #18
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x574>
 8001a2e:	e03f      	b.n	8001ab0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001a36:	4924      	ldr	r1, [pc, #144]	; (8001ac8 <HAL_RCC_OscConfig+0x62c>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7fe ffec 	bl	8000a18 <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a46:	f7fe ffe7 	bl	8000a18 <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e02c      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	049b      	lsls	r3, r3, #18
 8001a60:	4013      	ands	r3, r2
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x5aa>
 8001a64:	e024      	b.n	8001ab0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e01f      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_RCC_OscConfig+0x620>)
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	025b      	lsls	r3, r3, #9
 8001a84:	401a      	ands	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d10e      	bne.n	8001aac <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	220f      	movs	r2, #15
 8001a92:	401a      	ands	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d107      	bne.n	8001aac <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	23f0      	movs	r3, #240	; 0xf0
 8001aa0:	039b      	lsls	r3, r3, #14
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b008      	add	sp, #32
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	00001388 	.word	0x00001388
 8001ac4:	efffffff 	.word	0xefffffff
 8001ac8:	feffffff 	.word	0xfeffffff
 8001acc:	ffc2ffff 	.word	0xffc2ffff

08001ad0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0b3      	b.n	8001c4c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <HAL_RCC_ClockConfig+0x184>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4013      	ands	r3, r2
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d911      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <HAL_RCC_ClockConfig+0x184>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2201      	movs	r2, #1
 8001af8:	4393      	bics	r3, r2
 8001afa:	0019      	movs	r1, r3
 8001afc:	4b55      	ldr	r3, [pc, #340]	; (8001c54 <HAL_RCC_ClockConfig+0x184>)
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b04:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_ClockConfig+0x184>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e09a      	b.n	8001c4c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d015      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2204      	movs	r2, #4
 8001b26:	4013      	ands	r3, r2
 8001b28:	d006      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b2a:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001b30:	21e0      	movs	r1, #224	; 0xe0
 8001b32:	00c9      	lsls	r1, r1, #3
 8001b34:	430a      	orrs	r2, r1
 8001b36:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b38:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	22f0      	movs	r2, #240	; 0xf0
 8001b3e:	4393      	bics	r3, r2
 8001b40:	0019      	movs	r1, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2201      	movs	r2, #1
 8001b52:	4013      	ands	r3, r2
 8001b54:	d040      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	4b3e      	ldr	r3, [pc, #248]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	029b      	lsls	r3, r3, #10
 8001b66:	4013      	ands	r3, r2
 8001b68:	d114      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e06e      	b.n	8001c4c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	049b      	lsls	r3, r3, #18
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d108      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e062      	b.n	8001c4c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b86:	4b34      	ldr	r3, [pc, #208]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e05b      	b.n	8001c4c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	4393      	bics	r3, r2
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba8:	f7fe ff36 	bl	8000a18 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb0:	e009      	b.n	8001bc6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb2:	f7fe ff31 	bl	8000a18 <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	4a27      	ldr	r2, [pc, #156]	; (8001c5c <HAL_RCC_ClockConfig+0x18c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e042      	b.n	8001c4c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	220c      	movs	r2, #12
 8001bcc:	401a      	ands	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d1ec      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_RCC_ClockConfig+0x184>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4013      	ands	r3, r2
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d211      	bcs.n	8001c0a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be6:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_RCC_ClockConfig+0x184>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2201      	movs	r2, #1
 8001bec:	4393      	bics	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_RCC_ClockConfig+0x184>)
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_RCC_ClockConfig+0x184>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4013      	ands	r3, r2
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e020      	b.n	8001c4c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2204      	movs	r2, #4
 8001c10:	4013      	ands	r3, r2
 8001c12:	d009      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c14:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <HAL_RCC_ClockConfig+0x190>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001c24:	430a      	orrs	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c28:	f000 f820 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c2c:	0001      	movs	r1, r0
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_RCC_ClockConfig+0x188>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	091b      	lsrs	r3, r3, #4
 8001c34:	220f      	movs	r2, #15
 8001c36:	4013      	ands	r3, r2
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <HAL_RCC_ClockConfig+0x194>)
 8001c3a:	5cd3      	ldrb	r3, [r2, r3]
 8001c3c:	000a      	movs	r2, r1
 8001c3e:	40da      	lsrs	r2, r3
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x198>)
 8001c42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c44:	2000      	movs	r0, #0
 8001c46:	f7fe fea1 	bl	800098c <HAL_InitTick>
  
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b004      	add	sp, #16
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40022000 	.word	0x40022000
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	00001388 	.word	0x00001388
 8001c60:	fffff8ff 	.word	0xfffff8ff
 8001c64:	08003d64 	.word	0x08003d64
 8001c68:	20000000 	.word	0x20000000

08001c6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b08f      	sub	sp, #60	; 0x3c
 8001c70:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c72:	2314      	movs	r3, #20
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	4a2b      	ldr	r2, [pc, #172]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c7a:	c313      	stmia	r3!, {r0, r1, r4}
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	4a29      	ldr	r2, [pc, #164]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c84:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c86:	c313      	stmia	r3!, {r0, r1, r4}
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c90:	2300      	movs	r3, #0
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c94:	2300      	movs	r3, #0
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca8:	220c      	movs	r2, #12
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d002      	beq.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x4a>
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d003      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x50>
 8001cb4:	e02d      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cba:	e02d      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cbe:	0c9b      	lsrs	r3, r3, #18
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2214      	movs	r2, #20
 8001cc6:	18ba      	adds	r2, r7, r2
 8001cc8:	5cd3      	ldrb	r3, [r2, r3]
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	220f      	movs	r2, #15
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	1d3a      	adds	r2, r7, #4
 8001cd6:	5cd3      	ldrb	r3, [r2, r3]
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	025b      	lsls	r3, r3, #9
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d009      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ce6:	4812      	ldr	r0, [pc, #72]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ce8:	f7fe fa18 	bl	800011c <__udivsi3>
 8001cec:	0003      	movs	r3, r0
 8001cee:	001a      	movs	r2, r3
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	4353      	muls	r3, r2
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8001cf6:	e009      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cfa:	000a      	movs	r2, r1
 8001cfc:	0152      	lsls	r2, r2, #5
 8001cfe:	1a52      	subs	r2, r2, r1
 8001d00:	0193      	lsls	r3, r2, #6
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	185b      	adds	r3, r3, r1
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d10:	e002      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d16:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b00f      	add	sp, #60	; 0x3c
 8001d20:	bd90      	pop	{r4, r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	08003d44 	.word	0x08003d44
 8001d28:	08003d54 	.word	0x08003d54
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	007a1200 	.word	0x007a1200

08001d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d38:	4b02      	ldr	r3, [pc, #8]	; (8001d44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	20000000 	.word	0x20000000

08001d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d4c:	f7ff fff2 	bl	8001d34 <HAL_RCC_GetHCLKFreq>
 8001d50:	0001      	movs	r1, r0
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	2207      	movs	r2, #7
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d5e:	5cd3      	ldrb	r3, [r2, r3]
 8001d60:	40d9      	lsrs	r1, r3
 8001d62:	000b      	movs	r3, r1
}    
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	08003d74 	.word	0x08003d74

08001d74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	025b      	lsls	r3, r3, #9
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d100      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d90:	e08e      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d92:	2017      	movs	r0, #23
 8001d94:	183b      	adds	r3, r7, r0
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9a:	4b5f      	ldr	r3, [pc, #380]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d9c:	69da      	ldr	r2, [r3, #28]
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	055b      	lsls	r3, r3, #21
 8001da2:	4013      	ands	r3, r2
 8001da4:	d110      	bne.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	4b5c      	ldr	r3, [pc, #368]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001da8:	69da      	ldr	r2, [r3, #28]
 8001daa:	4b5b      	ldr	r3, [pc, #364]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001dac:	2180      	movs	r1, #128	; 0x80
 8001dae:	0549      	lsls	r1, r1, #21
 8001db0:	430a      	orrs	r2, r1
 8001db2:	61da      	str	r2, [r3, #28]
 8001db4:	4b58      	ldr	r3, [pc, #352]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001db6:	69da      	ldr	r2, [r3, #28]
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	055b      	lsls	r3, r3, #21
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc2:	183b      	adds	r3, r7, r0
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	4b54      	ldr	r3, [pc, #336]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d11a      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd4:	4b51      	ldr	r3, [pc, #324]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b50      	ldr	r3, [pc, #320]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	0049      	lsls	r1, r1, #1
 8001dde:	430a      	orrs	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de2:	f7fe fe19 	bl	8000a18 <HAL_GetTick>
 8001de6:	0003      	movs	r3, r0
 8001de8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dea:	e008      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dec:	f7fe fe14 	bl	8000a18 <HAL_GetTick>
 8001df0:	0002      	movs	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e087      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	4b47      	ldr	r3, [pc, #284]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e0a:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e0c:	6a1a      	ldr	r2, [r3, #32]
 8001e0e:	23c0      	movs	r3, #192	; 0xc0
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4013      	ands	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d034      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	23c0      	movs	r3, #192	; 0xc0
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4013      	ands	r3, r2
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d02c      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e2c:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4a3b      	ldr	r2, [pc, #236]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e36:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e38:	6a1a      	ldr	r2, [r3, #32]
 8001e3a:	4b37      	ldr	r3, [pc, #220]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e3c:	2180      	movs	r1, #128	; 0x80
 8001e3e:	0249      	lsls	r1, r1, #9
 8001e40:	430a      	orrs	r2, r1
 8001e42:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e44:	4b34      	ldr	r3, [pc, #208]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e46:	6a1a      	ldr	r2, [r3, #32]
 8001e48:	4b33      	ldr	r3, [pc, #204]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e4a:	4936      	ldr	r1, [pc, #216]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e50:	4b31      	ldr	r3, [pc, #196]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5e:	f7fe fddb 	bl	8000a18 <HAL_GetTick>
 8001e62:	0003      	movs	r3, r0
 8001e64:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e66:	e009      	b.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e68:	f7fe fdd6 	bl	8000a18 <HAL_GetTick>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	4a2d      	ldr	r2, [pc, #180]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e048      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7c:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	2202      	movs	r2, #2
 8001e82:	4013      	ands	r3, r2
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e86:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	4a25      	ldr	r2, [pc, #148]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	0019      	movs	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e96:	430a      	orrs	r2, r1
 8001e98:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e9a:	2317      	movs	r3, #23
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ea6:	69da      	ldr	r2, [r3, #28]
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001eaa:	4920      	ldr	r1, [pc, #128]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001eac:	400a      	ands	r2, r1
 8001eae:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d009      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	4393      	bics	r3, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d009      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	2210      	movs	r2, #16
 8001ede:	4393      	bics	r3, r2
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d009      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	2240      	movs	r2, #64	; 0x40
 8001efe:	4393      	bics	r3, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	0018      	movs	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b006      	add	sp, #24
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	fffffcff 	.word	0xfffffcff
 8001f24:	fffeffff 	.word	0xfffeffff
 8001f28:	00001388 	.word	0x00001388
 8001f2c:	efffffff 	.word	0xefffffff

08001f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e044      	b.n	8001fcc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d107      	bne.n	8001f5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2274      	movs	r2, #116	; 0x74
 8001f4e:	2100      	movs	r1, #0
 8001f50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7fe fb8b 	bl	8000670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2224      	movs	r2, #36	; 0x24
 8001f5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	438a      	bics	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	0018      	movs	r0, r3
 8001f74:	f000 fb24 	bl	80025c0 <UART_SetConfig>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e024      	b.n	8001fcc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f000 fc57 	bl	8002840 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	490d      	ldr	r1, [pc, #52]	; (8001fd4 <HAL_UART_Init+0xa4>)
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	212a      	movs	r1, #42	; 0x2a
 8001fae:	438a      	bics	r2, r1
 8001fb0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f000 fcef 	bl	80029a8 <UART_CheckIdleState>
 8001fca:	0003      	movs	r3, r0
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	ffffb7ff 	.word	0xffffb7ff

08001fd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b0ab      	sub	sp, #172	; 0xac
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	22a4      	movs	r2, #164	; 0xa4
 8001fe8:	18b9      	adds	r1, r7, r2
 8001fea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	20a0      	movs	r0, #160	; 0xa0
 8001ff4:	1839      	adds	r1, r7, r0
 8001ff6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	219c      	movs	r1, #156	; 0x9c
 8002000:	1879      	adds	r1, r7, r1
 8002002:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002004:	0011      	movs	r1, r2
 8002006:	18bb      	adds	r3, r7, r2
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a99      	ldr	r2, [pc, #612]	; (8002270 <HAL_UART_IRQHandler+0x298>)
 800200c:	4013      	ands	r3, r2
 800200e:	2298      	movs	r2, #152	; 0x98
 8002010:	18bc      	adds	r4, r7, r2
 8002012:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002014:	18bb      	adds	r3, r7, r2
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d114      	bne.n	8002046 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800201c:	187b      	adds	r3, r7, r1
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2220      	movs	r2, #32
 8002022:	4013      	ands	r3, r2
 8002024:	d00f      	beq.n	8002046 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002026:	183b      	adds	r3, r7, r0
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2220      	movs	r2, #32
 800202c:	4013      	ands	r3, r2
 800202e:	d00a      	beq.n	8002046 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002034:	2b00      	cmp	r3, #0
 8002036:	d100      	bne.n	800203a <HAL_UART_IRQHandler+0x62>
 8002038:	e296      	b.n	8002568 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	0010      	movs	r0, r2
 8002042:	4798      	blx	r3
      }
      return;
 8002044:	e290      	b.n	8002568 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002046:	2398      	movs	r3, #152	; 0x98
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d100      	bne.n	8002052 <HAL_UART_IRQHandler+0x7a>
 8002050:	e114      	b.n	800227c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002052:	239c      	movs	r3, #156	; 0x9c
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2201      	movs	r2, #1
 800205a:	4013      	ands	r3, r2
 800205c:	d106      	bne.n	800206c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800205e:	23a0      	movs	r3, #160	; 0xa0
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a83      	ldr	r2, [pc, #524]	; (8002274 <HAL_UART_IRQHandler+0x29c>)
 8002066:	4013      	ands	r3, r2
 8002068:	d100      	bne.n	800206c <HAL_UART_IRQHandler+0x94>
 800206a:	e107      	b.n	800227c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800206c:	23a4      	movs	r3, #164	; 0xa4
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2201      	movs	r2, #1
 8002074:	4013      	ands	r3, r2
 8002076:	d012      	beq.n	800209e <HAL_UART_IRQHandler+0xc6>
 8002078:	23a0      	movs	r3, #160	; 0xa0
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4013      	ands	r3, r2
 8002084:	d00b      	beq.n	800209e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2201      	movs	r2, #1
 800208c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2280      	movs	r2, #128	; 0x80
 8002092:	589b      	ldr	r3, [r3, r2]
 8002094:	2201      	movs	r2, #1
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2180      	movs	r1, #128	; 0x80
 800209c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800209e:	23a4      	movs	r3, #164	; 0xa4
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2202      	movs	r2, #2
 80020a6:	4013      	ands	r3, r2
 80020a8:	d011      	beq.n	80020ce <HAL_UART_IRQHandler+0xf6>
 80020aa:	239c      	movs	r3, #156	; 0x9c
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2201      	movs	r2, #1
 80020b2:	4013      	ands	r3, r2
 80020b4:	d00b      	beq.n	80020ce <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2202      	movs	r2, #2
 80020bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2280      	movs	r2, #128	; 0x80
 80020c2:	589b      	ldr	r3, [r3, r2]
 80020c4:	2204      	movs	r2, #4
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80020ce:	23a4      	movs	r3, #164	; 0xa4
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2204      	movs	r2, #4
 80020d6:	4013      	ands	r3, r2
 80020d8:	d011      	beq.n	80020fe <HAL_UART_IRQHandler+0x126>
 80020da:	239c      	movs	r3, #156	; 0x9c
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2201      	movs	r2, #1
 80020e2:	4013      	ands	r3, r2
 80020e4:	d00b      	beq.n	80020fe <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2204      	movs	r2, #4
 80020ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	589b      	ldr	r3, [r3, r2]
 80020f4:	2202      	movs	r2, #2
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2180      	movs	r1, #128	; 0x80
 80020fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80020fe:	23a4      	movs	r3, #164	; 0xa4
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2208      	movs	r2, #8
 8002106:	4013      	ands	r3, r2
 8002108:	d017      	beq.n	800213a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800210a:	23a0      	movs	r3, #160	; 0xa0
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2220      	movs	r2, #32
 8002112:	4013      	ands	r3, r2
 8002114:	d105      	bne.n	8002122 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002116:	239c      	movs	r3, #156	; 0x9c
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2201      	movs	r2, #1
 800211e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002120:	d00b      	beq.n	800213a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2208      	movs	r2, #8
 8002128:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2280      	movs	r2, #128	; 0x80
 800212e:	589b      	ldr	r3, [r3, r2]
 8002130:	2208      	movs	r2, #8
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2180      	movs	r1, #128	; 0x80
 8002138:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800213a:	23a4      	movs	r3, #164	; 0xa4
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	4013      	ands	r3, r2
 8002146:	d013      	beq.n	8002170 <HAL_UART_IRQHandler+0x198>
 8002148:	23a0      	movs	r3, #160	; 0xa0
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	04db      	lsls	r3, r3, #19
 8002152:	4013      	ands	r3, r2
 8002154:	d00c      	beq.n	8002170 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	0112      	lsls	r2, r2, #4
 800215e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2280      	movs	r2, #128	; 0x80
 8002164:	589b      	ldr	r3, [r3, r2]
 8002166:	2220      	movs	r2, #32
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2180      	movs	r1, #128	; 0x80
 800216e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	589b      	ldr	r3, [r3, r2]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d100      	bne.n	800217c <HAL_UART_IRQHandler+0x1a4>
 800217a:	e1f7      	b.n	800256c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800217c:	23a4      	movs	r3, #164	; 0xa4
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2220      	movs	r2, #32
 8002184:	4013      	ands	r3, r2
 8002186:	d00e      	beq.n	80021a6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002188:	23a0      	movs	r3, #160	; 0xa0
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2220      	movs	r2, #32
 8002190:	4013      	ands	r3, r2
 8002192:	d008      	beq.n	80021a6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002198:	2b00      	cmp	r3, #0
 800219a:	d004      	beq.n	80021a6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	0010      	movs	r0, r2
 80021a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2280      	movs	r2, #128	; 0x80
 80021aa:	589b      	ldr	r3, [r3, r2]
 80021ac:	2194      	movs	r1, #148	; 0x94
 80021ae:	187a      	adds	r2, r7, r1
 80021b0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2240      	movs	r2, #64	; 0x40
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b40      	cmp	r3, #64	; 0x40
 80021be:	d004      	beq.n	80021ca <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80021c0:	187b      	adds	r3, r7, r1
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2228      	movs	r2, #40	; 0x28
 80021c6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80021c8:	d047      	beq.n	800225a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f000 fcf7 	bl	8002bc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2240      	movs	r2, #64	; 0x40
 80021da:	4013      	ands	r3, r2
 80021dc:	2b40      	cmp	r3, #64	; 0x40
 80021de:	d137      	bne.n	8002250 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021e0:	f3ef 8310 	mrs	r3, PRIMASK
 80021e4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80021e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021e8:	2090      	movs	r0, #144	; 0x90
 80021ea:	183a      	adds	r2, r7, r0
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	2301      	movs	r3, #1
 80021f0:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021f4:	f383 8810 	msr	PRIMASK, r3
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2140      	movs	r1, #64	; 0x40
 8002206:	438a      	bics	r2, r1
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	183b      	adds	r3, r7, r0
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002212:	f383 8810 	msr	PRIMASK, r3
}
 8002216:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	2b00      	cmp	r3, #0
 800221e:	d012      	beq.n	8002246 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <HAL_UART_IRQHandler+0x2a0>)
 8002226:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	0018      	movs	r0, r3
 800222e:	f7fe fd5b 	bl	8000ce8 <HAL_DMA_Abort_IT>
 8002232:	1e03      	subs	r3, r0, #0
 8002234:	d01a      	beq.n	800226c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	0018      	movs	r0, r3
 8002242:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002244:	e012      	b.n	800226c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	0018      	movs	r0, r3
 800224a:	f000 f9a5 	bl	8002598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800224e:	e00d      	b.n	800226c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	0018      	movs	r0, r3
 8002254:	f000 f9a0 	bl	8002598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002258:	e008      	b.n	800226c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	0018      	movs	r0, r3
 800225e:	f000 f99b 	bl	8002598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2280      	movs	r2, #128	; 0x80
 8002266:	2100      	movs	r1, #0
 8002268:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800226a:	e17f      	b.n	800256c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800226c:	46c0      	nop			; (mov r8, r8)
    return;
 800226e:	e17d      	b.n	800256c <HAL_UART_IRQHandler+0x594>
 8002270:	0000080f 	.word	0x0000080f
 8002274:	04000120 	.word	0x04000120
 8002278:	08002c85 	.word	0x08002c85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002280:	2b01      	cmp	r3, #1
 8002282:	d000      	beq.n	8002286 <HAL_UART_IRQHandler+0x2ae>
 8002284:	e131      	b.n	80024ea <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002286:	23a4      	movs	r3, #164	; 0xa4
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2210      	movs	r2, #16
 800228e:	4013      	ands	r3, r2
 8002290:	d100      	bne.n	8002294 <HAL_UART_IRQHandler+0x2bc>
 8002292:	e12a      	b.n	80024ea <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002294:	23a0      	movs	r3, #160	; 0xa0
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2210      	movs	r2, #16
 800229c:	4013      	ands	r3, r2
 800229e:	d100      	bne.n	80022a2 <HAL_UART_IRQHandler+0x2ca>
 80022a0:	e123      	b.n	80024ea <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2210      	movs	r2, #16
 80022a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2240      	movs	r2, #64	; 0x40
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b40      	cmp	r3, #64	; 0x40
 80022b6:	d000      	beq.n	80022ba <HAL_UART_IRQHandler+0x2e2>
 80022b8:	e09b      	b.n	80023f2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	217e      	movs	r1, #126	; 0x7e
 80022c4:	187b      	adds	r3, r7, r1
 80022c6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80022c8:	187b      	adds	r3, r7, r1
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d100      	bne.n	80022d2 <HAL_UART_IRQHandler+0x2fa>
 80022d0:	e14e      	b.n	8002570 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2258      	movs	r2, #88	; 0x58
 80022d6:	5a9b      	ldrh	r3, [r3, r2]
 80022d8:	187a      	adds	r2, r7, r1
 80022da:	8812      	ldrh	r2, [r2, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d300      	bcc.n	80022e2 <HAL_UART_IRQHandler+0x30a>
 80022e0:	e146      	b.n	8002570 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	187a      	adds	r2, r7, r1
 80022e6:	215a      	movs	r1, #90	; 0x5a
 80022e8:	8812      	ldrh	r2, [r2, #0]
 80022ea:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	d06e      	beq.n	80023d4 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f6:	f3ef 8310 	mrs	r3, PRIMASK
 80022fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002300:	2301      	movs	r3, #1
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002306:	f383 8810 	msr	PRIMASK, r3
}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	499a      	ldr	r1, [pc, #616]	; (8002580 <HAL_UART_IRQHandler+0x5a8>)
 8002318:	400a      	ands	r2, r1
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800231e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002322:	f383 8810 	msr	PRIMASK, r3
}
 8002326:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002328:	f3ef 8310 	mrs	r3, PRIMASK
 800232c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800232e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002330:	677b      	str	r3, [r7, #116]	; 0x74
 8002332:	2301      	movs	r3, #1
 8002334:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002338:	f383 8810 	msr	PRIMASK, r3
}
 800233c:	46c0      	nop			; (mov r8, r8)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2101      	movs	r1, #1
 800234a:	438a      	bics	r2, r1
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002350:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002354:	f383 8810 	msr	PRIMASK, r3
}
 8002358:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800235a:	f3ef 8310 	mrs	r3, PRIMASK
 800235e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002360:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002362:	673b      	str	r3, [r7, #112]	; 0x70
 8002364:	2301      	movs	r3, #1
 8002366:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800236a:	f383 8810 	msr	PRIMASK, r3
}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2140      	movs	r1, #64	; 0x40
 800237c:	438a      	bics	r2, r1
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002382:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002386:	f383 8810 	msr	PRIMASK, r3
}
 800238a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2220      	movs	r2, #32
 8002390:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002398:	f3ef 8310 	mrs	r3, PRIMASK
 800239c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800239e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023a2:	2301      	movs	r3, #1
 80023a4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023a8:	f383 8810 	msr	PRIMASK, r3
}
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2110      	movs	r1, #16
 80023ba:	438a      	bics	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c4:	f383 8810 	msr	PRIMASK, r3
}
 80023c8:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	0018      	movs	r0, r3
 80023d0:	f7fe fc52 	bl	8000c78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2258      	movs	r2, #88	; 0x58
 80023d8:	5a9a      	ldrh	r2, [r3, r2]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	215a      	movs	r1, #90	; 0x5a
 80023de:	5a5b      	ldrh	r3, [r3, r1]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	0011      	movs	r1, r2
 80023ea:	0018      	movs	r0, r3
 80023ec:	f000 f8dc 	bl	80025a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80023f0:	e0be      	b.n	8002570 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2258      	movs	r2, #88	; 0x58
 80023f6:	5a99      	ldrh	r1, [r3, r2]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	225a      	movs	r2, #90	; 0x5a
 80023fc:	5a9b      	ldrh	r3, [r3, r2]
 80023fe:	b29a      	uxth	r2, r3
 8002400:	208e      	movs	r0, #142	; 0x8e
 8002402:	183b      	adds	r3, r7, r0
 8002404:	1a8a      	subs	r2, r1, r2
 8002406:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	225a      	movs	r2, #90	; 0x5a
 800240c:	5a9b      	ldrh	r3, [r3, r2]
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d100      	bne.n	8002416 <HAL_UART_IRQHandler+0x43e>
 8002414:	e0ae      	b.n	8002574 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8002416:	183b      	adds	r3, r7, r0
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d100      	bne.n	8002420 <HAL_UART_IRQHandler+0x448>
 800241e:	e0a9      	b.n	8002574 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002420:	f3ef 8310 	mrs	r3, PRIMASK
 8002424:	60fb      	str	r3, [r7, #12]
  return(result);
 8002426:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002428:	2488      	movs	r4, #136	; 0x88
 800242a:	193a      	adds	r2, r7, r4
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	2301      	movs	r3, #1
 8002430:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f383 8810 	msr	PRIMASK, r3
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	494f      	ldr	r1, [pc, #316]	; (8002584 <HAL_UART_IRQHandler+0x5ac>)
 8002446:	400a      	ands	r2, r1
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	193b      	adds	r3, r7, r4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f383 8810 	msr	PRIMASK, r3
}
 8002456:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002458:	f3ef 8310 	mrs	r3, PRIMASK
 800245c:	61bb      	str	r3, [r7, #24]
  return(result);
 800245e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002460:	2484      	movs	r4, #132	; 0x84
 8002462:	193a      	adds	r2, r7, r4
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	2301      	movs	r3, #1
 8002468:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f383 8810 	msr	PRIMASK, r3
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2101      	movs	r1, #1
 800247e:	438a      	bics	r2, r1
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	193b      	adds	r3, r7, r4
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	f383 8810 	msr	PRIMASK, r3
}
 800248e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024a2:	f3ef 8310 	mrs	r3, PRIMASK
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024aa:	2480      	movs	r4, #128	; 0x80
 80024ac:	193a      	adds	r2, r7, r4
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	2301      	movs	r3, #1
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b6:	f383 8810 	msr	PRIMASK, r3
}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2110      	movs	r1, #16
 80024c8:	438a      	bics	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	193b      	adds	r3, r7, r4
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	f383 8810 	msr	PRIMASK, r3
}
 80024d8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024da:	183b      	adds	r3, r7, r0
 80024dc:	881a      	ldrh	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0011      	movs	r1, r2
 80024e2:	0018      	movs	r0, r3
 80024e4:	f000 f860 	bl	80025a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80024e8:	e044      	b.n	8002574 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80024ea:	23a4      	movs	r3, #164	; 0xa4
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	035b      	lsls	r3, r3, #13
 80024f4:	4013      	ands	r3, r2
 80024f6:	d010      	beq.n	800251a <HAL_UART_IRQHandler+0x542>
 80024f8:	239c      	movs	r3, #156	; 0x9c
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	03db      	lsls	r3, r3, #15
 8002502:	4013      	ands	r3, r2
 8002504:	d009      	beq.n	800251a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	0352      	lsls	r2, r2, #13
 800250e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	0018      	movs	r0, r3
 8002514:	f000 fbf8 	bl	8002d08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002518:	e02f      	b.n	800257a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800251a:	23a4      	movs	r3, #164	; 0xa4
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	4013      	ands	r3, r2
 8002524:	d00f      	beq.n	8002546 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002526:	23a0      	movs	r3, #160	; 0xa0
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	4013      	ands	r3, r2
 8002530:	d009      	beq.n	8002546 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002536:	2b00      	cmp	r3, #0
 8002538:	d01e      	beq.n	8002578 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	0010      	movs	r0, r2
 8002542:	4798      	blx	r3
    }
    return;
 8002544:	e018      	b.n	8002578 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002546:	23a4      	movs	r3, #164	; 0xa4
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2240      	movs	r2, #64	; 0x40
 800254e:	4013      	ands	r3, r2
 8002550:	d013      	beq.n	800257a <HAL_UART_IRQHandler+0x5a2>
 8002552:	23a0      	movs	r3, #160	; 0xa0
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2240      	movs	r2, #64	; 0x40
 800255a:	4013      	ands	r3, r2
 800255c:	d00d      	beq.n	800257a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	0018      	movs	r0, r3
 8002562:	f000 fba6 	bl	8002cb2 <UART_EndTransmit_IT>
    return;
 8002566:	e008      	b.n	800257a <HAL_UART_IRQHandler+0x5a2>
      return;
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	e006      	b.n	800257a <HAL_UART_IRQHandler+0x5a2>
    return;
 800256c:	46c0      	nop			; (mov r8, r8)
 800256e:	e004      	b.n	800257a <HAL_UART_IRQHandler+0x5a2>
      return;
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	e002      	b.n	800257a <HAL_UART_IRQHandler+0x5a2>
      return;
 8002574:	46c0      	nop			; (mov r8, r8)
 8002576:	e000      	b.n	800257a <HAL_UART_IRQHandler+0x5a2>
    return;
 8002578:	46c0      	nop			; (mov r8, r8)
  }

}
 800257a:	46bd      	mov	sp, r7
 800257c:	b02b      	add	sp, #172	; 0xac
 800257e:	bd90      	pop	{r4, r7, pc}
 8002580:	fffffeff 	.word	0xfffffeff
 8002584:	fffffedf 	.word	0xfffffedf

08002588 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b002      	add	sp, #8
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	000a      	movs	r2, r1
 80025b2:	1cbb      	adds	r3, r7, #2
 80025b4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b002      	add	sp, #8
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025c8:	231e      	movs	r3, #30
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a8d      	ldr	r2, [pc, #564]	; (8002824 <UART_SetConfig+0x264>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a88      	ldr	r2, [pc, #544]	; (8002828 <UART_SetConfig+0x268>)
 8002606:	4013      	ands	r3, r2
 8002608:	0019      	movs	r1, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4a7f      	ldr	r2, [pc, #508]	; (800282c <UART_SetConfig+0x26c>)
 800262e:	4013      	ands	r3, r2
 8002630:	0019      	movs	r1, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	430a      	orrs	r2, r1
 800263a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a7b      	ldr	r2, [pc, #492]	; (8002830 <UART_SetConfig+0x270>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d127      	bne.n	8002696 <UART_SetConfig+0xd6>
 8002646:	4b7b      	ldr	r3, [pc, #492]	; (8002834 <UART_SetConfig+0x274>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	2203      	movs	r2, #3
 800264c:	4013      	ands	r3, r2
 800264e:	2b03      	cmp	r3, #3
 8002650:	d00d      	beq.n	800266e <UART_SetConfig+0xae>
 8002652:	d81b      	bhi.n	800268c <UART_SetConfig+0xcc>
 8002654:	2b02      	cmp	r3, #2
 8002656:	d014      	beq.n	8002682 <UART_SetConfig+0xc2>
 8002658:	d818      	bhi.n	800268c <UART_SetConfig+0xcc>
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <UART_SetConfig+0xa4>
 800265e:	2b01      	cmp	r3, #1
 8002660:	d00a      	beq.n	8002678 <UART_SetConfig+0xb8>
 8002662:	e013      	b.n	800268c <UART_SetConfig+0xcc>
 8002664:	231f      	movs	r3, #31
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	e021      	b.n	80026b2 <UART_SetConfig+0xf2>
 800266e:	231f      	movs	r3, #31
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	2202      	movs	r2, #2
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	e01c      	b.n	80026b2 <UART_SetConfig+0xf2>
 8002678:	231f      	movs	r3, #31
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	2204      	movs	r2, #4
 800267e:	701a      	strb	r2, [r3, #0]
 8002680:	e017      	b.n	80026b2 <UART_SetConfig+0xf2>
 8002682:	231f      	movs	r3, #31
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	2208      	movs	r2, #8
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	e012      	b.n	80026b2 <UART_SetConfig+0xf2>
 800268c:	231f      	movs	r3, #31
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	2210      	movs	r2, #16
 8002692:	701a      	strb	r2, [r3, #0]
 8002694:	e00d      	b.n	80026b2 <UART_SetConfig+0xf2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a67      	ldr	r2, [pc, #412]	; (8002838 <UART_SetConfig+0x278>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d104      	bne.n	80026aa <UART_SetConfig+0xea>
 80026a0:	231f      	movs	r3, #31
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
 80026a8:	e003      	b.n	80026b2 <UART_SetConfig+0xf2>
 80026aa:	231f      	movs	r3, #31
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	2210      	movs	r2, #16
 80026b0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d15d      	bne.n	800277a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80026be:	231f      	movs	r3, #31
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d015      	beq.n	80026f4 <UART_SetConfig+0x134>
 80026c8:	dc18      	bgt.n	80026fc <UART_SetConfig+0x13c>
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d00d      	beq.n	80026ea <UART_SetConfig+0x12a>
 80026ce:	dc15      	bgt.n	80026fc <UART_SetConfig+0x13c>
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <UART_SetConfig+0x11a>
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d005      	beq.n	80026e4 <UART_SetConfig+0x124>
 80026d8:	e010      	b.n	80026fc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026da:	f7ff fb35 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 80026de:	0003      	movs	r3, r0
 80026e0:	61bb      	str	r3, [r7, #24]
        break;
 80026e2:	e012      	b.n	800270a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026e4:	4b55      	ldr	r3, [pc, #340]	; (800283c <UART_SetConfig+0x27c>)
 80026e6:	61bb      	str	r3, [r7, #24]
        break;
 80026e8:	e00f      	b.n	800270a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026ea:	f7ff fabf 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 80026ee:	0003      	movs	r3, r0
 80026f0:	61bb      	str	r3, [r7, #24]
        break;
 80026f2:	e00a      	b.n	800270a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	61bb      	str	r3, [r7, #24]
        break;
 80026fa:	e006      	b.n	800270a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002700:	231e      	movs	r3, #30
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
        break;
 8002708:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d100      	bne.n	8002712 <UART_SetConfig+0x152>
 8002710:	e07b      	b.n	800280a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	005a      	lsls	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	085b      	lsrs	r3, r3, #1
 800271c:	18d2      	adds	r2, r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	0019      	movs	r1, r3
 8002724:	0010      	movs	r0, r2
 8002726:	f7fd fcf9 	bl	800011c <__udivsi3>
 800272a:	0003      	movs	r3, r0
 800272c:	b29b      	uxth	r3, r3
 800272e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	2b0f      	cmp	r3, #15
 8002734:	d91c      	bls.n	8002770 <UART_SetConfig+0x1b0>
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	025b      	lsls	r3, r3, #9
 800273c:	429a      	cmp	r2, r3
 800273e:	d217      	bcs.n	8002770 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	b29a      	uxth	r2, r3
 8002744:	200e      	movs	r0, #14
 8002746:	183b      	adds	r3, r7, r0
 8002748:	210f      	movs	r1, #15
 800274a:	438a      	bics	r2, r1
 800274c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	085b      	lsrs	r3, r3, #1
 8002752:	b29b      	uxth	r3, r3
 8002754:	2207      	movs	r2, #7
 8002756:	4013      	ands	r3, r2
 8002758:	b299      	uxth	r1, r3
 800275a:	183b      	adds	r3, r7, r0
 800275c:	183a      	adds	r2, r7, r0
 800275e:	8812      	ldrh	r2, [r2, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	183a      	adds	r2, r7, r0
 800276a:	8812      	ldrh	r2, [r2, #0]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	e04c      	b.n	800280a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002770:	231e      	movs	r3, #30
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	e047      	b.n	800280a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800277a:	231f      	movs	r3, #31
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b08      	cmp	r3, #8
 8002782:	d015      	beq.n	80027b0 <UART_SetConfig+0x1f0>
 8002784:	dc18      	bgt.n	80027b8 <UART_SetConfig+0x1f8>
 8002786:	2b04      	cmp	r3, #4
 8002788:	d00d      	beq.n	80027a6 <UART_SetConfig+0x1e6>
 800278a:	dc15      	bgt.n	80027b8 <UART_SetConfig+0x1f8>
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <UART_SetConfig+0x1d6>
 8002790:	2b02      	cmp	r3, #2
 8002792:	d005      	beq.n	80027a0 <UART_SetConfig+0x1e0>
 8002794:	e010      	b.n	80027b8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002796:	f7ff fad7 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 800279a:	0003      	movs	r3, r0
 800279c:	61bb      	str	r3, [r7, #24]
        break;
 800279e:	e012      	b.n	80027c6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027a0:	4b26      	ldr	r3, [pc, #152]	; (800283c <UART_SetConfig+0x27c>)
 80027a2:	61bb      	str	r3, [r7, #24]
        break;
 80027a4:	e00f      	b.n	80027c6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027a6:	f7ff fa61 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 80027aa:	0003      	movs	r3, r0
 80027ac:	61bb      	str	r3, [r7, #24]
        break;
 80027ae:	e00a      	b.n	80027c6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	61bb      	str	r3, [r7, #24]
        break;
 80027b6:	e006      	b.n	80027c6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027bc:	231e      	movs	r3, #30
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
        break;
 80027c4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01e      	beq.n	800280a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	085a      	lsrs	r2, r3, #1
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	18d2      	adds	r2, r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	0019      	movs	r1, r3
 80027dc:	0010      	movs	r0, r2
 80027de:	f7fd fc9d 	bl	800011c <__udivsi3>
 80027e2:	0003      	movs	r3, r0
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	2b0f      	cmp	r3, #15
 80027ec:	d909      	bls.n	8002802 <UART_SetConfig+0x242>
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	025b      	lsls	r3, r3, #9
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d204      	bcs.n	8002802 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	60da      	str	r2, [r3, #12]
 8002800:	e003      	b.n	800280a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002802:	231e      	movs	r3, #30
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002816:	231e      	movs	r3, #30
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	781b      	ldrb	r3, [r3, #0]
}
 800281c:	0018      	movs	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	b008      	add	sp, #32
 8002822:	bd80      	pop	{r7, pc}
 8002824:	ffff69f3 	.word	0xffff69f3
 8002828:	ffffcfff 	.word	0xffffcfff
 800282c:	fffff4ff 	.word	0xfffff4ff
 8002830:	40013800 	.word	0x40013800
 8002834:	40021000 	.word	0x40021000
 8002838:	40004400 	.word	0x40004400
 800283c:	007a1200 	.word	0x007a1200

08002840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	2201      	movs	r2, #1
 800284e:	4013      	ands	r3, r2
 8002850:	d00b      	beq.n	800286a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4a4a      	ldr	r2, [pc, #296]	; (8002984 <UART_AdvFeatureConfig+0x144>)
 800285a:	4013      	ands	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2202      	movs	r2, #2
 8002870:	4013      	ands	r3, r2
 8002872:	d00b      	beq.n	800288c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4a43      	ldr	r2, [pc, #268]	; (8002988 <UART_AdvFeatureConfig+0x148>)
 800287c:	4013      	ands	r3, r2
 800287e:	0019      	movs	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	2204      	movs	r2, #4
 8002892:	4013      	ands	r3, r2
 8002894:	d00b      	beq.n	80028ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a3b      	ldr	r2, [pc, #236]	; (800298c <UART_AdvFeatureConfig+0x14c>)
 800289e:	4013      	ands	r3, r2
 80028a0:	0019      	movs	r1, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	2208      	movs	r2, #8
 80028b4:	4013      	ands	r3, r2
 80028b6:	d00b      	beq.n	80028d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4a34      	ldr	r2, [pc, #208]	; (8002990 <UART_AdvFeatureConfig+0x150>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	2210      	movs	r2, #16
 80028d6:	4013      	ands	r3, r2
 80028d8:	d00b      	beq.n	80028f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4a2c      	ldr	r2, [pc, #176]	; (8002994 <UART_AdvFeatureConfig+0x154>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	2220      	movs	r2, #32
 80028f8:	4013      	ands	r3, r2
 80028fa:	d00b      	beq.n	8002914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	4a25      	ldr	r2, [pc, #148]	; (8002998 <UART_AdvFeatureConfig+0x158>)
 8002904:	4013      	ands	r3, r2
 8002906:	0019      	movs	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	2240      	movs	r2, #64	; 0x40
 800291a:	4013      	ands	r3, r2
 800291c:	d01d      	beq.n	800295a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4a1d      	ldr	r2, [pc, #116]	; (800299c <UART_AdvFeatureConfig+0x15c>)
 8002926:	4013      	ands	r3, r2
 8002928:	0019      	movs	r1, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	035b      	lsls	r3, r3, #13
 800293e:	429a      	cmp	r2, r3
 8002940:	d10b      	bne.n	800295a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a15      	ldr	r2, [pc, #84]	; (80029a0 <UART_AdvFeatureConfig+0x160>)
 800294a:	4013      	ands	r3, r2
 800294c:	0019      	movs	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	2280      	movs	r2, #128	; 0x80
 8002960:	4013      	ands	r3, r2
 8002962:	d00b      	beq.n	800297c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <UART_AdvFeatureConfig+0x164>)
 800296c:	4013      	ands	r3, r2
 800296e:	0019      	movs	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	605a      	str	r2, [r3, #4]
  }
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b002      	add	sp, #8
 8002982:	bd80      	pop	{r7, pc}
 8002984:	fffdffff 	.word	0xfffdffff
 8002988:	fffeffff 	.word	0xfffeffff
 800298c:	fffbffff 	.word	0xfffbffff
 8002990:	ffff7fff 	.word	0xffff7fff
 8002994:	ffffefff 	.word	0xffffefff
 8002998:	ffffdfff 	.word	0xffffdfff
 800299c:	ffefffff 	.word	0xffefffff
 80029a0:	ff9fffff 	.word	0xff9fffff
 80029a4:	fff7ffff 	.word	0xfff7ffff

080029a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2280      	movs	r2, #128	; 0x80
 80029b4:	2100      	movs	r1, #0
 80029b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029b8:	f7fe f82e 	bl	8000a18 <HAL_GetTick>
 80029bc:	0003      	movs	r3, r0
 80029be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2208      	movs	r2, #8
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d10c      	bne.n	80029e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2280      	movs	r2, #128	; 0x80
 80029d2:	0391      	lsls	r1, r2, #14
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4a17      	ldr	r2, [pc, #92]	; (8002a34 <UART_CheckIdleState+0x8c>)
 80029d8:	9200      	str	r2, [sp, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	f000 f82c 	bl	8002a38 <UART_WaitOnFlagUntilTimeout>
 80029e0:	1e03      	subs	r3, r0, #0
 80029e2:	d001      	beq.n	80029e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e021      	b.n	8002a2c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2204      	movs	r2, #4
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d10c      	bne.n	8002a10 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2280      	movs	r2, #128	; 0x80
 80029fa:	03d1      	lsls	r1, r2, #15
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	4a0d      	ldr	r2, [pc, #52]	; (8002a34 <UART_CheckIdleState+0x8c>)
 8002a00:	9200      	str	r2, [sp, #0]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f000 f818 	bl	8002a38 <UART_WaitOnFlagUntilTimeout>
 8002a08:	1e03      	subs	r3, r0, #0
 8002a0a:	d001      	beq.n	8002a10 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e00d      	b.n	8002a2c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2274      	movs	r2, #116	; 0x74
 8002a26:	2100      	movs	r1, #0
 8002a28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b004      	add	sp, #16
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	01ffffff 	.word	0x01ffffff

08002a38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b094      	sub	sp, #80	; 0x50
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	1dfb      	adds	r3, r7, #7
 8002a46:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a48:	e0a3      	b.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	d100      	bne.n	8002a52 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002a50:	e09f      	b.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a52:	f7fd ffe1 	bl	8000a18 <HAL_GetTick>
 8002a56:	0002      	movs	r2, r0
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d302      	bcc.n	8002a68 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d13d      	bne.n	8002ae4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a68:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a70:	647b      	str	r3, [r7, #68]	; 0x44
 8002a72:	2301      	movs	r3, #1
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a78:	f383 8810 	msr	PRIMASK, r3
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	494c      	ldr	r1, [pc, #304]	; (8002bbc <UART_WaitOnFlagUntilTimeout+0x184>)
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a90:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	f383 8810 	msr	PRIMASK, r3
}
 8002a98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aaa:	f383 8810 	msr	PRIMASK, r3
}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2101      	movs	r1, #1
 8002abc:	438a      	bics	r2, r1
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ac6:	f383 8810 	msr	PRIMASK, r3
}
 8002aca:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2274      	movs	r2, #116	; 0x74
 8002adc:	2100      	movs	r1, #0
 8002ade:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e067      	b.n	8002bb4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2204      	movs	r2, #4
 8002aec:	4013      	ands	r3, r2
 8002aee:	d050      	beq.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	401a      	ands	r2, r3
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d146      	bne.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2280      	movs	r2, #128	; 0x80
 8002b0a:	0112      	lsls	r2, r2, #4
 8002b0c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b12:	613b      	str	r3, [r7, #16]
  return(result);
 8002b14:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b18:	2301      	movs	r3, #1
 8002b1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f383 8810 	msr	PRIMASK, r3
}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4923      	ldr	r1, [pc, #140]	; (8002bbc <UART_WaitOnFlagUntilTimeout+0x184>)
 8002b30:	400a      	ands	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	f383 8810 	msr	PRIMASK, r3
}
 8002b3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b40:	f3ef 8310 	mrs	r3, PRIMASK
 8002b44:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b46:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b48:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	f383 8810 	msr	PRIMASK, r3
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2101      	movs	r1, #1
 8002b62:	438a      	bics	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	f383 8810 	msr	PRIMASK, r3
}
 8002b70:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2280      	movs	r2, #128	; 0x80
 8002b82:	2120      	movs	r1, #32
 8002b84:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2274      	movs	r2, #116	; 0x74
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e010      	b.n	8002bb4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	425a      	negs	r2, r3
 8002ba2:	4153      	adcs	r3, r2
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	001a      	movs	r2, r3
 8002ba8:	1dfb      	adds	r3, r7, #7
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d100      	bne.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002bb0:	e74b      	b.n	8002a4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b014      	add	sp, #80	; 0x50
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	fffffe5f 	.word	0xfffffe5f

08002bc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08e      	sub	sp, #56	; 0x38
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bcc:	617b      	str	r3, [r7, #20]
  return(result);
 8002bce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f383 8810 	msr	PRIMASK, r3
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4925      	ldr	r1, [pc, #148]	; (8002c80 <UART_EndRxTransfer+0xc0>)
 8002bea:	400a      	ands	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f383 8810 	msr	PRIMASK, r3
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8002bfe:	623b      	str	r3, [r7, #32]
  return(result);
 8002c00:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c02:	633b      	str	r3, [r7, #48]	; 0x30
 8002c04:	2301      	movs	r3, #1
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	f383 8810 	msr	PRIMASK, r3
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	438a      	bics	r2, r1
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	f383 8810 	msr	PRIMASK, r3
}
 8002c2a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d118      	bne.n	8002c66 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c34:	f3ef 8310 	mrs	r3, PRIMASK
 8002c38:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c3a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3e:	2301      	movs	r3, #1
 8002c40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f383 8810 	msr	PRIMASK, r3
}
 8002c48:	46c0      	nop			; (mov r8, r8)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2110      	movs	r1, #16
 8002c56:	438a      	bics	r2, r1
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f383 8810 	msr	PRIMASK, r3
}
 8002c64:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b00e      	add	sp, #56	; 0x38
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	fffffedf 	.word	0xfffffedf

08002c84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	225a      	movs	r2, #90	; 0x5a
 8002c96:	2100      	movs	r1, #0
 8002c98:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2252      	movs	r2, #82	; 0x52
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f7ff fc77 	bl	8002598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b004      	add	sp, #16
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b086      	sub	sp, #24
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cba:	f3ef 8310 	mrs	r3, PRIMASK
 8002cbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cc0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f383 8810 	msr	PRIMASK, r3
}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2140      	movs	r1, #64	; 0x40
 8002cdc:	438a      	bics	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f383 8810 	msr	PRIMASK, r3
}
 8002cea:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f7ff fc44 	bl	8002588 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b006      	add	sp, #24
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002d10:	46c0      	nop			; (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b002      	add	sp, #8
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <__errno>:
 8002d18:	4b01      	ldr	r3, [pc, #4]	; (8002d20 <__errno+0x8>)
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	4770      	bx	lr
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	2000000c 	.word	0x2000000c

08002d24 <__libc_init_array>:
 8002d24:	b570      	push	{r4, r5, r6, lr}
 8002d26:	2600      	movs	r6, #0
 8002d28:	4d0c      	ldr	r5, [pc, #48]	; (8002d5c <__libc_init_array+0x38>)
 8002d2a:	4c0d      	ldr	r4, [pc, #52]	; (8002d60 <__libc_init_array+0x3c>)
 8002d2c:	1b64      	subs	r4, r4, r5
 8002d2e:	10a4      	asrs	r4, r4, #2
 8002d30:	42a6      	cmp	r6, r4
 8002d32:	d109      	bne.n	8002d48 <__libc_init_array+0x24>
 8002d34:	2600      	movs	r6, #0
 8002d36:	f000 fff9 	bl	8003d2c <_init>
 8002d3a:	4d0a      	ldr	r5, [pc, #40]	; (8002d64 <__libc_init_array+0x40>)
 8002d3c:	4c0a      	ldr	r4, [pc, #40]	; (8002d68 <__libc_init_array+0x44>)
 8002d3e:	1b64      	subs	r4, r4, r5
 8002d40:	10a4      	asrs	r4, r4, #2
 8002d42:	42a6      	cmp	r6, r4
 8002d44:	d105      	bne.n	8002d52 <__libc_init_array+0x2e>
 8002d46:	bd70      	pop	{r4, r5, r6, pc}
 8002d48:	00b3      	lsls	r3, r6, #2
 8002d4a:	58eb      	ldr	r3, [r5, r3]
 8002d4c:	4798      	blx	r3
 8002d4e:	3601      	adds	r6, #1
 8002d50:	e7ee      	b.n	8002d30 <__libc_init_array+0xc>
 8002d52:	00b3      	lsls	r3, r6, #2
 8002d54:	58eb      	ldr	r3, [r5, r3]
 8002d56:	4798      	blx	r3
 8002d58:	3601      	adds	r6, #1
 8002d5a:	e7f2      	b.n	8002d42 <__libc_init_array+0x1e>
 8002d5c:	08003e14 	.word	0x08003e14
 8002d60:	08003e14 	.word	0x08003e14
 8002d64:	08003e14 	.word	0x08003e14
 8002d68:	08003e18 	.word	0x08003e18

08002d6c <memset>:
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	1882      	adds	r2, r0, r2
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d100      	bne.n	8002d76 <memset+0xa>
 8002d74:	4770      	bx	lr
 8002d76:	7019      	strb	r1, [r3, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	e7f9      	b.n	8002d70 <memset+0x4>

08002d7c <iprintf>:
 8002d7c:	b40f      	push	{r0, r1, r2, r3}
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <iprintf+0x30>)
 8002d80:	b513      	push	{r0, r1, r4, lr}
 8002d82:	681c      	ldr	r4, [r3, #0]
 8002d84:	2c00      	cmp	r4, #0
 8002d86:	d005      	beq.n	8002d94 <iprintf+0x18>
 8002d88:	69a3      	ldr	r3, [r4, #24]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <iprintf+0x18>
 8002d8e:	0020      	movs	r0, r4
 8002d90:	f000 f870 	bl	8002e74 <__sinit>
 8002d94:	ab05      	add	r3, sp, #20
 8002d96:	0020      	movs	r0, r4
 8002d98:	9a04      	ldr	r2, [sp, #16]
 8002d9a:	68a1      	ldr	r1, [r4, #8]
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	f000 f9cd 	bl	800313c <_vfiprintf_r>
 8002da2:	bc16      	pop	{r1, r2, r4}
 8002da4:	bc08      	pop	{r3}
 8002da6:	b004      	add	sp, #16
 8002da8:	4718      	bx	r3
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	2000000c 	.word	0x2000000c

08002db0 <std>:
 8002db0:	2300      	movs	r3, #0
 8002db2:	b510      	push	{r4, lr}
 8002db4:	0004      	movs	r4, r0
 8002db6:	6003      	str	r3, [r0, #0]
 8002db8:	6043      	str	r3, [r0, #4]
 8002dba:	6083      	str	r3, [r0, #8]
 8002dbc:	8181      	strh	r1, [r0, #12]
 8002dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	81c2      	strh	r2, [r0, #14]
 8002dc4:	6103      	str	r3, [r0, #16]
 8002dc6:	6143      	str	r3, [r0, #20]
 8002dc8:	6183      	str	r3, [r0, #24]
 8002dca:	2208      	movs	r2, #8
 8002dcc:	305c      	adds	r0, #92	; 0x5c
 8002dce:	f7ff ffcd 	bl	8002d6c <memset>
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <std+0x38>)
 8002dd4:	6224      	str	r4, [r4, #32]
 8002dd6:	6263      	str	r3, [r4, #36]	; 0x24
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <std+0x3c>)
 8002dda:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <std+0x40>)
 8002dde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <std+0x44>)
 8002de2:	6323      	str	r3, [r4, #48]	; 0x30
 8002de4:	bd10      	pop	{r4, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	080036d9 	.word	0x080036d9
 8002dec:	08003701 	.word	0x08003701
 8002df0:	08003739 	.word	0x08003739
 8002df4:	08003765 	.word	0x08003765

08002df8 <_cleanup_r>:
 8002df8:	b510      	push	{r4, lr}
 8002dfa:	4902      	ldr	r1, [pc, #8]	; (8002e04 <_cleanup_r+0xc>)
 8002dfc:	f000 f8ba 	bl	8002f74 <_fwalk_reent>
 8002e00:	bd10      	pop	{r4, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	08003a71 	.word	0x08003a71

08002e08 <__sfmoreglue>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	2568      	movs	r5, #104	; 0x68
 8002e0c:	1e4a      	subs	r2, r1, #1
 8002e0e:	4355      	muls	r5, r2
 8002e10:	000e      	movs	r6, r1
 8002e12:	0029      	movs	r1, r5
 8002e14:	3174      	adds	r1, #116	; 0x74
 8002e16:	f000 f8f3 	bl	8003000 <_malloc_r>
 8002e1a:	1e04      	subs	r4, r0, #0
 8002e1c:	d008      	beq.n	8002e30 <__sfmoreglue+0x28>
 8002e1e:	2100      	movs	r1, #0
 8002e20:	002a      	movs	r2, r5
 8002e22:	6001      	str	r1, [r0, #0]
 8002e24:	6046      	str	r6, [r0, #4]
 8002e26:	300c      	adds	r0, #12
 8002e28:	60a0      	str	r0, [r4, #8]
 8002e2a:	3268      	adds	r2, #104	; 0x68
 8002e2c:	f7ff ff9e 	bl	8002d6c <memset>
 8002e30:	0020      	movs	r0, r4
 8002e32:	bd70      	pop	{r4, r5, r6, pc}

08002e34 <__sfp_lock_acquire>:
 8002e34:	b510      	push	{r4, lr}
 8002e36:	4802      	ldr	r0, [pc, #8]	; (8002e40 <__sfp_lock_acquire+0xc>)
 8002e38:	f000 f8bd 	bl	8002fb6 <__retarget_lock_acquire_recursive>
 8002e3c:	bd10      	pop	{r4, pc}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	200001a9 	.word	0x200001a9

08002e44 <__sfp_lock_release>:
 8002e44:	b510      	push	{r4, lr}
 8002e46:	4802      	ldr	r0, [pc, #8]	; (8002e50 <__sfp_lock_release+0xc>)
 8002e48:	f000 f8b6 	bl	8002fb8 <__retarget_lock_release_recursive>
 8002e4c:	bd10      	pop	{r4, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	200001a9 	.word	0x200001a9

08002e54 <__sinit_lock_acquire>:
 8002e54:	b510      	push	{r4, lr}
 8002e56:	4802      	ldr	r0, [pc, #8]	; (8002e60 <__sinit_lock_acquire+0xc>)
 8002e58:	f000 f8ad 	bl	8002fb6 <__retarget_lock_acquire_recursive>
 8002e5c:	bd10      	pop	{r4, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	200001aa 	.word	0x200001aa

08002e64 <__sinit_lock_release>:
 8002e64:	b510      	push	{r4, lr}
 8002e66:	4802      	ldr	r0, [pc, #8]	; (8002e70 <__sinit_lock_release+0xc>)
 8002e68:	f000 f8a6 	bl	8002fb8 <__retarget_lock_release_recursive>
 8002e6c:	bd10      	pop	{r4, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	200001aa 	.word	0x200001aa

08002e74 <__sinit>:
 8002e74:	b513      	push	{r0, r1, r4, lr}
 8002e76:	0004      	movs	r4, r0
 8002e78:	f7ff ffec 	bl	8002e54 <__sinit_lock_acquire>
 8002e7c:	69a3      	ldr	r3, [r4, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <__sinit+0x14>
 8002e82:	f7ff ffef 	bl	8002e64 <__sinit_lock_release>
 8002e86:	bd13      	pop	{r0, r1, r4, pc}
 8002e88:	64a3      	str	r3, [r4, #72]	; 0x48
 8002e8a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002e8c:	6523      	str	r3, [r4, #80]	; 0x50
 8002e8e:	4b13      	ldr	r3, [pc, #76]	; (8002edc <__sinit+0x68>)
 8002e90:	4a13      	ldr	r2, [pc, #76]	; (8002ee0 <__sinit+0x6c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	42a3      	cmp	r3, r4
 8002e9a:	d101      	bne.n	8002ea0 <__sinit+0x2c>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	61a3      	str	r3, [r4, #24]
 8002ea0:	0020      	movs	r0, r4
 8002ea2:	f000 f81f 	bl	8002ee4 <__sfp>
 8002ea6:	6060      	str	r0, [r4, #4]
 8002ea8:	0020      	movs	r0, r4
 8002eaa:	f000 f81b 	bl	8002ee4 <__sfp>
 8002eae:	60a0      	str	r0, [r4, #8]
 8002eb0:	0020      	movs	r0, r4
 8002eb2:	f000 f817 	bl	8002ee4 <__sfp>
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2104      	movs	r1, #4
 8002eba:	60e0      	str	r0, [r4, #12]
 8002ebc:	6860      	ldr	r0, [r4, #4]
 8002ebe:	f7ff ff77 	bl	8002db0 <std>
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	2109      	movs	r1, #9
 8002ec6:	68a0      	ldr	r0, [r4, #8]
 8002ec8:	f7ff ff72 	bl	8002db0 <std>
 8002ecc:	2202      	movs	r2, #2
 8002ece:	2112      	movs	r1, #18
 8002ed0:	68e0      	ldr	r0, [r4, #12]
 8002ed2:	f7ff ff6d 	bl	8002db0 <std>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	61a3      	str	r3, [r4, #24]
 8002eda:	e7d2      	b.n	8002e82 <__sinit+0xe>
 8002edc:	08003d7c 	.word	0x08003d7c
 8002ee0:	08002df9 	.word	0x08002df9

08002ee4 <__sfp>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	0007      	movs	r7, r0
 8002ee8:	f7ff ffa4 	bl	8002e34 <__sfp_lock_acquire>
 8002eec:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <__sfp+0x88>)
 8002eee:	681e      	ldr	r6, [r3, #0]
 8002ef0:	69b3      	ldr	r3, [r6, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d102      	bne.n	8002efc <__sfp+0x18>
 8002ef6:	0030      	movs	r0, r6
 8002ef8:	f7ff ffbc 	bl	8002e74 <__sinit>
 8002efc:	3648      	adds	r6, #72	; 0x48
 8002efe:	68b4      	ldr	r4, [r6, #8]
 8002f00:	6873      	ldr	r3, [r6, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	d504      	bpl.n	8002f10 <__sfp+0x2c>
 8002f06:	6833      	ldr	r3, [r6, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d022      	beq.n	8002f52 <__sfp+0x6e>
 8002f0c:	6836      	ldr	r6, [r6, #0]
 8002f0e:	e7f6      	b.n	8002efe <__sfp+0x1a>
 8002f10:	220c      	movs	r2, #12
 8002f12:	5ea5      	ldrsh	r5, [r4, r2]
 8002f14:	2d00      	cmp	r5, #0
 8002f16:	d11a      	bne.n	8002f4e <__sfp+0x6a>
 8002f18:	0020      	movs	r0, r4
 8002f1a:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <__sfp+0x8c>)
 8002f1c:	3058      	adds	r0, #88	; 0x58
 8002f1e:	60e3      	str	r3, [r4, #12]
 8002f20:	6665      	str	r5, [r4, #100]	; 0x64
 8002f22:	f000 f847 	bl	8002fb4 <__retarget_lock_init_recursive>
 8002f26:	f7ff ff8d 	bl	8002e44 <__sfp_lock_release>
 8002f2a:	0020      	movs	r0, r4
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	0029      	movs	r1, r5
 8002f30:	6025      	str	r5, [r4, #0]
 8002f32:	60a5      	str	r5, [r4, #8]
 8002f34:	6065      	str	r5, [r4, #4]
 8002f36:	6125      	str	r5, [r4, #16]
 8002f38:	6165      	str	r5, [r4, #20]
 8002f3a:	61a5      	str	r5, [r4, #24]
 8002f3c:	305c      	adds	r0, #92	; 0x5c
 8002f3e:	f7ff ff15 	bl	8002d6c <memset>
 8002f42:	6365      	str	r5, [r4, #52]	; 0x34
 8002f44:	63a5      	str	r5, [r4, #56]	; 0x38
 8002f46:	64a5      	str	r5, [r4, #72]	; 0x48
 8002f48:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002f4a:	0020      	movs	r0, r4
 8002f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f4e:	3468      	adds	r4, #104	; 0x68
 8002f50:	e7d7      	b.n	8002f02 <__sfp+0x1e>
 8002f52:	2104      	movs	r1, #4
 8002f54:	0038      	movs	r0, r7
 8002f56:	f7ff ff57 	bl	8002e08 <__sfmoreglue>
 8002f5a:	1e04      	subs	r4, r0, #0
 8002f5c:	6030      	str	r0, [r6, #0]
 8002f5e:	d1d5      	bne.n	8002f0c <__sfp+0x28>
 8002f60:	f7ff ff70 	bl	8002e44 <__sfp_lock_release>
 8002f64:	230c      	movs	r3, #12
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	e7ef      	b.n	8002f4a <__sfp+0x66>
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	08003d7c 	.word	0x08003d7c
 8002f70:	ffff0001 	.word	0xffff0001

08002f74 <_fwalk_reent>:
 8002f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f76:	0004      	movs	r4, r0
 8002f78:	0006      	movs	r6, r0
 8002f7a:	2700      	movs	r7, #0
 8002f7c:	9101      	str	r1, [sp, #4]
 8002f7e:	3448      	adds	r4, #72	; 0x48
 8002f80:	6863      	ldr	r3, [r4, #4]
 8002f82:	68a5      	ldr	r5, [r4, #8]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	9b00      	ldr	r3, [sp, #0]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	d504      	bpl.n	8002f98 <_fwalk_reent+0x24>
 8002f8e:	6824      	ldr	r4, [r4, #0]
 8002f90:	2c00      	cmp	r4, #0
 8002f92:	d1f5      	bne.n	8002f80 <_fwalk_reent+0xc>
 8002f94:	0038      	movs	r0, r7
 8002f96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f98:	89ab      	ldrh	r3, [r5, #12]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d908      	bls.n	8002fb0 <_fwalk_reent+0x3c>
 8002f9e:	220e      	movs	r2, #14
 8002fa0:	5eab      	ldrsh	r3, [r5, r2]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	d004      	beq.n	8002fb0 <_fwalk_reent+0x3c>
 8002fa6:	0029      	movs	r1, r5
 8002fa8:	0030      	movs	r0, r6
 8002faa:	9b01      	ldr	r3, [sp, #4]
 8002fac:	4798      	blx	r3
 8002fae:	4307      	orrs	r7, r0
 8002fb0:	3568      	adds	r5, #104	; 0x68
 8002fb2:	e7e8      	b.n	8002f86 <_fwalk_reent+0x12>

08002fb4 <__retarget_lock_init_recursive>:
 8002fb4:	4770      	bx	lr

08002fb6 <__retarget_lock_acquire_recursive>:
 8002fb6:	4770      	bx	lr

08002fb8 <__retarget_lock_release_recursive>:
 8002fb8:	4770      	bx	lr
	...

08002fbc <sbrk_aligned>:
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	4e0f      	ldr	r6, [pc, #60]	; (8002ffc <sbrk_aligned+0x40>)
 8002fc0:	000d      	movs	r5, r1
 8002fc2:	6831      	ldr	r1, [r6, #0]
 8002fc4:	0004      	movs	r4, r0
 8002fc6:	2900      	cmp	r1, #0
 8002fc8:	d102      	bne.n	8002fd0 <sbrk_aligned+0x14>
 8002fca:	f000 fb73 	bl	80036b4 <_sbrk_r>
 8002fce:	6030      	str	r0, [r6, #0]
 8002fd0:	0029      	movs	r1, r5
 8002fd2:	0020      	movs	r0, r4
 8002fd4:	f000 fb6e 	bl	80036b4 <_sbrk_r>
 8002fd8:	1c43      	adds	r3, r0, #1
 8002fda:	d00a      	beq.n	8002ff2 <sbrk_aligned+0x36>
 8002fdc:	2303      	movs	r3, #3
 8002fde:	1cc5      	adds	r5, r0, #3
 8002fe0:	439d      	bics	r5, r3
 8002fe2:	42a8      	cmp	r0, r5
 8002fe4:	d007      	beq.n	8002ff6 <sbrk_aligned+0x3a>
 8002fe6:	1a29      	subs	r1, r5, r0
 8002fe8:	0020      	movs	r0, r4
 8002fea:	f000 fb63 	bl	80036b4 <_sbrk_r>
 8002fee:	1c43      	adds	r3, r0, #1
 8002ff0:	d101      	bne.n	8002ff6 <sbrk_aligned+0x3a>
 8002ff2:	2501      	movs	r5, #1
 8002ff4:	426d      	negs	r5, r5
 8002ff6:	0028      	movs	r0, r5
 8002ff8:	bd70      	pop	{r4, r5, r6, pc}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	200001b0 	.word	0x200001b0

08003000 <_malloc_r>:
 8003000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003002:	2203      	movs	r2, #3
 8003004:	1ccb      	adds	r3, r1, #3
 8003006:	4393      	bics	r3, r2
 8003008:	3308      	adds	r3, #8
 800300a:	0006      	movs	r6, r0
 800300c:	001f      	movs	r7, r3
 800300e:	2b0c      	cmp	r3, #12
 8003010:	d232      	bcs.n	8003078 <_malloc_r+0x78>
 8003012:	270c      	movs	r7, #12
 8003014:	42b9      	cmp	r1, r7
 8003016:	d831      	bhi.n	800307c <_malloc_r+0x7c>
 8003018:	0030      	movs	r0, r6
 800301a:	f000 fdf5 	bl	8003c08 <__malloc_lock>
 800301e:	4d32      	ldr	r5, [pc, #200]	; (80030e8 <_malloc_r+0xe8>)
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	001c      	movs	r4, r3
 8003024:	2c00      	cmp	r4, #0
 8003026:	d12e      	bne.n	8003086 <_malloc_r+0x86>
 8003028:	0039      	movs	r1, r7
 800302a:	0030      	movs	r0, r6
 800302c:	f7ff ffc6 	bl	8002fbc <sbrk_aligned>
 8003030:	0004      	movs	r4, r0
 8003032:	1c43      	adds	r3, r0, #1
 8003034:	d11e      	bne.n	8003074 <_malloc_r+0x74>
 8003036:	682c      	ldr	r4, [r5, #0]
 8003038:	0025      	movs	r5, r4
 800303a:	2d00      	cmp	r5, #0
 800303c:	d14a      	bne.n	80030d4 <_malloc_r+0xd4>
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	0029      	movs	r1, r5
 8003042:	18e3      	adds	r3, r4, r3
 8003044:	0030      	movs	r0, r6
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	f000 fb34 	bl	80036b4 <_sbrk_r>
 800304c:	9b01      	ldr	r3, [sp, #4]
 800304e:	4283      	cmp	r3, r0
 8003050:	d143      	bne.n	80030da <_malloc_r+0xda>
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	3703      	adds	r7, #3
 8003056:	1aff      	subs	r7, r7, r3
 8003058:	2303      	movs	r3, #3
 800305a:	439f      	bics	r7, r3
 800305c:	3708      	adds	r7, #8
 800305e:	2f0c      	cmp	r7, #12
 8003060:	d200      	bcs.n	8003064 <_malloc_r+0x64>
 8003062:	270c      	movs	r7, #12
 8003064:	0039      	movs	r1, r7
 8003066:	0030      	movs	r0, r6
 8003068:	f7ff ffa8 	bl	8002fbc <sbrk_aligned>
 800306c:	1c43      	adds	r3, r0, #1
 800306e:	d034      	beq.n	80030da <_malloc_r+0xda>
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	19df      	adds	r7, r3, r7
 8003074:	6027      	str	r7, [r4, #0]
 8003076:	e013      	b.n	80030a0 <_malloc_r+0xa0>
 8003078:	2b00      	cmp	r3, #0
 800307a:	dacb      	bge.n	8003014 <_malloc_r+0x14>
 800307c:	230c      	movs	r3, #12
 800307e:	2500      	movs	r5, #0
 8003080:	6033      	str	r3, [r6, #0]
 8003082:	0028      	movs	r0, r5
 8003084:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003086:	6822      	ldr	r2, [r4, #0]
 8003088:	1bd1      	subs	r1, r2, r7
 800308a:	d420      	bmi.n	80030ce <_malloc_r+0xce>
 800308c:	290b      	cmp	r1, #11
 800308e:	d917      	bls.n	80030c0 <_malloc_r+0xc0>
 8003090:	19e2      	adds	r2, r4, r7
 8003092:	6027      	str	r7, [r4, #0]
 8003094:	42a3      	cmp	r3, r4
 8003096:	d111      	bne.n	80030bc <_malloc_r+0xbc>
 8003098:	602a      	str	r2, [r5, #0]
 800309a:	6863      	ldr	r3, [r4, #4]
 800309c:	6011      	str	r1, [r2, #0]
 800309e:	6053      	str	r3, [r2, #4]
 80030a0:	0030      	movs	r0, r6
 80030a2:	0025      	movs	r5, r4
 80030a4:	f000 fdb8 	bl	8003c18 <__malloc_unlock>
 80030a8:	2207      	movs	r2, #7
 80030aa:	350b      	adds	r5, #11
 80030ac:	1d23      	adds	r3, r4, #4
 80030ae:	4395      	bics	r5, r2
 80030b0:	1aea      	subs	r2, r5, r3
 80030b2:	429d      	cmp	r5, r3
 80030b4:	d0e5      	beq.n	8003082 <_malloc_r+0x82>
 80030b6:	1b5b      	subs	r3, r3, r5
 80030b8:	50a3      	str	r3, [r4, r2]
 80030ba:	e7e2      	b.n	8003082 <_malloc_r+0x82>
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	e7ec      	b.n	800309a <_malloc_r+0x9a>
 80030c0:	6862      	ldr	r2, [r4, #4]
 80030c2:	42a3      	cmp	r3, r4
 80030c4:	d101      	bne.n	80030ca <_malloc_r+0xca>
 80030c6:	602a      	str	r2, [r5, #0]
 80030c8:	e7ea      	b.n	80030a0 <_malloc_r+0xa0>
 80030ca:	605a      	str	r2, [r3, #4]
 80030cc:	e7e8      	b.n	80030a0 <_malloc_r+0xa0>
 80030ce:	0023      	movs	r3, r4
 80030d0:	6864      	ldr	r4, [r4, #4]
 80030d2:	e7a7      	b.n	8003024 <_malloc_r+0x24>
 80030d4:	002c      	movs	r4, r5
 80030d6:	686d      	ldr	r5, [r5, #4]
 80030d8:	e7af      	b.n	800303a <_malloc_r+0x3a>
 80030da:	230c      	movs	r3, #12
 80030dc:	0030      	movs	r0, r6
 80030de:	6033      	str	r3, [r6, #0]
 80030e0:	f000 fd9a 	bl	8003c18 <__malloc_unlock>
 80030e4:	e7cd      	b.n	8003082 <_malloc_r+0x82>
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	200001ac 	.word	0x200001ac

080030ec <__sfputc_r>:
 80030ec:	6893      	ldr	r3, [r2, #8]
 80030ee:	b510      	push	{r4, lr}
 80030f0:	3b01      	subs	r3, #1
 80030f2:	6093      	str	r3, [r2, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	da04      	bge.n	8003102 <__sfputc_r+0x16>
 80030f8:	6994      	ldr	r4, [r2, #24]
 80030fa:	42a3      	cmp	r3, r4
 80030fc:	db07      	blt.n	800310e <__sfputc_r+0x22>
 80030fe:	290a      	cmp	r1, #10
 8003100:	d005      	beq.n	800310e <__sfputc_r+0x22>
 8003102:	6813      	ldr	r3, [r2, #0]
 8003104:	1c58      	adds	r0, r3, #1
 8003106:	6010      	str	r0, [r2, #0]
 8003108:	7019      	strb	r1, [r3, #0]
 800310a:	0008      	movs	r0, r1
 800310c:	bd10      	pop	{r4, pc}
 800310e:	f000 fb2f 	bl	8003770 <__swbuf_r>
 8003112:	0001      	movs	r1, r0
 8003114:	e7f9      	b.n	800310a <__sfputc_r+0x1e>

08003116 <__sfputs_r>:
 8003116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003118:	0006      	movs	r6, r0
 800311a:	000f      	movs	r7, r1
 800311c:	0014      	movs	r4, r2
 800311e:	18d5      	adds	r5, r2, r3
 8003120:	42ac      	cmp	r4, r5
 8003122:	d101      	bne.n	8003128 <__sfputs_r+0x12>
 8003124:	2000      	movs	r0, #0
 8003126:	e007      	b.n	8003138 <__sfputs_r+0x22>
 8003128:	7821      	ldrb	r1, [r4, #0]
 800312a:	003a      	movs	r2, r7
 800312c:	0030      	movs	r0, r6
 800312e:	f7ff ffdd 	bl	80030ec <__sfputc_r>
 8003132:	3401      	adds	r4, #1
 8003134:	1c43      	adds	r3, r0, #1
 8003136:	d1f3      	bne.n	8003120 <__sfputs_r+0xa>
 8003138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800313c <_vfiprintf_r>:
 800313c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800313e:	b0a1      	sub	sp, #132	; 0x84
 8003140:	0006      	movs	r6, r0
 8003142:	000c      	movs	r4, r1
 8003144:	001f      	movs	r7, r3
 8003146:	9203      	str	r2, [sp, #12]
 8003148:	2800      	cmp	r0, #0
 800314a:	d004      	beq.n	8003156 <_vfiprintf_r+0x1a>
 800314c:	6983      	ldr	r3, [r0, #24]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <_vfiprintf_r+0x1a>
 8003152:	f7ff fe8f 	bl	8002e74 <__sinit>
 8003156:	4b8e      	ldr	r3, [pc, #568]	; (8003390 <_vfiprintf_r+0x254>)
 8003158:	429c      	cmp	r4, r3
 800315a:	d11c      	bne.n	8003196 <_vfiprintf_r+0x5a>
 800315c:	6874      	ldr	r4, [r6, #4]
 800315e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003160:	07db      	lsls	r3, r3, #31
 8003162:	d405      	bmi.n	8003170 <_vfiprintf_r+0x34>
 8003164:	89a3      	ldrh	r3, [r4, #12]
 8003166:	059b      	lsls	r3, r3, #22
 8003168:	d402      	bmi.n	8003170 <_vfiprintf_r+0x34>
 800316a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800316c:	f7ff ff23 	bl	8002fb6 <__retarget_lock_acquire_recursive>
 8003170:	89a3      	ldrh	r3, [r4, #12]
 8003172:	071b      	lsls	r3, r3, #28
 8003174:	d502      	bpl.n	800317c <_vfiprintf_r+0x40>
 8003176:	6923      	ldr	r3, [r4, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d11d      	bne.n	80031b8 <_vfiprintf_r+0x7c>
 800317c:	0021      	movs	r1, r4
 800317e:	0030      	movs	r0, r6
 8003180:	f000 fb60 	bl	8003844 <__swsetup_r>
 8003184:	2800      	cmp	r0, #0
 8003186:	d017      	beq.n	80031b8 <_vfiprintf_r+0x7c>
 8003188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800318a:	07db      	lsls	r3, r3, #31
 800318c:	d50d      	bpl.n	80031aa <_vfiprintf_r+0x6e>
 800318e:	2001      	movs	r0, #1
 8003190:	4240      	negs	r0, r0
 8003192:	b021      	add	sp, #132	; 0x84
 8003194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003196:	4b7f      	ldr	r3, [pc, #508]	; (8003394 <_vfiprintf_r+0x258>)
 8003198:	429c      	cmp	r4, r3
 800319a:	d101      	bne.n	80031a0 <_vfiprintf_r+0x64>
 800319c:	68b4      	ldr	r4, [r6, #8]
 800319e:	e7de      	b.n	800315e <_vfiprintf_r+0x22>
 80031a0:	4b7d      	ldr	r3, [pc, #500]	; (8003398 <_vfiprintf_r+0x25c>)
 80031a2:	429c      	cmp	r4, r3
 80031a4:	d1db      	bne.n	800315e <_vfiprintf_r+0x22>
 80031a6:	68f4      	ldr	r4, [r6, #12]
 80031a8:	e7d9      	b.n	800315e <_vfiprintf_r+0x22>
 80031aa:	89a3      	ldrh	r3, [r4, #12]
 80031ac:	059b      	lsls	r3, r3, #22
 80031ae:	d4ee      	bmi.n	800318e <_vfiprintf_r+0x52>
 80031b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031b2:	f7ff ff01 	bl	8002fb8 <__retarget_lock_release_recursive>
 80031b6:	e7ea      	b.n	800318e <_vfiprintf_r+0x52>
 80031b8:	2300      	movs	r3, #0
 80031ba:	ad08      	add	r5, sp, #32
 80031bc:	616b      	str	r3, [r5, #20]
 80031be:	3320      	adds	r3, #32
 80031c0:	766b      	strb	r3, [r5, #25]
 80031c2:	3310      	adds	r3, #16
 80031c4:	76ab      	strb	r3, [r5, #26]
 80031c6:	9707      	str	r7, [sp, #28]
 80031c8:	9f03      	ldr	r7, [sp, #12]
 80031ca:	783b      	ldrb	r3, [r7, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <_vfiprintf_r+0x98>
 80031d0:	2b25      	cmp	r3, #37	; 0x25
 80031d2:	d14e      	bne.n	8003272 <_vfiprintf_r+0x136>
 80031d4:	9b03      	ldr	r3, [sp, #12]
 80031d6:	1afb      	subs	r3, r7, r3
 80031d8:	9305      	str	r3, [sp, #20]
 80031da:	9b03      	ldr	r3, [sp, #12]
 80031dc:	429f      	cmp	r7, r3
 80031de:	d00d      	beq.n	80031fc <_vfiprintf_r+0xc0>
 80031e0:	9b05      	ldr	r3, [sp, #20]
 80031e2:	0021      	movs	r1, r4
 80031e4:	0030      	movs	r0, r6
 80031e6:	9a03      	ldr	r2, [sp, #12]
 80031e8:	f7ff ff95 	bl	8003116 <__sfputs_r>
 80031ec:	1c43      	adds	r3, r0, #1
 80031ee:	d100      	bne.n	80031f2 <_vfiprintf_r+0xb6>
 80031f0:	e0b5      	b.n	800335e <_vfiprintf_r+0x222>
 80031f2:	696a      	ldr	r2, [r5, #20]
 80031f4:	9b05      	ldr	r3, [sp, #20]
 80031f6:	4694      	mov	ip, r2
 80031f8:	4463      	add	r3, ip
 80031fa:	616b      	str	r3, [r5, #20]
 80031fc:	783b      	ldrb	r3, [r7, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d100      	bne.n	8003204 <_vfiprintf_r+0xc8>
 8003202:	e0ac      	b.n	800335e <_vfiprintf_r+0x222>
 8003204:	2201      	movs	r2, #1
 8003206:	1c7b      	adds	r3, r7, #1
 8003208:	9303      	str	r3, [sp, #12]
 800320a:	2300      	movs	r3, #0
 800320c:	4252      	negs	r2, r2
 800320e:	606a      	str	r2, [r5, #4]
 8003210:	a904      	add	r1, sp, #16
 8003212:	3254      	adds	r2, #84	; 0x54
 8003214:	1852      	adds	r2, r2, r1
 8003216:	602b      	str	r3, [r5, #0]
 8003218:	60eb      	str	r3, [r5, #12]
 800321a:	60ab      	str	r3, [r5, #8]
 800321c:	7013      	strb	r3, [r2, #0]
 800321e:	65ab      	str	r3, [r5, #88]	; 0x58
 8003220:	9b03      	ldr	r3, [sp, #12]
 8003222:	2205      	movs	r2, #5
 8003224:	7819      	ldrb	r1, [r3, #0]
 8003226:	485d      	ldr	r0, [pc, #372]	; (800339c <_vfiprintf_r+0x260>)
 8003228:	f000 fce2 	bl	8003bf0 <memchr>
 800322c:	9b03      	ldr	r3, [sp, #12]
 800322e:	1c5f      	adds	r7, r3, #1
 8003230:	2800      	cmp	r0, #0
 8003232:	d120      	bne.n	8003276 <_vfiprintf_r+0x13a>
 8003234:	682a      	ldr	r2, [r5, #0]
 8003236:	06d3      	lsls	r3, r2, #27
 8003238:	d504      	bpl.n	8003244 <_vfiprintf_r+0x108>
 800323a:	2353      	movs	r3, #83	; 0x53
 800323c:	a904      	add	r1, sp, #16
 800323e:	185b      	adds	r3, r3, r1
 8003240:	2120      	movs	r1, #32
 8003242:	7019      	strb	r1, [r3, #0]
 8003244:	0713      	lsls	r3, r2, #28
 8003246:	d504      	bpl.n	8003252 <_vfiprintf_r+0x116>
 8003248:	2353      	movs	r3, #83	; 0x53
 800324a:	a904      	add	r1, sp, #16
 800324c:	185b      	adds	r3, r3, r1
 800324e:	212b      	movs	r1, #43	; 0x2b
 8003250:	7019      	strb	r1, [r3, #0]
 8003252:	9b03      	ldr	r3, [sp, #12]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b2a      	cmp	r3, #42	; 0x2a
 8003258:	d016      	beq.n	8003288 <_vfiprintf_r+0x14c>
 800325a:	2100      	movs	r1, #0
 800325c:	68eb      	ldr	r3, [r5, #12]
 800325e:	9f03      	ldr	r7, [sp, #12]
 8003260:	783a      	ldrb	r2, [r7, #0]
 8003262:	1c78      	adds	r0, r7, #1
 8003264:	3a30      	subs	r2, #48	; 0x30
 8003266:	4684      	mov	ip, r0
 8003268:	2a09      	cmp	r2, #9
 800326a:	d94f      	bls.n	800330c <_vfiprintf_r+0x1d0>
 800326c:	2900      	cmp	r1, #0
 800326e:	d111      	bne.n	8003294 <_vfiprintf_r+0x158>
 8003270:	e017      	b.n	80032a2 <_vfiprintf_r+0x166>
 8003272:	3701      	adds	r7, #1
 8003274:	e7a9      	b.n	80031ca <_vfiprintf_r+0x8e>
 8003276:	4b49      	ldr	r3, [pc, #292]	; (800339c <_vfiprintf_r+0x260>)
 8003278:	682a      	ldr	r2, [r5, #0]
 800327a:	1ac0      	subs	r0, r0, r3
 800327c:	2301      	movs	r3, #1
 800327e:	4083      	lsls	r3, r0
 8003280:	4313      	orrs	r3, r2
 8003282:	602b      	str	r3, [r5, #0]
 8003284:	9703      	str	r7, [sp, #12]
 8003286:	e7cb      	b.n	8003220 <_vfiprintf_r+0xe4>
 8003288:	9b07      	ldr	r3, [sp, #28]
 800328a:	1d19      	adds	r1, r3, #4
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	9107      	str	r1, [sp, #28]
 8003290:	2b00      	cmp	r3, #0
 8003292:	db01      	blt.n	8003298 <_vfiprintf_r+0x15c>
 8003294:	930b      	str	r3, [sp, #44]	; 0x2c
 8003296:	e004      	b.n	80032a2 <_vfiprintf_r+0x166>
 8003298:	425b      	negs	r3, r3
 800329a:	60eb      	str	r3, [r5, #12]
 800329c:	2302      	movs	r3, #2
 800329e:	4313      	orrs	r3, r2
 80032a0:	602b      	str	r3, [r5, #0]
 80032a2:	783b      	ldrb	r3, [r7, #0]
 80032a4:	2b2e      	cmp	r3, #46	; 0x2e
 80032a6:	d10a      	bne.n	80032be <_vfiprintf_r+0x182>
 80032a8:	787b      	ldrb	r3, [r7, #1]
 80032aa:	2b2a      	cmp	r3, #42	; 0x2a
 80032ac:	d137      	bne.n	800331e <_vfiprintf_r+0x1e2>
 80032ae:	9b07      	ldr	r3, [sp, #28]
 80032b0:	3702      	adds	r7, #2
 80032b2:	1d1a      	adds	r2, r3, #4
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	9207      	str	r2, [sp, #28]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	db2d      	blt.n	8003318 <_vfiprintf_r+0x1dc>
 80032bc:	9309      	str	r3, [sp, #36]	; 0x24
 80032be:	2203      	movs	r2, #3
 80032c0:	7839      	ldrb	r1, [r7, #0]
 80032c2:	4837      	ldr	r0, [pc, #220]	; (80033a0 <_vfiprintf_r+0x264>)
 80032c4:	f000 fc94 	bl	8003bf0 <memchr>
 80032c8:	2800      	cmp	r0, #0
 80032ca:	d007      	beq.n	80032dc <_vfiprintf_r+0x1a0>
 80032cc:	4b34      	ldr	r3, [pc, #208]	; (80033a0 <_vfiprintf_r+0x264>)
 80032ce:	682a      	ldr	r2, [r5, #0]
 80032d0:	1ac0      	subs	r0, r0, r3
 80032d2:	2340      	movs	r3, #64	; 0x40
 80032d4:	4083      	lsls	r3, r0
 80032d6:	4313      	orrs	r3, r2
 80032d8:	3701      	adds	r7, #1
 80032da:	602b      	str	r3, [r5, #0]
 80032dc:	7839      	ldrb	r1, [r7, #0]
 80032de:	1c7b      	adds	r3, r7, #1
 80032e0:	2206      	movs	r2, #6
 80032e2:	4830      	ldr	r0, [pc, #192]	; (80033a4 <_vfiprintf_r+0x268>)
 80032e4:	9303      	str	r3, [sp, #12]
 80032e6:	7629      	strb	r1, [r5, #24]
 80032e8:	f000 fc82 	bl	8003bf0 <memchr>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	d045      	beq.n	800337c <_vfiprintf_r+0x240>
 80032f0:	4b2d      	ldr	r3, [pc, #180]	; (80033a8 <_vfiprintf_r+0x26c>)
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d127      	bne.n	8003346 <_vfiprintf_r+0x20a>
 80032f6:	2207      	movs	r2, #7
 80032f8:	9b07      	ldr	r3, [sp, #28]
 80032fa:	3307      	adds	r3, #7
 80032fc:	4393      	bics	r3, r2
 80032fe:	3308      	adds	r3, #8
 8003300:	9307      	str	r3, [sp, #28]
 8003302:	696b      	ldr	r3, [r5, #20]
 8003304:	9a04      	ldr	r2, [sp, #16]
 8003306:	189b      	adds	r3, r3, r2
 8003308:	616b      	str	r3, [r5, #20]
 800330a:	e75d      	b.n	80031c8 <_vfiprintf_r+0x8c>
 800330c:	210a      	movs	r1, #10
 800330e:	434b      	muls	r3, r1
 8003310:	4667      	mov	r7, ip
 8003312:	189b      	adds	r3, r3, r2
 8003314:	3909      	subs	r1, #9
 8003316:	e7a3      	b.n	8003260 <_vfiprintf_r+0x124>
 8003318:	2301      	movs	r3, #1
 800331a:	425b      	negs	r3, r3
 800331c:	e7ce      	b.n	80032bc <_vfiprintf_r+0x180>
 800331e:	2300      	movs	r3, #0
 8003320:	001a      	movs	r2, r3
 8003322:	3701      	adds	r7, #1
 8003324:	606b      	str	r3, [r5, #4]
 8003326:	7839      	ldrb	r1, [r7, #0]
 8003328:	1c78      	adds	r0, r7, #1
 800332a:	3930      	subs	r1, #48	; 0x30
 800332c:	4684      	mov	ip, r0
 800332e:	2909      	cmp	r1, #9
 8003330:	d903      	bls.n	800333a <_vfiprintf_r+0x1fe>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0c3      	beq.n	80032be <_vfiprintf_r+0x182>
 8003336:	9209      	str	r2, [sp, #36]	; 0x24
 8003338:	e7c1      	b.n	80032be <_vfiprintf_r+0x182>
 800333a:	230a      	movs	r3, #10
 800333c:	435a      	muls	r2, r3
 800333e:	4667      	mov	r7, ip
 8003340:	1852      	adds	r2, r2, r1
 8003342:	3b09      	subs	r3, #9
 8003344:	e7ef      	b.n	8003326 <_vfiprintf_r+0x1ea>
 8003346:	ab07      	add	r3, sp, #28
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	0022      	movs	r2, r4
 800334c:	0029      	movs	r1, r5
 800334e:	0030      	movs	r0, r6
 8003350:	4b16      	ldr	r3, [pc, #88]	; (80033ac <_vfiprintf_r+0x270>)
 8003352:	e000      	b.n	8003356 <_vfiprintf_r+0x21a>
 8003354:	bf00      	nop
 8003356:	9004      	str	r0, [sp, #16]
 8003358:	9b04      	ldr	r3, [sp, #16]
 800335a:	3301      	adds	r3, #1
 800335c:	d1d1      	bne.n	8003302 <_vfiprintf_r+0x1c6>
 800335e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003360:	07db      	lsls	r3, r3, #31
 8003362:	d405      	bmi.n	8003370 <_vfiprintf_r+0x234>
 8003364:	89a3      	ldrh	r3, [r4, #12]
 8003366:	059b      	lsls	r3, r3, #22
 8003368:	d402      	bmi.n	8003370 <_vfiprintf_r+0x234>
 800336a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800336c:	f7ff fe24 	bl	8002fb8 <__retarget_lock_release_recursive>
 8003370:	89a3      	ldrh	r3, [r4, #12]
 8003372:	065b      	lsls	r3, r3, #25
 8003374:	d500      	bpl.n	8003378 <_vfiprintf_r+0x23c>
 8003376:	e70a      	b.n	800318e <_vfiprintf_r+0x52>
 8003378:	980d      	ldr	r0, [sp, #52]	; 0x34
 800337a:	e70a      	b.n	8003192 <_vfiprintf_r+0x56>
 800337c:	ab07      	add	r3, sp, #28
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	0022      	movs	r2, r4
 8003382:	0029      	movs	r1, r5
 8003384:	0030      	movs	r0, r6
 8003386:	4b09      	ldr	r3, [pc, #36]	; (80033ac <_vfiprintf_r+0x270>)
 8003388:	f000 f882 	bl	8003490 <_printf_i>
 800338c:	e7e3      	b.n	8003356 <_vfiprintf_r+0x21a>
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	08003da0 	.word	0x08003da0
 8003394:	08003dc0 	.word	0x08003dc0
 8003398:	08003d80 	.word	0x08003d80
 800339c:	08003de0 	.word	0x08003de0
 80033a0:	08003de6 	.word	0x08003de6
 80033a4:	08003dea 	.word	0x08003dea
 80033a8:	00000000 	.word	0x00000000
 80033ac:	08003117 	.word	0x08003117

080033b0 <_printf_common>:
 80033b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033b2:	0015      	movs	r5, r2
 80033b4:	9301      	str	r3, [sp, #4]
 80033b6:	688a      	ldr	r2, [r1, #8]
 80033b8:	690b      	ldr	r3, [r1, #16]
 80033ba:	000c      	movs	r4, r1
 80033bc:	9000      	str	r0, [sp, #0]
 80033be:	4293      	cmp	r3, r2
 80033c0:	da00      	bge.n	80033c4 <_printf_common+0x14>
 80033c2:	0013      	movs	r3, r2
 80033c4:	0022      	movs	r2, r4
 80033c6:	602b      	str	r3, [r5, #0]
 80033c8:	3243      	adds	r2, #67	; 0x43
 80033ca:	7812      	ldrb	r2, [r2, #0]
 80033cc:	2a00      	cmp	r2, #0
 80033ce:	d001      	beq.n	80033d4 <_printf_common+0x24>
 80033d0:	3301      	adds	r3, #1
 80033d2:	602b      	str	r3, [r5, #0]
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	069b      	lsls	r3, r3, #26
 80033d8:	d502      	bpl.n	80033e0 <_printf_common+0x30>
 80033da:	682b      	ldr	r3, [r5, #0]
 80033dc:	3302      	adds	r3, #2
 80033de:	602b      	str	r3, [r5, #0]
 80033e0:	6822      	ldr	r2, [r4, #0]
 80033e2:	2306      	movs	r3, #6
 80033e4:	0017      	movs	r7, r2
 80033e6:	401f      	ands	r7, r3
 80033e8:	421a      	tst	r2, r3
 80033ea:	d027      	beq.n	800343c <_printf_common+0x8c>
 80033ec:	0023      	movs	r3, r4
 80033ee:	3343      	adds	r3, #67	; 0x43
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	1e5a      	subs	r2, r3, #1
 80033f4:	4193      	sbcs	r3, r2
 80033f6:	6822      	ldr	r2, [r4, #0]
 80033f8:	0692      	lsls	r2, r2, #26
 80033fa:	d430      	bmi.n	800345e <_printf_common+0xae>
 80033fc:	0022      	movs	r2, r4
 80033fe:	9901      	ldr	r1, [sp, #4]
 8003400:	9800      	ldr	r0, [sp, #0]
 8003402:	9e08      	ldr	r6, [sp, #32]
 8003404:	3243      	adds	r2, #67	; 0x43
 8003406:	47b0      	blx	r6
 8003408:	1c43      	adds	r3, r0, #1
 800340a:	d025      	beq.n	8003458 <_printf_common+0xa8>
 800340c:	2306      	movs	r3, #6
 800340e:	6820      	ldr	r0, [r4, #0]
 8003410:	682a      	ldr	r2, [r5, #0]
 8003412:	68e1      	ldr	r1, [r4, #12]
 8003414:	2500      	movs	r5, #0
 8003416:	4003      	ands	r3, r0
 8003418:	2b04      	cmp	r3, #4
 800341a:	d103      	bne.n	8003424 <_printf_common+0x74>
 800341c:	1a8d      	subs	r5, r1, r2
 800341e:	43eb      	mvns	r3, r5
 8003420:	17db      	asrs	r3, r3, #31
 8003422:	401d      	ands	r5, r3
 8003424:	68a3      	ldr	r3, [r4, #8]
 8003426:	6922      	ldr	r2, [r4, #16]
 8003428:	4293      	cmp	r3, r2
 800342a:	dd01      	ble.n	8003430 <_printf_common+0x80>
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	18ed      	adds	r5, r5, r3
 8003430:	2700      	movs	r7, #0
 8003432:	42bd      	cmp	r5, r7
 8003434:	d120      	bne.n	8003478 <_printf_common+0xc8>
 8003436:	2000      	movs	r0, #0
 8003438:	e010      	b.n	800345c <_printf_common+0xac>
 800343a:	3701      	adds	r7, #1
 800343c:	68e3      	ldr	r3, [r4, #12]
 800343e:	682a      	ldr	r2, [r5, #0]
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	42bb      	cmp	r3, r7
 8003444:	ddd2      	ble.n	80033ec <_printf_common+0x3c>
 8003446:	0022      	movs	r2, r4
 8003448:	2301      	movs	r3, #1
 800344a:	9901      	ldr	r1, [sp, #4]
 800344c:	9800      	ldr	r0, [sp, #0]
 800344e:	9e08      	ldr	r6, [sp, #32]
 8003450:	3219      	adds	r2, #25
 8003452:	47b0      	blx	r6
 8003454:	1c43      	adds	r3, r0, #1
 8003456:	d1f0      	bne.n	800343a <_printf_common+0x8a>
 8003458:	2001      	movs	r0, #1
 800345a:	4240      	negs	r0, r0
 800345c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800345e:	2030      	movs	r0, #48	; 0x30
 8003460:	18e1      	adds	r1, r4, r3
 8003462:	3143      	adds	r1, #67	; 0x43
 8003464:	7008      	strb	r0, [r1, #0]
 8003466:	0021      	movs	r1, r4
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	3145      	adds	r1, #69	; 0x45
 800346c:	7809      	ldrb	r1, [r1, #0]
 800346e:	18a2      	adds	r2, r4, r2
 8003470:	3243      	adds	r2, #67	; 0x43
 8003472:	3302      	adds	r3, #2
 8003474:	7011      	strb	r1, [r2, #0]
 8003476:	e7c1      	b.n	80033fc <_printf_common+0x4c>
 8003478:	0022      	movs	r2, r4
 800347a:	2301      	movs	r3, #1
 800347c:	9901      	ldr	r1, [sp, #4]
 800347e:	9800      	ldr	r0, [sp, #0]
 8003480:	9e08      	ldr	r6, [sp, #32]
 8003482:	321a      	adds	r2, #26
 8003484:	47b0      	blx	r6
 8003486:	1c43      	adds	r3, r0, #1
 8003488:	d0e6      	beq.n	8003458 <_printf_common+0xa8>
 800348a:	3701      	adds	r7, #1
 800348c:	e7d1      	b.n	8003432 <_printf_common+0x82>
	...

08003490 <_printf_i>:
 8003490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003492:	b08b      	sub	sp, #44	; 0x2c
 8003494:	9206      	str	r2, [sp, #24]
 8003496:	000a      	movs	r2, r1
 8003498:	3243      	adds	r2, #67	; 0x43
 800349a:	9307      	str	r3, [sp, #28]
 800349c:	9005      	str	r0, [sp, #20]
 800349e:	9204      	str	r2, [sp, #16]
 80034a0:	7e0a      	ldrb	r2, [r1, #24]
 80034a2:	000c      	movs	r4, r1
 80034a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80034a6:	2a78      	cmp	r2, #120	; 0x78
 80034a8:	d807      	bhi.n	80034ba <_printf_i+0x2a>
 80034aa:	2a62      	cmp	r2, #98	; 0x62
 80034ac:	d809      	bhi.n	80034c2 <_printf_i+0x32>
 80034ae:	2a00      	cmp	r2, #0
 80034b0:	d100      	bne.n	80034b4 <_printf_i+0x24>
 80034b2:	e0c1      	b.n	8003638 <_printf_i+0x1a8>
 80034b4:	2a58      	cmp	r2, #88	; 0x58
 80034b6:	d100      	bne.n	80034ba <_printf_i+0x2a>
 80034b8:	e08c      	b.n	80035d4 <_printf_i+0x144>
 80034ba:	0026      	movs	r6, r4
 80034bc:	3642      	adds	r6, #66	; 0x42
 80034be:	7032      	strb	r2, [r6, #0]
 80034c0:	e022      	b.n	8003508 <_printf_i+0x78>
 80034c2:	0010      	movs	r0, r2
 80034c4:	3863      	subs	r0, #99	; 0x63
 80034c6:	2815      	cmp	r0, #21
 80034c8:	d8f7      	bhi.n	80034ba <_printf_i+0x2a>
 80034ca:	f7fc fe1d 	bl	8000108 <__gnu_thumb1_case_shi>
 80034ce:	0016      	.short	0x0016
 80034d0:	fff6001f 	.word	0xfff6001f
 80034d4:	fff6fff6 	.word	0xfff6fff6
 80034d8:	001ffff6 	.word	0x001ffff6
 80034dc:	fff6fff6 	.word	0xfff6fff6
 80034e0:	fff6fff6 	.word	0xfff6fff6
 80034e4:	003600a8 	.word	0x003600a8
 80034e8:	fff6009a 	.word	0xfff6009a
 80034ec:	00b9fff6 	.word	0x00b9fff6
 80034f0:	0036fff6 	.word	0x0036fff6
 80034f4:	fff6fff6 	.word	0xfff6fff6
 80034f8:	009e      	.short	0x009e
 80034fa:	0026      	movs	r6, r4
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	3642      	adds	r6, #66	; 0x42
 8003500:	1d11      	adds	r1, r2, #4
 8003502:	6019      	str	r1, [r3, #0]
 8003504:	6813      	ldr	r3, [r2, #0]
 8003506:	7033      	strb	r3, [r6, #0]
 8003508:	2301      	movs	r3, #1
 800350a:	e0a7      	b.n	800365c <_printf_i+0x1cc>
 800350c:	6808      	ldr	r0, [r1, #0]
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	1d0a      	adds	r2, r1, #4
 8003512:	0605      	lsls	r5, r0, #24
 8003514:	d50b      	bpl.n	800352e <_printf_i+0x9e>
 8003516:	680d      	ldr	r5, [r1, #0]
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	2d00      	cmp	r5, #0
 800351c:	da03      	bge.n	8003526 <_printf_i+0x96>
 800351e:	232d      	movs	r3, #45	; 0x2d
 8003520:	9a04      	ldr	r2, [sp, #16]
 8003522:	426d      	negs	r5, r5
 8003524:	7013      	strb	r3, [r2, #0]
 8003526:	4b61      	ldr	r3, [pc, #388]	; (80036ac <_printf_i+0x21c>)
 8003528:	270a      	movs	r7, #10
 800352a:	9303      	str	r3, [sp, #12]
 800352c:	e01b      	b.n	8003566 <_printf_i+0xd6>
 800352e:	680d      	ldr	r5, [r1, #0]
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	0641      	lsls	r1, r0, #25
 8003534:	d5f1      	bpl.n	800351a <_printf_i+0x8a>
 8003536:	b22d      	sxth	r5, r5
 8003538:	e7ef      	b.n	800351a <_printf_i+0x8a>
 800353a:	680d      	ldr	r5, [r1, #0]
 800353c:	6819      	ldr	r1, [r3, #0]
 800353e:	1d08      	adds	r0, r1, #4
 8003540:	6018      	str	r0, [r3, #0]
 8003542:	062e      	lsls	r6, r5, #24
 8003544:	d501      	bpl.n	800354a <_printf_i+0xba>
 8003546:	680d      	ldr	r5, [r1, #0]
 8003548:	e003      	b.n	8003552 <_printf_i+0xc2>
 800354a:	066d      	lsls	r5, r5, #25
 800354c:	d5fb      	bpl.n	8003546 <_printf_i+0xb6>
 800354e:	680d      	ldr	r5, [r1, #0]
 8003550:	b2ad      	uxth	r5, r5
 8003552:	4b56      	ldr	r3, [pc, #344]	; (80036ac <_printf_i+0x21c>)
 8003554:	2708      	movs	r7, #8
 8003556:	9303      	str	r3, [sp, #12]
 8003558:	2a6f      	cmp	r2, #111	; 0x6f
 800355a:	d000      	beq.n	800355e <_printf_i+0xce>
 800355c:	3702      	adds	r7, #2
 800355e:	0023      	movs	r3, r4
 8003560:	2200      	movs	r2, #0
 8003562:	3343      	adds	r3, #67	; 0x43
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	6863      	ldr	r3, [r4, #4]
 8003568:	60a3      	str	r3, [r4, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	db03      	blt.n	8003576 <_printf_i+0xe6>
 800356e:	2204      	movs	r2, #4
 8003570:	6821      	ldr	r1, [r4, #0]
 8003572:	4391      	bics	r1, r2
 8003574:	6021      	str	r1, [r4, #0]
 8003576:	2d00      	cmp	r5, #0
 8003578:	d102      	bne.n	8003580 <_printf_i+0xf0>
 800357a:	9e04      	ldr	r6, [sp, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00c      	beq.n	800359a <_printf_i+0x10a>
 8003580:	9e04      	ldr	r6, [sp, #16]
 8003582:	0028      	movs	r0, r5
 8003584:	0039      	movs	r1, r7
 8003586:	f7fc fe4f 	bl	8000228 <__aeabi_uidivmod>
 800358a:	9b03      	ldr	r3, [sp, #12]
 800358c:	3e01      	subs	r6, #1
 800358e:	5c5b      	ldrb	r3, [r3, r1]
 8003590:	7033      	strb	r3, [r6, #0]
 8003592:	002b      	movs	r3, r5
 8003594:	0005      	movs	r5, r0
 8003596:	429f      	cmp	r7, r3
 8003598:	d9f3      	bls.n	8003582 <_printf_i+0xf2>
 800359a:	2f08      	cmp	r7, #8
 800359c:	d109      	bne.n	80035b2 <_printf_i+0x122>
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	07db      	lsls	r3, r3, #31
 80035a2:	d506      	bpl.n	80035b2 <_printf_i+0x122>
 80035a4:	6863      	ldr	r3, [r4, #4]
 80035a6:	6922      	ldr	r2, [r4, #16]
 80035a8:	4293      	cmp	r3, r2
 80035aa:	dc02      	bgt.n	80035b2 <_printf_i+0x122>
 80035ac:	2330      	movs	r3, #48	; 0x30
 80035ae:	3e01      	subs	r6, #1
 80035b0:	7033      	strb	r3, [r6, #0]
 80035b2:	9b04      	ldr	r3, [sp, #16]
 80035b4:	1b9b      	subs	r3, r3, r6
 80035b6:	6123      	str	r3, [r4, #16]
 80035b8:	9b07      	ldr	r3, [sp, #28]
 80035ba:	0021      	movs	r1, r4
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	9805      	ldr	r0, [sp, #20]
 80035c0:	9b06      	ldr	r3, [sp, #24]
 80035c2:	aa09      	add	r2, sp, #36	; 0x24
 80035c4:	f7ff fef4 	bl	80033b0 <_printf_common>
 80035c8:	1c43      	adds	r3, r0, #1
 80035ca:	d14c      	bne.n	8003666 <_printf_i+0x1d6>
 80035cc:	2001      	movs	r0, #1
 80035ce:	4240      	negs	r0, r0
 80035d0:	b00b      	add	sp, #44	; 0x2c
 80035d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035d4:	3145      	adds	r1, #69	; 0x45
 80035d6:	700a      	strb	r2, [r1, #0]
 80035d8:	4a34      	ldr	r2, [pc, #208]	; (80036ac <_printf_i+0x21c>)
 80035da:	9203      	str	r2, [sp, #12]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	6821      	ldr	r1, [r4, #0]
 80035e0:	ca20      	ldmia	r2!, {r5}
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	0608      	lsls	r0, r1, #24
 80035e6:	d516      	bpl.n	8003616 <_printf_i+0x186>
 80035e8:	07cb      	lsls	r3, r1, #31
 80035ea:	d502      	bpl.n	80035f2 <_printf_i+0x162>
 80035ec:	2320      	movs	r3, #32
 80035ee:	4319      	orrs	r1, r3
 80035f0:	6021      	str	r1, [r4, #0]
 80035f2:	2710      	movs	r7, #16
 80035f4:	2d00      	cmp	r5, #0
 80035f6:	d1b2      	bne.n	800355e <_printf_i+0xce>
 80035f8:	2320      	movs	r3, #32
 80035fa:	6822      	ldr	r2, [r4, #0]
 80035fc:	439a      	bics	r2, r3
 80035fe:	6022      	str	r2, [r4, #0]
 8003600:	e7ad      	b.n	800355e <_printf_i+0xce>
 8003602:	2220      	movs	r2, #32
 8003604:	6809      	ldr	r1, [r1, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	6022      	str	r2, [r4, #0]
 800360a:	0022      	movs	r2, r4
 800360c:	2178      	movs	r1, #120	; 0x78
 800360e:	3245      	adds	r2, #69	; 0x45
 8003610:	7011      	strb	r1, [r2, #0]
 8003612:	4a27      	ldr	r2, [pc, #156]	; (80036b0 <_printf_i+0x220>)
 8003614:	e7e1      	b.n	80035da <_printf_i+0x14a>
 8003616:	0648      	lsls	r0, r1, #25
 8003618:	d5e6      	bpl.n	80035e8 <_printf_i+0x158>
 800361a:	b2ad      	uxth	r5, r5
 800361c:	e7e4      	b.n	80035e8 <_printf_i+0x158>
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	680d      	ldr	r5, [r1, #0]
 8003622:	1d10      	adds	r0, r2, #4
 8003624:	6949      	ldr	r1, [r1, #20]
 8003626:	6018      	str	r0, [r3, #0]
 8003628:	6813      	ldr	r3, [r2, #0]
 800362a:	062e      	lsls	r6, r5, #24
 800362c:	d501      	bpl.n	8003632 <_printf_i+0x1a2>
 800362e:	6019      	str	r1, [r3, #0]
 8003630:	e002      	b.n	8003638 <_printf_i+0x1a8>
 8003632:	066d      	lsls	r5, r5, #25
 8003634:	d5fb      	bpl.n	800362e <_printf_i+0x19e>
 8003636:	8019      	strh	r1, [r3, #0]
 8003638:	2300      	movs	r3, #0
 800363a:	9e04      	ldr	r6, [sp, #16]
 800363c:	6123      	str	r3, [r4, #16]
 800363e:	e7bb      	b.n	80035b8 <_printf_i+0x128>
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	1d11      	adds	r1, r2, #4
 8003644:	6019      	str	r1, [r3, #0]
 8003646:	6816      	ldr	r6, [r2, #0]
 8003648:	2100      	movs	r1, #0
 800364a:	0030      	movs	r0, r6
 800364c:	6862      	ldr	r2, [r4, #4]
 800364e:	f000 facf 	bl	8003bf0 <memchr>
 8003652:	2800      	cmp	r0, #0
 8003654:	d001      	beq.n	800365a <_printf_i+0x1ca>
 8003656:	1b80      	subs	r0, r0, r6
 8003658:	6060      	str	r0, [r4, #4]
 800365a:	6863      	ldr	r3, [r4, #4]
 800365c:	6123      	str	r3, [r4, #16]
 800365e:	2300      	movs	r3, #0
 8003660:	9a04      	ldr	r2, [sp, #16]
 8003662:	7013      	strb	r3, [r2, #0]
 8003664:	e7a8      	b.n	80035b8 <_printf_i+0x128>
 8003666:	6923      	ldr	r3, [r4, #16]
 8003668:	0032      	movs	r2, r6
 800366a:	9906      	ldr	r1, [sp, #24]
 800366c:	9805      	ldr	r0, [sp, #20]
 800366e:	9d07      	ldr	r5, [sp, #28]
 8003670:	47a8      	blx	r5
 8003672:	1c43      	adds	r3, r0, #1
 8003674:	d0aa      	beq.n	80035cc <_printf_i+0x13c>
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	079b      	lsls	r3, r3, #30
 800367a:	d415      	bmi.n	80036a8 <_printf_i+0x218>
 800367c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800367e:	68e0      	ldr	r0, [r4, #12]
 8003680:	4298      	cmp	r0, r3
 8003682:	daa5      	bge.n	80035d0 <_printf_i+0x140>
 8003684:	0018      	movs	r0, r3
 8003686:	e7a3      	b.n	80035d0 <_printf_i+0x140>
 8003688:	0022      	movs	r2, r4
 800368a:	2301      	movs	r3, #1
 800368c:	9906      	ldr	r1, [sp, #24]
 800368e:	9805      	ldr	r0, [sp, #20]
 8003690:	9e07      	ldr	r6, [sp, #28]
 8003692:	3219      	adds	r2, #25
 8003694:	47b0      	blx	r6
 8003696:	1c43      	adds	r3, r0, #1
 8003698:	d098      	beq.n	80035cc <_printf_i+0x13c>
 800369a:	3501      	adds	r5, #1
 800369c:	68e3      	ldr	r3, [r4, #12]
 800369e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	42ab      	cmp	r3, r5
 80036a4:	dcf0      	bgt.n	8003688 <_printf_i+0x1f8>
 80036a6:	e7e9      	b.n	800367c <_printf_i+0x1ec>
 80036a8:	2500      	movs	r5, #0
 80036aa:	e7f7      	b.n	800369c <_printf_i+0x20c>
 80036ac:	08003df1 	.word	0x08003df1
 80036b0:	08003e02 	.word	0x08003e02

080036b4 <_sbrk_r>:
 80036b4:	2300      	movs	r3, #0
 80036b6:	b570      	push	{r4, r5, r6, lr}
 80036b8:	4d06      	ldr	r5, [pc, #24]	; (80036d4 <_sbrk_r+0x20>)
 80036ba:	0004      	movs	r4, r0
 80036bc:	0008      	movs	r0, r1
 80036be:	602b      	str	r3, [r5, #0]
 80036c0:	f7fd f8ea 	bl	8000898 <_sbrk>
 80036c4:	1c43      	adds	r3, r0, #1
 80036c6:	d103      	bne.n	80036d0 <_sbrk_r+0x1c>
 80036c8:	682b      	ldr	r3, [r5, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d000      	beq.n	80036d0 <_sbrk_r+0x1c>
 80036ce:	6023      	str	r3, [r4, #0]
 80036d0:	bd70      	pop	{r4, r5, r6, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	200001b4 	.word	0x200001b4

080036d8 <__sread>:
 80036d8:	b570      	push	{r4, r5, r6, lr}
 80036da:	000c      	movs	r4, r1
 80036dc:	250e      	movs	r5, #14
 80036de:	5f49      	ldrsh	r1, [r1, r5]
 80036e0:	f000 faec 	bl	8003cbc <_read_r>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	db03      	blt.n	80036f0 <__sread+0x18>
 80036e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036ea:	181b      	adds	r3, r3, r0
 80036ec:	6563      	str	r3, [r4, #84]	; 0x54
 80036ee:	bd70      	pop	{r4, r5, r6, pc}
 80036f0:	89a3      	ldrh	r3, [r4, #12]
 80036f2:	4a02      	ldr	r2, [pc, #8]	; (80036fc <__sread+0x24>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	81a3      	strh	r3, [r4, #12]
 80036f8:	e7f9      	b.n	80036ee <__sread+0x16>
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	ffffefff 	.word	0xffffefff

08003700 <__swrite>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	001f      	movs	r7, r3
 8003704:	898b      	ldrh	r3, [r1, #12]
 8003706:	0005      	movs	r5, r0
 8003708:	000c      	movs	r4, r1
 800370a:	0016      	movs	r6, r2
 800370c:	05db      	lsls	r3, r3, #23
 800370e:	d505      	bpl.n	800371c <__swrite+0x1c>
 8003710:	230e      	movs	r3, #14
 8003712:	5ec9      	ldrsh	r1, [r1, r3]
 8003714:	2200      	movs	r2, #0
 8003716:	2302      	movs	r3, #2
 8003718:	f000 f9ea 	bl	8003af0 <_lseek_r>
 800371c:	89a3      	ldrh	r3, [r4, #12]
 800371e:	4a05      	ldr	r2, [pc, #20]	; (8003734 <__swrite+0x34>)
 8003720:	0028      	movs	r0, r5
 8003722:	4013      	ands	r3, r2
 8003724:	81a3      	strh	r3, [r4, #12]
 8003726:	0032      	movs	r2, r6
 8003728:	230e      	movs	r3, #14
 800372a:	5ee1      	ldrsh	r1, [r4, r3]
 800372c:	003b      	movs	r3, r7
 800372e:	f000 f875 	bl	800381c <_write_r>
 8003732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003734:	ffffefff 	.word	0xffffefff

08003738 <__sseek>:
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	000c      	movs	r4, r1
 800373c:	250e      	movs	r5, #14
 800373e:	5f49      	ldrsh	r1, [r1, r5]
 8003740:	f000 f9d6 	bl	8003af0 <_lseek_r>
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	1c42      	adds	r2, r0, #1
 8003748:	d103      	bne.n	8003752 <__sseek+0x1a>
 800374a:	4a05      	ldr	r2, [pc, #20]	; (8003760 <__sseek+0x28>)
 800374c:	4013      	ands	r3, r2
 800374e:	81a3      	strh	r3, [r4, #12]
 8003750:	bd70      	pop	{r4, r5, r6, pc}
 8003752:	2280      	movs	r2, #128	; 0x80
 8003754:	0152      	lsls	r2, r2, #5
 8003756:	4313      	orrs	r3, r2
 8003758:	81a3      	strh	r3, [r4, #12]
 800375a:	6560      	str	r0, [r4, #84]	; 0x54
 800375c:	e7f8      	b.n	8003750 <__sseek+0x18>
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	ffffefff 	.word	0xffffefff

08003764 <__sclose>:
 8003764:	b510      	push	{r4, lr}
 8003766:	230e      	movs	r3, #14
 8003768:	5ec9      	ldrsh	r1, [r1, r3]
 800376a:	f000 f8e3 	bl	8003934 <_close_r>
 800376e:	bd10      	pop	{r4, pc}

08003770 <__swbuf_r>:
 8003770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003772:	0005      	movs	r5, r0
 8003774:	000e      	movs	r6, r1
 8003776:	0014      	movs	r4, r2
 8003778:	2800      	cmp	r0, #0
 800377a:	d004      	beq.n	8003786 <__swbuf_r+0x16>
 800377c:	6983      	ldr	r3, [r0, #24]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <__swbuf_r+0x16>
 8003782:	f7ff fb77 	bl	8002e74 <__sinit>
 8003786:	4b22      	ldr	r3, [pc, #136]	; (8003810 <__swbuf_r+0xa0>)
 8003788:	429c      	cmp	r4, r3
 800378a:	d12e      	bne.n	80037ea <__swbuf_r+0x7a>
 800378c:	686c      	ldr	r4, [r5, #4]
 800378e:	69a3      	ldr	r3, [r4, #24]
 8003790:	60a3      	str	r3, [r4, #8]
 8003792:	89a3      	ldrh	r3, [r4, #12]
 8003794:	071b      	lsls	r3, r3, #28
 8003796:	d532      	bpl.n	80037fe <__swbuf_r+0x8e>
 8003798:	6923      	ldr	r3, [r4, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d02f      	beq.n	80037fe <__swbuf_r+0x8e>
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	6922      	ldr	r2, [r4, #16]
 80037a2:	b2f7      	uxtb	r7, r6
 80037a4:	1a98      	subs	r0, r3, r2
 80037a6:	6963      	ldr	r3, [r4, #20]
 80037a8:	b2f6      	uxtb	r6, r6
 80037aa:	4283      	cmp	r3, r0
 80037ac:	dc05      	bgt.n	80037ba <__swbuf_r+0x4a>
 80037ae:	0021      	movs	r1, r4
 80037b0:	0028      	movs	r0, r5
 80037b2:	f000 f95d 	bl	8003a70 <_fflush_r>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d127      	bne.n	800380a <__swbuf_r+0x9a>
 80037ba:	68a3      	ldr	r3, [r4, #8]
 80037bc:	3001      	adds	r0, #1
 80037be:	3b01      	subs	r3, #1
 80037c0:	60a3      	str	r3, [r4, #8]
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	6022      	str	r2, [r4, #0]
 80037c8:	701f      	strb	r7, [r3, #0]
 80037ca:	6963      	ldr	r3, [r4, #20]
 80037cc:	4283      	cmp	r3, r0
 80037ce:	d004      	beq.n	80037da <__swbuf_r+0x6a>
 80037d0:	89a3      	ldrh	r3, [r4, #12]
 80037d2:	07db      	lsls	r3, r3, #31
 80037d4:	d507      	bpl.n	80037e6 <__swbuf_r+0x76>
 80037d6:	2e0a      	cmp	r6, #10
 80037d8:	d105      	bne.n	80037e6 <__swbuf_r+0x76>
 80037da:	0021      	movs	r1, r4
 80037dc:	0028      	movs	r0, r5
 80037de:	f000 f947 	bl	8003a70 <_fflush_r>
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d111      	bne.n	800380a <__swbuf_r+0x9a>
 80037e6:	0030      	movs	r0, r6
 80037e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037ea:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <__swbuf_r+0xa4>)
 80037ec:	429c      	cmp	r4, r3
 80037ee:	d101      	bne.n	80037f4 <__swbuf_r+0x84>
 80037f0:	68ac      	ldr	r4, [r5, #8]
 80037f2:	e7cc      	b.n	800378e <__swbuf_r+0x1e>
 80037f4:	4b08      	ldr	r3, [pc, #32]	; (8003818 <__swbuf_r+0xa8>)
 80037f6:	429c      	cmp	r4, r3
 80037f8:	d1c9      	bne.n	800378e <__swbuf_r+0x1e>
 80037fa:	68ec      	ldr	r4, [r5, #12]
 80037fc:	e7c7      	b.n	800378e <__swbuf_r+0x1e>
 80037fe:	0021      	movs	r1, r4
 8003800:	0028      	movs	r0, r5
 8003802:	f000 f81f 	bl	8003844 <__swsetup_r>
 8003806:	2800      	cmp	r0, #0
 8003808:	d0c9      	beq.n	800379e <__swbuf_r+0x2e>
 800380a:	2601      	movs	r6, #1
 800380c:	4276      	negs	r6, r6
 800380e:	e7ea      	b.n	80037e6 <__swbuf_r+0x76>
 8003810:	08003da0 	.word	0x08003da0
 8003814:	08003dc0 	.word	0x08003dc0
 8003818:	08003d80 	.word	0x08003d80

0800381c <_write_r>:
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	0004      	movs	r4, r0
 8003820:	0008      	movs	r0, r1
 8003822:	0011      	movs	r1, r2
 8003824:	001a      	movs	r2, r3
 8003826:	2300      	movs	r3, #0
 8003828:	4d05      	ldr	r5, [pc, #20]	; (8003840 <_write_r+0x24>)
 800382a:	602b      	str	r3, [r5, #0]
 800382c:	f7fc ffeb 	bl	8000806 <_write>
 8003830:	1c43      	adds	r3, r0, #1
 8003832:	d103      	bne.n	800383c <_write_r+0x20>
 8003834:	682b      	ldr	r3, [r5, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d000      	beq.n	800383c <_write_r+0x20>
 800383a:	6023      	str	r3, [r4, #0]
 800383c:	bd70      	pop	{r4, r5, r6, pc}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	200001b4 	.word	0x200001b4

08003844 <__swsetup_r>:
 8003844:	4b37      	ldr	r3, [pc, #220]	; (8003924 <__swsetup_r+0xe0>)
 8003846:	b570      	push	{r4, r5, r6, lr}
 8003848:	681d      	ldr	r5, [r3, #0]
 800384a:	0006      	movs	r6, r0
 800384c:	000c      	movs	r4, r1
 800384e:	2d00      	cmp	r5, #0
 8003850:	d005      	beq.n	800385e <__swsetup_r+0x1a>
 8003852:	69ab      	ldr	r3, [r5, #24]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d102      	bne.n	800385e <__swsetup_r+0x1a>
 8003858:	0028      	movs	r0, r5
 800385a:	f7ff fb0b 	bl	8002e74 <__sinit>
 800385e:	4b32      	ldr	r3, [pc, #200]	; (8003928 <__swsetup_r+0xe4>)
 8003860:	429c      	cmp	r4, r3
 8003862:	d10f      	bne.n	8003884 <__swsetup_r+0x40>
 8003864:	686c      	ldr	r4, [r5, #4]
 8003866:	230c      	movs	r3, #12
 8003868:	5ee2      	ldrsh	r2, [r4, r3]
 800386a:	b293      	uxth	r3, r2
 800386c:	0711      	lsls	r1, r2, #28
 800386e:	d42d      	bmi.n	80038cc <__swsetup_r+0x88>
 8003870:	06d9      	lsls	r1, r3, #27
 8003872:	d411      	bmi.n	8003898 <__swsetup_r+0x54>
 8003874:	2309      	movs	r3, #9
 8003876:	2001      	movs	r0, #1
 8003878:	6033      	str	r3, [r6, #0]
 800387a:	3337      	adds	r3, #55	; 0x37
 800387c:	4313      	orrs	r3, r2
 800387e:	81a3      	strh	r3, [r4, #12]
 8003880:	4240      	negs	r0, r0
 8003882:	bd70      	pop	{r4, r5, r6, pc}
 8003884:	4b29      	ldr	r3, [pc, #164]	; (800392c <__swsetup_r+0xe8>)
 8003886:	429c      	cmp	r4, r3
 8003888:	d101      	bne.n	800388e <__swsetup_r+0x4a>
 800388a:	68ac      	ldr	r4, [r5, #8]
 800388c:	e7eb      	b.n	8003866 <__swsetup_r+0x22>
 800388e:	4b28      	ldr	r3, [pc, #160]	; (8003930 <__swsetup_r+0xec>)
 8003890:	429c      	cmp	r4, r3
 8003892:	d1e8      	bne.n	8003866 <__swsetup_r+0x22>
 8003894:	68ec      	ldr	r4, [r5, #12]
 8003896:	e7e6      	b.n	8003866 <__swsetup_r+0x22>
 8003898:	075b      	lsls	r3, r3, #29
 800389a:	d513      	bpl.n	80038c4 <__swsetup_r+0x80>
 800389c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800389e:	2900      	cmp	r1, #0
 80038a0:	d008      	beq.n	80038b4 <__swsetup_r+0x70>
 80038a2:	0023      	movs	r3, r4
 80038a4:	3344      	adds	r3, #68	; 0x44
 80038a6:	4299      	cmp	r1, r3
 80038a8:	d002      	beq.n	80038b0 <__swsetup_r+0x6c>
 80038aa:	0030      	movs	r0, r6
 80038ac:	f000 f9bc 	bl	8003c28 <_free_r>
 80038b0:	2300      	movs	r3, #0
 80038b2:	6363      	str	r3, [r4, #52]	; 0x34
 80038b4:	2224      	movs	r2, #36	; 0x24
 80038b6:	89a3      	ldrh	r3, [r4, #12]
 80038b8:	4393      	bics	r3, r2
 80038ba:	81a3      	strh	r3, [r4, #12]
 80038bc:	2300      	movs	r3, #0
 80038be:	6063      	str	r3, [r4, #4]
 80038c0:	6923      	ldr	r3, [r4, #16]
 80038c2:	6023      	str	r3, [r4, #0]
 80038c4:	2308      	movs	r3, #8
 80038c6:	89a2      	ldrh	r2, [r4, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	81a3      	strh	r3, [r4, #12]
 80038cc:	6923      	ldr	r3, [r4, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10b      	bne.n	80038ea <__swsetup_r+0xa6>
 80038d2:	21a0      	movs	r1, #160	; 0xa0
 80038d4:	2280      	movs	r2, #128	; 0x80
 80038d6:	89a3      	ldrh	r3, [r4, #12]
 80038d8:	0089      	lsls	r1, r1, #2
 80038da:	0092      	lsls	r2, r2, #2
 80038dc:	400b      	ands	r3, r1
 80038de:	4293      	cmp	r3, r2
 80038e0:	d003      	beq.n	80038ea <__swsetup_r+0xa6>
 80038e2:	0021      	movs	r1, r4
 80038e4:	0030      	movs	r0, r6
 80038e6:	f000 f93f 	bl	8003b68 <__smakebuf_r>
 80038ea:	220c      	movs	r2, #12
 80038ec:	5ea3      	ldrsh	r3, [r4, r2]
 80038ee:	2001      	movs	r0, #1
 80038f0:	001a      	movs	r2, r3
 80038f2:	b299      	uxth	r1, r3
 80038f4:	4002      	ands	r2, r0
 80038f6:	4203      	tst	r3, r0
 80038f8:	d00f      	beq.n	800391a <__swsetup_r+0xd6>
 80038fa:	2200      	movs	r2, #0
 80038fc:	60a2      	str	r2, [r4, #8]
 80038fe:	6962      	ldr	r2, [r4, #20]
 8003900:	4252      	negs	r2, r2
 8003902:	61a2      	str	r2, [r4, #24]
 8003904:	2000      	movs	r0, #0
 8003906:	6922      	ldr	r2, [r4, #16]
 8003908:	4282      	cmp	r2, r0
 800390a:	d1ba      	bne.n	8003882 <__swsetup_r+0x3e>
 800390c:	060a      	lsls	r2, r1, #24
 800390e:	d5b8      	bpl.n	8003882 <__swsetup_r+0x3e>
 8003910:	2240      	movs	r2, #64	; 0x40
 8003912:	4313      	orrs	r3, r2
 8003914:	81a3      	strh	r3, [r4, #12]
 8003916:	3801      	subs	r0, #1
 8003918:	e7b3      	b.n	8003882 <__swsetup_r+0x3e>
 800391a:	0788      	lsls	r0, r1, #30
 800391c:	d400      	bmi.n	8003920 <__swsetup_r+0xdc>
 800391e:	6962      	ldr	r2, [r4, #20]
 8003920:	60a2      	str	r2, [r4, #8]
 8003922:	e7ef      	b.n	8003904 <__swsetup_r+0xc0>
 8003924:	2000000c 	.word	0x2000000c
 8003928:	08003da0 	.word	0x08003da0
 800392c:	08003dc0 	.word	0x08003dc0
 8003930:	08003d80 	.word	0x08003d80

08003934 <_close_r>:
 8003934:	2300      	movs	r3, #0
 8003936:	b570      	push	{r4, r5, r6, lr}
 8003938:	4d06      	ldr	r5, [pc, #24]	; (8003954 <_close_r+0x20>)
 800393a:	0004      	movs	r4, r0
 800393c:	0008      	movs	r0, r1
 800393e:	602b      	str	r3, [r5, #0]
 8003940:	f7fc ff7d 	bl	800083e <_close>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d103      	bne.n	8003950 <_close_r+0x1c>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d000      	beq.n	8003950 <_close_r+0x1c>
 800394e:	6023      	str	r3, [r4, #0]
 8003950:	bd70      	pop	{r4, r5, r6, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	200001b4 	.word	0x200001b4

08003958 <__sflush_r>:
 8003958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800395a:	898b      	ldrh	r3, [r1, #12]
 800395c:	0005      	movs	r5, r0
 800395e:	000c      	movs	r4, r1
 8003960:	071a      	lsls	r2, r3, #28
 8003962:	d45f      	bmi.n	8003a24 <__sflush_r+0xcc>
 8003964:	684a      	ldr	r2, [r1, #4]
 8003966:	2a00      	cmp	r2, #0
 8003968:	dc04      	bgt.n	8003974 <__sflush_r+0x1c>
 800396a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800396c:	2a00      	cmp	r2, #0
 800396e:	dc01      	bgt.n	8003974 <__sflush_r+0x1c>
 8003970:	2000      	movs	r0, #0
 8003972:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003974:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003976:	2f00      	cmp	r7, #0
 8003978:	d0fa      	beq.n	8003970 <__sflush_r+0x18>
 800397a:	2200      	movs	r2, #0
 800397c:	2180      	movs	r1, #128	; 0x80
 800397e:	682e      	ldr	r6, [r5, #0]
 8003980:	602a      	str	r2, [r5, #0]
 8003982:	001a      	movs	r2, r3
 8003984:	0149      	lsls	r1, r1, #5
 8003986:	400a      	ands	r2, r1
 8003988:	420b      	tst	r3, r1
 800398a:	d034      	beq.n	80039f6 <__sflush_r+0x9e>
 800398c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800398e:	89a3      	ldrh	r3, [r4, #12]
 8003990:	075b      	lsls	r3, r3, #29
 8003992:	d506      	bpl.n	80039a2 <__sflush_r+0x4a>
 8003994:	6863      	ldr	r3, [r4, #4]
 8003996:	1ac0      	subs	r0, r0, r3
 8003998:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <__sflush_r+0x4a>
 800399e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039a0:	1ac0      	subs	r0, r0, r3
 80039a2:	0002      	movs	r2, r0
 80039a4:	6a21      	ldr	r1, [r4, #32]
 80039a6:	2300      	movs	r3, #0
 80039a8:	0028      	movs	r0, r5
 80039aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80039ac:	47b8      	blx	r7
 80039ae:	89a1      	ldrh	r1, [r4, #12]
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d106      	bne.n	80039c2 <__sflush_r+0x6a>
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	2b1d      	cmp	r3, #29
 80039b8:	d831      	bhi.n	8003a1e <__sflush_r+0xc6>
 80039ba:	4a2c      	ldr	r2, [pc, #176]	; (8003a6c <__sflush_r+0x114>)
 80039bc:	40da      	lsrs	r2, r3
 80039be:	07d3      	lsls	r3, r2, #31
 80039c0:	d52d      	bpl.n	8003a1e <__sflush_r+0xc6>
 80039c2:	2300      	movs	r3, #0
 80039c4:	6063      	str	r3, [r4, #4]
 80039c6:	6923      	ldr	r3, [r4, #16]
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	04cb      	lsls	r3, r1, #19
 80039cc:	d505      	bpl.n	80039da <__sflush_r+0x82>
 80039ce:	1c43      	adds	r3, r0, #1
 80039d0:	d102      	bne.n	80039d8 <__sflush_r+0x80>
 80039d2:	682b      	ldr	r3, [r5, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d100      	bne.n	80039da <__sflush_r+0x82>
 80039d8:	6560      	str	r0, [r4, #84]	; 0x54
 80039da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039dc:	602e      	str	r6, [r5, #0]
 80039de:	2900      	cmp	r1, #0
 80039e0:	d0c6      	beq.n	8003970 <__sflush_r+0x18>
 80039e2:	0023      	movs	r3, r4
 80039e4:	3344      	adds	r3, #68	; 0x44
 80039e6:	4299      	cmp	r1, r3
 80039e8:	d002      	beq.n	80039f0 <__sflush_r+0x98>
 80039ea:	0028      	movs	r0, r5
 80039ec:	f000 f91c 	bl	8003c28 <_free_r>
 80039f0:	2000      	movs	r0, #0
 80039f2:	6360      	str	r0, [r4, #52]	; 0x34
 80039f4:	e7bd      	b.n	8003972 <__sflush_r+0x1a>
 80039f6:	2301      	movs	r3, #1
 80039f8:	0028      	movs	r0, r5
 80039fa:	6a21      	ldr	r1, [r4, #32]
 80039fc:	47b8      	blx	r7
 80039fe:	1c43      	adds	r3, r0, #1
 8003a00:	d1c5      	bne.n	800398e <__sflush_r+0x36>
 8003a02:	682b      	ldr	r3, [r5, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0c2      	beq.n	800398e <__sflush_r+0x36>
 8003a08:	2b1d      	cmp	r3, #29
 8003a0a:	d001      	beq.n	8003a10 <__sflush_r+0xb8>
 8003a0c:	2b16      	cmp	r3, #22
 8003a0e:	d101      	bne.n	8003a14 <__sflush_r+0xbc>
 8003a10:	602e      	str	r6, [r5, #0]
 8003a12:	e7ad      	b.n	8003970 <__sflush_r+0x18>
 8003a14:	2340      	movs	r3, #64	; 0x40
 8003a16:	89a2      	ldrh	r2, [r4, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	81a3      	strh	r3, [r4, #12]
 8003a1c:	e7a9      	b.n	8003972 <__sflush_r+0x1a>
 8003a1e:	2340      	movs	r3, #64	; 0x40
 8003a20:	430b      	orrs	r3, r1
 8003a22:	e7fa      	b.n	8003a1a <__sflush_r+0xc2>
 8003a24:	690f      	ldr	r7, [r1, #16]
 8003a26:	2f00      	cmp	r7, #0
 8003a28:	d0a2      	beq.n	8003970 <__sflush_r+0x18>
 8003a2a:	680a      	ldr	r2, [r1, #0]
 8003a2c:	600f      	str	r7, [r1, #0]
 8003a2e:	1bd2      	subs	r2, r2, r7
 8003a30:	9201      	str	r2, [sp, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	079b      	lsls	r3, r3, #30
 8003a36:	d100      	bne.n	8003a3a <__sflush_r+0xe2>
 8003a38:	694a      	ldr	r2, [r1, #20]
 8003a3a:	60a2      	str	r2, [r4, #8]
 8003a3c:	9b01      	ldr	r3, [sp, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	dc00      	bgt.n	8003a44 <__sflush_r+0xec>
 8003a42:	e795      	b.n	8003970 <__sflush_r+0x18>
 8003a44:	003a      	movs	r2, r7
 8003a46:	0028      	movs	r0, r5
 8003a48:	9b01      	ldr	r3, [sp, #4]
 8003a4a:	6a21      	ldr	r1, [r4, #32]
 8003a4c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a4e:	47b0      	blx	r6
 8003a50:	2800      	cmp	r0, #0
 8003a52:	dc06      	bgt.n	8003a62 <__sflush_r+0x10a>
 8003a54:	2340      	movs	r3, #64	; 0x40
 8003a56:	2001      	movs	r0, #1
 8003a58:	89a2      	ldrh	r2, [r4, #12]
 8003a5a:	4240      	negs	r0, r0
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	81a3      	strh	r3, [r4, #12]
 8003a60:	e787      	b.n	8003972 <__sflush_r+0x1a>
 8003a62:	9b01      	ldr	r3, [sp, #4]
 8003a64:	183f      	adds	r7, r7, r0
 8003a66:	1a1b      	subs	r3, r3, r0
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	e7e7      	b.n	8003a3c <__sflush_r+0xe4>
 8003a6c:	20400001 	.word	0x20400001

08003a70 <_fflush_r>:
 8003a70:	690b      	ldr	r3, [r1, #16]
 8003a72:	b570      	push	{r4, r5, r6, lr}
 8003a74:	0005      	movs	r5, r0
 8003a76:	000c      	movs	r4, r1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <_fflush_r+0x12>
 8003a7c:	2500      	movs	r5, #0
 8003a7e:	0028      	movs	r0, r5
 8003a80:	bd70      	pop	{r4, r5, r6, pc}
 8003a82:	2800      	cmp	r0, #0
 8003a84:	d004      	beq.n	8003a90 <_fflush_r+0x20>
 8003a86:	6983      	ldr	r3, [r0, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <_fflush_r+0x20>
 8003a8c:	f7ff f9f2 	bl	8002e74 <__sinit>
 8003a90:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <_fflush_r+0x74>)
 8003a92:	429c      	cmp	r4, r3
 8003a94:	d11b      	bne.n	8003ace <_fflush_r+0x5e>
 8003a96:	686c      	ldr	r4, [r5, #4]
 8003a98:	220c      	movs	r2, #12
 8003a9a:	5ea3      	ldrsh	r3, [r4, r2]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0ed      	beq.n	8003a7c <_fflush_r+0xc>
 8003aa0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003aa2:	07d2      	lsls	r2, r2, #31
 8003aa4:	d404      	bmi.n	8003ab0 <_fflush_r+0x40>
 8003aa6:	059b      	lsls	r3, r3, #22
 8003aa8:	d402      	bmi.n	8003ab0 <_fflush_r+0x40>
 8003aaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aac:	f7ff fa83 	bl	8002fb6 <__retarget_lock_acquire_recursive>
 8003ab0:	0028      	movs	r0, r5
 8003ab2:	0021      	movs	r1, r4
 8003ab4:	f7ff ff50 	bl	8003958 <__sflush_r>
 8003ab8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003aba:	0005      	movs	r5, r0
 8003abc:	07db      	lsls	r3, r3, #31
 8003abe:	d4de      	bmi.n	8003a7e <_fflush_r+0xe>
 8003ac0:	89a3      	ldrh	r3, [r4, #12]
 8003ac2:	059b      	lsls	r3, r3, #22
 8003ac4:	d4db      	bmi.n	8003a7e <_fflush_r+0xe>
 8003ac6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ac8:	f7ff fa76 	bl	8002fb8 <__retarget_lock_release_recursive>
 8003acc:	e7d7      	b.n	8003a7e <_fflush_r+0xe>
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <_fflush_r+0x78>)
 8003ad0:	429c      	cmp	r4, r3
 8003ad2:	d101      	bne.n	8003ad8 <_fflush_r+0x68>
 8003ad4:	68ac      	ldr	r4, [r5, #8]
 8003ad6:	e7df      	b.n	8003a98 <_fflush_r+0x28>
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <_fflush_r+0x7c>)
 8003ada:	429c      	cmp	r4, r3
 8003adc:	d1dc      	bne.n	8003a98 <_fflush_r+0x28>
 8003ade:	68ec      	ldr	r4, [r5, #12]
 8003ae0:	e7da      	b.n	8003a98 <_fflush_r+0x28>
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	08003da0 	.word	0x08003da0
 8003ae8:	08003dc0 	.word	0x08003dc0
 8003aec:	08003d80 	.word	0x08003d80

08003af0 <_lseek_r>:
 8003af0:	b570      	push	{r4, r5, r6, lr}
 8003af2:	0004      	movs	r4, r0
 8003af4:	0008      	movs	r0, r1
 8003af6:	0011      	movs	r1, r2
 8003af8:	001a      	movs	r2, r3
 8003afa:	2300      	movs	r3, #0
 8003afc:	4d05      	ldr	r5, [pc, #20]	; (8003b14 <_lseek_r+0x24>)
 8003afe:	602b      	str	r3, [r5, #0]
 8003b00:	f7fc febe 	bl	8000880 <_lseek>
 8003b04:	1c43      	adds	r3, r0, #1
 8003b06:	d103      	bne.n	8003b10 <_lseek_r+0x20>
 8003b08:	682b      	ldr	r3, [r5, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d000      	beq.n	8003b10 <_lseek_r+0x20>
 8003b0e:	6023      	str	r3, [r4, #0]
 8003b10:	bd70      	pop	{r4, r5, r6, pc}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	200001b4 	.word	0x200001b4

08003b18 <__swhatbuf_r>:
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	000e      	movs	r6, r1
 8003b1c:	001d      	movs	r5, r3
 8003b1e:	230e      	movs	r3, #14
 8003b20:	5ec9      	ldrsh	r1, [r1, r3]
 8003b22:	0014      	movs	r4, r2
 8003b24:	b096      	sub	sp, #88	; 0x58
 8003b26:	2900      	cmp	r1, #0
 8003b28:	da08      	bge.n	8003b3c <__swhatbuf_r+0x24>
 8003b2a:	220c      	movs	r2, #12
 8003b2c:	5eb3      	ldrsh	r3, [r6, r2]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	602a      	str	r2, [r5, #0]
 8003b32:	061b      	lsls	r3, r3, #24
 8003b34:	d411      	bmi.n	8003b5a <__swhatbuf_r+0x42>
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	e00f      	b.n	8003b5c <__swhatbuf_r+0x44>
 8003b3c:	466a      	mov	r2, sp
 8003b3e:	f000 f8d1 	bl	8003ce4 <_fstat_r>
 8003b42:	2800      	cmp	r0, #0
 8003b44:	dbf1      	blt.n	8003b2a <__swhatbuf_r+0x12>
 8003b46:	23f0      	movs	r3, #240	; 0xf0
 8003b48:	9901      	ldr	r1, [sp, #4]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	4019      	ands	r1, r3
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <__swhatbuf_r+0x4c>)
 8003b50:	18c9      	adds	r1, r1, r3
 8003b52:	424b      	negs	r3, r1
 8003b54:	4159      	adcs	r1, r3
 8003b56:	6029      	str	r1, [r5, #0]
 8003b58:	e7ed      	b.n	8003b36 <__swhatbuf_r+0x1e>
 8003b5a:	2340      	movs	r3, #64	; 0x40
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	6023      	str	r3, [r4, #0]
 8003b60:	b016      	add	sp, #88	; 0x58
 8003b62:	bd70      	pop	{r4, r5, r6, pc}
 8003b64:	ffffe000 	.word	0xffffe000

08003b68 <__smakebuf_r>:
 8003b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b6a:	2602      	movs	r6, #2
 8003b6c:	898b      	ldrh	r3, [r1, #12]
 8003b6e:	0005      	movs	r5, r0
 8003b70:	000c      	movs	r4, r1
 8003b72:	4233      	tst	r3, r6
 8003b74:	d006      	beq.n	8003b84 <__smakebuf_r+0x1c>
 8003b76:	0023      	movs	r3, r4
 8003b78:	3347      	adds	r3, #71	; 0x47
 8003b7a:	6023      	str	r3, [r4, #0]
 8003b7c:	6123      	str	r3, [r4, #16]
 8003b7e:	2301      	movs	r3, #1
 8003b80:	6163      	str	r3, [r4, #20]
 8003b82:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003b84:	466a      	mov	r2, sp
 8003b86:	ab01      	add	r3, sp, #4
 8003b88:	f7ff ffc6 	bl	8003b18 <__swhatbuf_r>
 8003b8c:	9900      	ldr	r1, [sp, #0]
 8003b8e:	0007      	movs	r7, r0
 8003b90:	0028      	movs	r0, r5
 8003b92:	f7ff fa35 	bl	8003000 <_malloc_r>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d108      	bne.n	8003bac <__smakebuf_r+0x44>
 8003b9a:	220c      	movs	r2, #12
 8003b9c:	5ea3      	ldrsh	r3, [r4, r2]
 8003b9e:	059a      	lsls	r2, r3, #22
 8003ba0:	d4ef      	bmi.n	8003b82 <__smakebuf_r+0x1a>
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	4393      	bics	r3, r2
 8003ba6:	431e      	orrs	r6, r3
 8003ba8:	81a6      	strh	r6, [r4, #12]
 8003baa:	e7e4      	b.n	8003b76 <__smakebuf_r+0xe>
 8003bac:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <__smakebuf_r+0x84>)
 8003bae:	62ab      	str	r3, [r5, #40]	; 0x28
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	89a2      	ldrh	r2, [r4, #12]
 8003bb4:	6020      	str	r0, [r4, #0]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	81a3      	strh	r3, [r4, #12]
 8003bba:	9b00      	ldr	r3, [sp, #0]
 8003bbc:	6120      	str	r0, [r4, #16]
 8003bbe:	6163      	str	r3, [r4, #20]
 8003bc0:	9b01      	ldr	r3, [sp, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00d      	beq.n	8003be2 <__smakebuf_r+0x7a>
 8003bc6:	0028      	movs	r0, r5
 8003bc8:	230e      	movs	r3, #14
 8003bca:	5ee1      	ldrsh	r1, [r4, r3]
 8003bcc:	f000 f89c 	bl	8003d08 <_isatty_r>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	d006      	beq.n	8003be2 <__smakebuf_r+0x7a>
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	89a3      	ldrh	r3, [r4, #12]
 8003bd8:	4393      	bics	r3, r2
 8003bda:	001a      	movs	r2, r3
 8003bdc:	2301      	movs	r3, #1
 8003bde:	4313      	orrs	r3, r2
 8003be0:	81a3      	strh	r3, [r4, #12]
 8003be2:	89a0      	ldrh	r0, [r4, #12]
 8003be4:	4307      	orrs	r7, r0
 8003be6:	81a7      	strh	r7, [r4, #12]
 8003be8:	e7cb      	b.n	8003b82 <__smakebuf_r+0x1a>
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	08002df9 	.word	0x08002df9

08003bf0 <memchr>:
 8003bf0:	b2c9      	uxtb	r1, r1
 8003bf2:	1882      	adds	r2, r0, r2
 8003bf4:	4290      	cmp	r0, r2
 8003bf6:	d101      	bne.n	8003bfc <memchr+0xc>
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	4770      	bx	lr
 8003bfc:	7803      	ldrb	r3, [r0, #0]
 8003bfe:	428b      	cmp	r3, r1
 8003c00:	d0fb      	beq.n	8003bfa <memchr+0xa>
 8003c02:	3001      	adds	r0, #1
 8003c04:	e7f6      	b.n	8003bf4 <memchr+0x4>
	...

08003c08 <__malloc_lock>:
 8003c08:	b510      	push	{r4, lr}
 8003c0a:	4802      	ldr	r0, [pc, #8]	; (8003c14 <__malloc_lock+0xc>)
 8003c0c:	f7ff f9d3 	bl	8002fb6 <__retarget_lock_acquire_recursive>
 8003c10:	bd10      	pop	{r4, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	200001a8 	.word	0x200001a8

08003c18 <__malloc_unlock>:
 8003c18:	b510      	push	{r4, lr}
 8003c1a:	4802      	ldr	r0, [pc, #8]	; (8003c24 <__malloc_unlock+0xc>)
 8003c1c:	f7ff f9cc 	bl	8002fb8 <__retarget_lock_release_recursive>
 8003c20:	bd10      	pop	{r4, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	200001a8 	.word	0x200001a8

08003c28 <_free_r>:
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	0005      	movs	r5, r0
 8003c2c:	2900      	cmp	r1, #0
 8003c2e:	d010      	beq.n	8003c52 <_free_r+0x2a>
 8003c30:	1f0c      	subs	r4, r1, #4
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	da00      	bge.n	8003c3a <_free_r+0x12>
 8003c38:	18e4      	adds	r4, r4, r3
 8003c3a:	0028      	movs	r0, r5
 8003c3c:	f7ff ffe4 	bl	8003c08 <__malloc_lock>
 8003c40:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <_free_r+0x90>)
 8003c42:	6813      	ldr	r3, [r2, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d105      	bne.n	8003c54 <_free_r+0x2c>
 8003c48:	6063      	str	r3, [r4, #4]
 8003c4a:	6014      	str	r4, [r2, #0]
 8003c4c:	0028      	movs	r0, r5
 8003c4e:	f7ff ffe3 	bl	8003c18 <__malloc_unlock>
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	42a3      	cmp	r3, r4
 8003c56:	d908      	bls.n	8003c6a <_free_r+0x42>
 8003c58:	6821      	ldr	r1, [r4, #0]
 8003c5a:	1860      	adds	r0, r4, r1
 8003c5c:	4283      	cmp	r3, r0
 8003c5e:	d1f3      	bne.n	8003c48 <_free_r+0x20>
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	1841      	adds	r1, r0, r1
 8003c66:	6021      	str	r1, [r4, #0]
 8003c68:	e7ee      	b.n	8003c48 <_free_r+0x20>
 8003c6a:	001a      	movs	r2, r3
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <_free_r+0x4e>
 8003c72:	42a3      	cmp	r3, r4
 8003c74:	d9f9      	bls.n	8003c6a <_free_r+0x42>
 8003c76:	6811      	ldr	r1, [r2, #0]
 8003c78:	1850      	adds	r0, r2, r1
 8003c7a:	42a0      	cmp	r0, r4
 8003c7c:	d10b      	bne.n	8003c96 <_free_r+0x6e>
 8003c7e:	6820      	ldr	r0, [r4, #0]
 8003c80:	1809      	adds	r1, r1, r0
 8003c82:	1850      	adds	r0, r2, r1
 8003c84:	6011      	str	r1, [r2, #0]
 8003c86:	4283      	cmp	r3, r0
 8003c88:	d1e0      	bne.n	8003c4c <_free_r+0x24>
 8003c8a:	6818      	ldr	r0, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	1841      	adds	r1, r0, r1
 8003c90:	6011      	str	r1, [r2, #0]
 8003c92:	6053      	str	r3, [r2, #4]
 8003c94:	e7da      	b.n	8003c4c <_free_r+0x24>
 8003c96:	42a0      	cmp	r0, r4
 8003c98:	d902      	bls.n	8003ca0 <_free_r+0x78>
 8003c9a:	230c      	movs	r3, #12
 8003c9c:	602b      	str	r3, [r5, #0]
 8003c9e:	e7d5      	b.n	8003c4c <_free_r+0x24>
 8003ca0:	6821      	ldr	r1, [r4, #0]
 8003ca2:	1860      	adds	r0, r4, r1
 8003ca4:	4283      	cmp	r3, r0
 8003ca6:	d103      	bne.n	8003cb0 <_free_r+0x88>
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	1841      	adds	r1, r0, r1
 8003cae:	6021      	str	r1, [r4, #0]
 8003cb0:	6063      	str	r3, [r4, #4]
 8003cb2:	6054      	str	r4, [r2, #4]
 8003cb4:	e7ca      	b.n	8003c4c <_free_r+0x24>
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	200001ac 	.word	0x200001ac

08003cbc <_read_r>:
 8003cbc:	b570      	push	{r4, r5, r6, lr}
 8003cbe:	0004      	movs	r4, r0
 8003cc0:	0008      	movs	r0, r1
 8003cc2:	0011      	movs	r1, r2
 8003cc4:	001a      	movs	r2, r3
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	4d05      	ldr	r5, [pc, #20]	; (8003ce0 <_read_r+0x24>)
 8003cca:	602b      	str	r3, [r5, #0]
 8003ccc:	f7fc fd7e 	bl	80007cc <_read>
 8003cd0:	1c43      	adds	r3, r0, #1
 8003cd2:	d103      	bne.n	8003cdc <_read_r+0x20>
 8003cd4:	682b      	ldr	r3, [r5, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d000      	beq.n	8003cdc <_read_r+0x20>
 8003cda:	6023      	str	r3, [r4, #0]
 8003cdc:	bd70      	pop	{r4, r5, r6, pc}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	200001b4 	.word	0x200001b4

08003ce4 <_fstat_r>:
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	b570      	push	{r4, r5, r6, lr}
 8003ce8:	4d06      	ldr	r5, [pc, #24]	; (8003d04 <_fstat_r+0x20>)
 8003cea:	0004      	movs	r4, r0
 8003cec:	0008      	movs	r0, r1
 8003cee:	0011      	movs	r1, r2
 8003cf0:	602b      	str	r3, [r5, #0]
 8003cf2:	f7fc fdae 	bl	8000852 <_fstat>
 8003cf6:	1c43      	adds	r3, r0, #1
 8003cf8:	d103      	bne.n	8003d02 <_fstat_r+0x1e>
 8003cfa:	682b      	ldr	r3, [r5, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d000      	beq.n	8003d02 <_fstat_r+0x1e>
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	bd70      	pop	{r4, r5, r6, pc}
 8003d04:	200001b4 	.word	0x200001b4

08003d08 <_isatty_r>:
 8003d08:	2300      	movs	r3, #0
 8003d0a:	b570      	push	{r4, r5, r6, lr}
 8003d0c:	4d06      	ldr	r5, [pc, #24]	; (8003d28 <_isatty_r+0x20>)
 8003d0e:	0004      	movs	r4, r0
 8003d10:	0008      	movs	r0, r1
 8003d12:	602b      	str	r3, [r5, #0]
 8003d14:	f7fc fdab 	bl	800086e <_isatty>
 8003d18:	1c43      	adds	r3, r0, #1
 8003d1a:	d103      	bne.n	8003d24 <_isatty_r+0x1c>
 8003d1c:	682b      	ldr	r3, [r5, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d000      	beq.n	8003d24 <_isatty_r+0x1c>
 8003d22:	6023      	str	r3, [r4, #0]
 8003d24:	bd70      	pop	{r4, r5, r6, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	200001b4 	.word	0x200001b4

08003d2c <_init>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr

08003d38 <_fini>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr
